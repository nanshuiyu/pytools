<?xml version="1.0" encoding="utf-8" ?>
<!--
  Copyright (c) Microsoft Corporation.

  This source code is subject to terms and conditions of the Apache License, Version 2.0. A
  copy of the license can be found in the License.html file at the root of this distribution. If
  you cannot locate the Apache License, Version 2.0, please send an email to
  vspython@microsoft.com. By using this source code in any fashion, you are agreeing to be bound
  by the terms of the Apache License, Version 2.0.
 
  You must not remove this notice, or any other, from this software.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <_PythonToolsPath Condition="!Exists($(_PythonToolsPath))">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\Software\Microsoft\PythonTools\$(VisualStudioVersion)', 'InstallDir', null, RegistryView.Registry32))</_PythonToolsPath>
    <_PythonToolsPath Condition="!Exists($(_PythonToolsPath))">$(LocalAppData)\Microsoft\VisualStudio\$(VisualStudioVersion)\Extensions\Microsoft\Python Tools for Visual Studio\2.0</_PythonToolsPath>
    <_PythonToolsPath Condition="!HasTrailingSlash('$(_PythonToolsPath)')">$(_PythonToolsPath)\</_PythonToolsPath>
    <_PTVSSupportPath Condition="'$(_PTVSSupportPath)' == ''">$(MSBuildThisFileDirectory)</_PTVSSupportPath>
    <_PTVSSupportPath Condition="!HasTrailingSlash('$(_PTVSSupportPath)')">$(_PTVSSupportPath)\</_PTVSSupportPath>
  </PropertyGroup>

  <!-- Creates a command object that will be displayed in the IDE.
  
  ErrorRegex/WarningRegex are only useful when ExecuteIn="output". They identify
  (with named groups) 'message', 'code', 'filename', 'line' and 'column' of an
  item to add to the Error List window.

  <Target Name="Name1" Label="Display Name" Returns="@(Commands)">
    <CreatePythonCommandItem Target="filename, module name, or code"
                   TargetType="executable/script/module/code/pip"
                   Arguments="..."
                   ExecuteIn="console/output/repl[:Display name]/Repl[:Display name]"
                   ErrorRegex="..."
                   WarningRegex="..."
                   RequiredPackages="...;...">
      <Output TaskParameter="Command"
              ItemName="Commands" />
    </CreatePythonCommandItem>
  </Target>
  -->
  <UsingTask AssemblyFile="$([MSBuild]::Unescape($(_PythonToolsPath)\Microsoft.PythonTools.BuildTasks.dll))"
             TaskName="CreatePythonCommandItem"
             TaskFactory="CreatePythonCommandItemFactory">
    <Task Evaluate="true">
      <PropertyGroup>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
      </PropertyGroup>
    </Task>
  </UsingTask>

  <!-- Runs a Python command. Like CreatePythonCommandItem, but instead of
       creating a user-activatable UI command, just runs it immediately.
  <Target Name="Name1" Label="Display Name" Returns="@(Commands)">
    <RunPythonCommand Target="filename, module name, or code"
                   TargetType="executable/script/module/code"
                   Arguments="..."
                   RequiredPackages="...;...">
      <Output TaskParameter="Command"
              ItemName="Commands" />
    </RunPythonCommand>
  </Target>
  -->
  <UsingTask AssemblyFile="$([MSBuild]::Unescape($(_PythonToolsPath)\Microsoft.PythonTools.BuildTasks.dll))"
             TaskName="RunPythonCommand"
             TaskFactory="RunPythonCommandFactory">
    <Task Evaluate="true">
      <PropertyGroup>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
      </PropertyGroup>
    </Task>
  </UsingTask>

  <!-- Gets all the settings of the specified environment. If InterpreterId and
       InterpreterVersion are omitted, uses the active environment.

  <ResolveEnvironment [InterpreterId="..." InterpreterVersion="..."]>
    <Output TaskParameter="PrefixPath" PropertyName="PrefixPath" />
    <Output TaskParameter="ProjectRelativePrefixPath" PropertyName="ProjectRelativePrefixPath" />
    <Output TaskParameter="InterpreterPath" PropertyName="InterpreterPath" />
    <Output TaskParameter="WindowsInterpreterPath" PropertyName="WindowsInterpreterPath" />
    <Output TaskParameter="LibraryPath" PropertyName="LibraryPath" />
    <Output TaskParameter="Architecture" PropertyName="Architecture" />
    <Output TaskParameter="PathEnvironmentVariable" PropertyName="PathEnvironmentVariable" />
    <Output TaskParameter="Description" PropertyName="Description" />
    <Output TaskParameter="MajorVersion" PropertyName="MajorVersion" />
    <Output TaskParameter="MinorVersion" PropertyName="MinorVersion" />
  </ResolveEnvironment>
  -->
  <UsingTask AssemblyFile="$([MSBuild]::Unescape($(_PythonToolsPath)\Microsoft.PythonTools.BuildTasks.dll))"
             TaskName="ResolveEnvironment"
             TaskFactory="ResolveEnvironmentFactory">
    <Task Evaluate="true">
      <PropertyGroup>
        <ProjectPath>$(MSBuildProjectFullPath)</ProjectPath>
      </PropertyGroup>
    </Task>
  </UsingTask>

  <!-- Converts a file path to an importable module name.
  
  <ConvertPathToModuleName Paths="..." [PathLimit="..."]>
    <Output TaskParameter="ModuleNames"
            ItemName="Modules" />
  </ConvertPathToModuleName>
  -->
  <UsingTask AssemblyFile="$([MSBuild]::Unescape($(_PythonToolsPath)\Microsoft.PythonTools.BuildTasks.dll))"
             TaskName="ConvertPathToModuleName" />

  <!-- Gets the fully qualified path to the project home.  -->
  <Target Name="ResolveQualifiedProjectHome">
    <CombinePath BasePath="$(MSBuildProjectDirectory)" Paths="$(ProjectHome)" Condition="'$(ProjectHome)' != ''">
      <Output TaskParameter="CombinedPaths" PropertyName="QualifiedProjectHome"/>
    </CombinePath>
    <PropertyGroup Condition="'$(ProjectHome)' == ''">
      <QualifiedProjectHome>$(MSBuildProjectDirectory)</QualifiedProjectHome>
    </PropertyGroup>
    <PropertyGroup>
      <QualifiedProjectHome Condition="!HasTrailingSlash('$(QualifiedProjectHome)')">$(QualifiedProjectHome)\</QualifiedProjectHome>
    </PropertyGroup>
    <Message Importance="low" Text="QualifiedProjectHome: $(QualifiedProjectHome)" />
  </Target>

  <!-- Gets the full path and module name of the startup file -->
  <Target Name="ResolveStartupPath"
          DependsOnTargets="ResolveQualifiedProjectHome"
          AfterTargets="_CheckForInvalidConfigurationAndPlatform"
          Condition="'$(StartupFile)' != ''">
    <CombinePath BasePath="$(QualifiedProjectHome)" Paths="$(StartupFile)">
      <Output TaskParameter="CombinedPaths" PropertyName="StartupPath" />
    </CombinePath>

    <Message Importance="low" Text="StartupPath: $(StartupPath)" />

    <ConvertPathToModuleName Paths="$(StartupPath)" PathLimit="$(QualifiedProjectHome)">
      <Output TaskParameter="ModuleNames" PropertyName="StartupModule" />
    </ConvertPathToModuleName>

    <Message Importance="low" Text="StartupModule: $(StartupModule)" />
  </Target>

  <!-- PyLint -->

  <PropertyGroup>
    <PythonCommands>$(PythonCommands);PythonRunPyLintCommand</PythonCommands>
    <PyLintWarningRegex>
    <![CDATA[^(?<filename>.+?)\((?<line>\d+),(?<column>\d+)\): warning (?<msg_id>.+?): (?<message>.+?)$]]>
    </PyLintWarningRegex>
  </PropertyGroup>

  <Target Name="PythonRunPyLintCommand"
          Label="Run PyLint"
          DependsOnTargets="ResolveStartupPath"
          Returns="@(Commands)">
    <CreatePythonCommandItem Target="pylint.lint"
                             TargetType="module"
                             Arguments="&quot;--msg-template={abspath}({line},{column}): warning {msg_id}: {msg}&quot; -r n @(Compile, ' ')"
                             ExecuteIn="output"
                             RequiredPackages="pylint&gt;=1.0.0"
                             WarningRegex="$(PyLintWarningRegex)">
      <Output TaskParameter="Command" ItemName="Commands" />
    </CreatePythonCommandItem>
  </Target>

  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />

  <!-- We don't have an intermediate assembly, but the common targets will set
       one anyway. We clear it before PrepareForBuild in case another targets
       file overrides that one.
  -->
  <Target Name="_ClearIntermediateAssembly" BeforeTargets="PrepareForBuild">
    <ItemGroup>
      <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    </ItemGroup>
  </Target>

  <Target Name="PrepareForBuild">
    <MakeDir Directories="$(OutDir);@(CreateDirectory)" ContinueOnError="True"/>
  </Target>

  <Target Name="_CopyAppConfigFile" />
</Project>