(dp0
Vmembers
p1
(dp2
Vgetaddrinfo
p3
(dp4
Vkind
p5
Vfunction
p6
sVvalue
p7
(dp8
Voverloads
p9
((dp10
Vret_type
p11
(V__builtin__
p12
Vlist
p13
tp14
sVargs
p15
(lp16
(dp17
Vtype
p18
(g12
Vstr
p19
tp20
sVname
p21
Vhost
p22
sa(dp23
g18
(g12
Vobject
p24
tp25
sg21
Vport
p26
sa(dp27
g18
(g12
Vint
p28
tp29
sg21
Vfamily
p30
sVdefault_value
p31
V0
p32
sa(dp33
g18
(g12
g28
tp34
sg21
Vsocktype
p35
sg31
V0
p36
sa(dp37
g18
(g12
g28
tp38
sg21
Vproto
p39
sg31
V0
p40
sa(dp41
g18
(g12
g28
tp42
sg21
Vflags
p43
sg31
V0
p44
sastp45
sVdoc
p46
V
p47
sssVRCVALL_SOCKETLEVELONLY
p48
(dp49
g5
Vdata
p50
sg7
(dp51
g18
(g12
g28
tp52
sssVEAI_SOCKTYPE
p53
(dp54
g5
g50
sg7
(dp55
g18
(g12
g28
tp56
sssVIPPROTO_FRAGMENT
p57
(dp58
g5
g50
sg7
(dp59
g18
(g12
g28
tp60
sssVgetdefaulttimeout
p61
(dp62
g5
g6
sg7
(dp63
g9
((dp64
g11
(g12
g24
tp65
sg15
(lp66
stp67
sg46
Vgetdefaulttimeout() -> timeout\u000a\u000aReturn the default timeout for new socket objects in seconds as a float. A\u000avalue of None means that sockets have no timeout and begin in blocking mode.\u000aThe default value when the module is imported is None.
p68
sssVIPPROTO_NONE
p69
(dp70
g5
g50
sg7
(dp71
g18
(g12
g28
tp72
sssVNI_DGRAM
p73
(dp74
g5
g50
sg7
(dp75
g18
(g12
g28
tp76
sssVSOMAXCONN
p77
(dp78
g5
g50
sg7
(dp79
g18
(g12
g28
tp80
sssVMSG_PEEK
p81
(dp82
g5
g50
sg7
(dp83
g18
(g12
g28
tp84
sssVIPPROTO_DSTOPTS
p85
(dp86
g5
g50
sg7
(dp87
g18
(g12
g28
tp88
sssVSHUT_RD
p89
(dp90
g5
g50
sg7
(dp91
g18
(g12
g28
tp92
sssVINADDR_BROADCAST
p93
(dp94
g5
g50
sg7
(dp95
g18
(g12
g28
tp96
sssVerror
p97
(dp98
g5
g18
sg7
(dp99
Vmembers
p100
(dp101
V__module__
p102
(dp103
g5
g50
sg7
(dp104
g18
(g12
g19
tp105
sssV__weakref__
p106
(dp107
g5
g50
sg7
(dp108
g18
(g12
Vgetset_descriptor
p109
tp110
sssV__doc__
p111
(dp112
g5
g50
sg7
(dp113
g18
(g12
g19
tp114
ssssVmro
p115
(lp116
(Vsocket
p117
g97
tp118
a(Vexceptions
p119
VIOError
p120
tp121
a(g119
VEnvironmentError
p122
tp123
a(g119
VStandardError
p124
tp125
a(g119
VException
p126
tp127
a(g119
VBaseException
p128
tp129
a(g12
g24
tp130
asg46
V
p131
sVbases
p132
(lp133
(g119
g120
tp134
asssV__package__
p135
(dp136
g5
g50
sg7
(dp137
g18
(g12
VNoneType
p138
tp139
sssVEAI_AGAIN
p140
(dp141
g5
g50
sg7
(dp142
g18
(g12
g28
tp143
sssVAF_INET6
p144
(dp145
g5
g50
sg7
(dp146
g18
(g12
g28
tp147
sssVSHUT_RDWR
p148
(dp149
g5
g50
sg7
(dp150
g18
(g12
g28
tp151
sssVcreate_connection
p152
(dp153
g5
g6
sg7
(dp154
g9
((dp155
g11
(Vsocket
p156
Vsocket
p157
tp158
sg15
(lp159
(dp160
g18
(g12
Vtuple
p161
tp162
sg21
Vaddress
p163
sas(dp164
g11
(g156
g157
tp165
sg15
(lp166
(dp167
g18
(g12
g161
tp168
sg21
Vaddress
p169
sa(dp170
g18
(g12
g24
tp171
sg21
Vtimeout
p172
sas(dp173
g11
(g156
g157
tp174
sg15
(lp175
(dp176
g18
(g12
g161
tp177
sg21
Vaddress
p178
sa(dp179
g18
(g12
g24
tp180
sg21
Vtimeout
p181
sa(dp182
g18
(g12
g161
tp183
sg21
Vsource_address
p184
sastp185
sg46
VConnect to *address* and return the socket object.\u000a\u000aConvenience function.  Connect to *address* (a 2-tuple ``(host,\u000aport)``) and return the socket object.  Passing the optional\u000a*timeout* parameter will set the timeout on the socket instance\u000abefore attempting to connect.  If no *timeout* is supplied, the\u000aglobal default timeout setting returned by :func:`getdefaulttimeout`\u000ais used.\u000aConnect to *address* and return the socket object.\u000a\u000aConvenience function.  Connect to *address* (a 2-tuple ``(host,\u000aport)``) and return the socket object.  Passing the optional\u000a*timeout* parameter will set the timeout on the socket instance\u000abefore attempting to connect.  If no *timeout* is supplied, the\u000aglobal default timeout setting returned by :func:`getdefaulttimeout`\u000ais used.\u000acreate_connection(address: tuple, timeout: object, source_address: tuple) -> socket\u000a
p186
sssVINADDR_UNSPEC_GROUP
p187
(dp188
g5
g50
sg7
(dp189
g18
(g12
g28
tp190
sssVINADDR_ANY
p191
(dp192
g5
g50
sg7
(dp193
g18
(g12
g28
tp194
sssVtimeout
p195
(dp196
g5
g18
sg7
(dp197
g100
(dp198
g102
(dp199
g5
g50
sg7
(dp200
g18
(g12
g19
tp201
sssg106
(dp202
g5
g50
sg7
(dp203
g18
(g12
g109
tp204
sssg111
(dp205
g5
g50
sg7
(dp206
g18
(g12
g19
tp207
ssssg115
(lp208
(g117
g195
tp209
a(g117
g97
tp210
a(g119
g120
tp211
a(g119
g122
tp212
a(g119
g124
tp213
a(g119
g126
tp214
a(g119
g128
tp215
a(g12
g24
tp216
asg46
g131
sg132
(lp217
(g117
g97
tp218
asssVIPPROTO_UDP
p219
(dp220
g5
g50
sg7
(dp221
g18
(g12
g28
tp222
sssVINADDR_MAX_LOCAL_GROUP
p223
(dp224
g5
g50
sg7
(dp225
g18
(g12
g28
tp226
sssVEAI_NONAME
p227
(dp228
g5
g50
sg7
(dp229
g18
(g12
g28
tp230
sssVIPPROTO_IDP
p231
(dp232
g5
g50
sg7
(dp233
g18
(g12
g28
tp234
sssVSO_ACCEPTCONN
p235
(dp236
g5
g50
sg7
(dp237
g18
(g12
g28
tp238
sssVSOCK_STREAM
p239
(dp240
g5
g50
sg7
(dp241
g18
(g12
g28
tp242
sssVEBADF
p243
(dp244
g5
g50
sg7
(dp245
g18
(g12
g28
tp246
sssVgethostbyaddr
p247
(dp248
g5
g6
sg7
(dp249
g9
((dp250
g11
(g12
g24
tp251
sg15
(lp252
(dp253
g18
(g12
g19
tp254
sg21
Vhost
p255
sastp256
sg46
Vgethostbyaddr(host) -> (hostname, aliases, ipaddrs)\u000a\u000aReturn a tuple of (primary hostname, alias hostnames, ip addresses). host may\u000abe either a hostname or an IP address.
p257
sssVSO_TYPE
p258
(dp259
g5
g50
sg7
(dp260
g18
(g12
g28
tp261
sssVSOL_IPV6
p262
(dp263
g5
g50
sg7
(dp264
g18
(g12
g28
tp265
sssVIPPROTO_MAX
p266
(dp267
g5
g50
sg7
(dp268
g18
(g12
g28
tp269
sssVIP_ADD_MEMBERSHIP
p270
(dp271
g5
g50
sg7
(dp272
g18
(g12
g28
tp273
sssVIPPROTO_IPV6
p274
(dp275
g5
g50
sg7
(dp276
g18
(g12
g28
tp277
sssVAI_CANONNAME
p278
(dp279
g5
g50
sg7
(dp280
g18
(g12
g28
tp281
sssVinet_pton
p282
(dp283
g5
g6
sg7
(dp284
g9
((dp285
g11
(g12
g19
tp286
sg15
(lp287
(dp288
g18
(g12
g28
tp289
sg21
VaddressFamily
p290
sa(dp291
g18
(g12
g19
tp292
sg21
VipString
p293
sastp294
sg46
Vinet_pton(addr_family, ip_string) -> packed_ip\u000a\u000aConvert an IP address (in string format, e.g. '127.0.0.1' or '::1') to a 32-bit\u000apacked binary format, as 4-byte (IPv4) or 16-byte (IPv6) string. The return\u000aformat matches the format of the standard C library's in_addr or in6_addr\u000astruct.\u000a\u000aIf the address format is invalid, socket.error will be raised. Validity is\u000adetermined by the .NET System.Net.IPAddress.Parse() method.\u000a\u000ainet_pton() supports IPv4 and IPv6.
p295
sssVIPV6_MULTICAST_LOOP
p296
(dp297
g5
g50
sg7
(dp298
g18
(g12
g28
tp299
sssVIPPROTO_GGP
p300
(dp301
g5
g50
sg7
(dp302
g18
(g12
g28
tp303
sssVIPPROTO_ND
p304
(dp305
g5
g50
sg7
(dp306
g18
(g12
g28
tp307
sssVinet_ntoa
p308
(dp309
g5
g6
sg7
(dp310
g9
((dp311
g11
(g12
g19
tp312
sg15
(lp313
(dp314
g18
(g12
g19
tp315
sg21
VpackedIP
p316
sastp317
sg46
Vinet_ntoa(packed_ip) -> ip_string\u000a\u000aConvert a packed IP address (a 4-byte string) to a string IP address (in dotted\u000aquad format, e.g. '127.0.0.1'). The input format matches the format of the\u000astandard C library's in_addr struct.\u000a\u000aIf the input string is not exactly 4 bytes, socket.error will be raised.\u000a\u000ainet_ntoa() supports only IPv4.
p318
sssVSO_RCVTIMEO
p319
(dp320
g5
g50
sg7
(dp321
g18
(g12
g28
tp322
sssVgethostname
p323
(dp324
g5
g6
sg7
(dp325
g9
((dp326
g11
(g12
g19
tp327
sg15
(lp328
stp329
sg46
Vgethostname() -> hostname\u000aReturn this machine's hostname
p330
sssV__doc__
p331
(dp332
g5
g50
sg7
(dp333
g18
(g12
g19
tp334
sssVAF_INET
p335
(dp336
g5
g50
sg7
(dp337
g18
(g12
g28
tp338
sssVAF_DECnet
p339
(dp340
g5
g50
sg7
(dp341
g18
(g12
g28
tp342
sssVSOCK_RAW
p343
(dp344
g5
g50
sg7
(dp345
g18
(g12
g28
tp346
sssVntohs
p347
(dp348
g5
g6
sg7
(dp349
g9
((dp350
g11
(g12
g28
tp351
sg15
(lp352
(dp353
g18
(g12
g24
tp354
sg21
Vx
p355
sastp356
sg46
Vntohs(x) -> integer\u000a\u000aConvert a 16-bit integer from network byte order to host byte order.
p357
sssVIPPROTO_PUP
p358
(dp359
g5
g50
sg7
(dp360
g18
(g12
g28
tp361
sssVinet_ntop
p362
(dp363
g5
g6
sg7
(dp364
g9
((dp365
g11
(g12
g19
tp366
sg15
(lp367
(dp368
g18
(g12
g28
tp369
sg21
VaddressFamily
p370
sa(dp371
g18
(g12
g19
tp372
sg21
VpackedIP
p373
sastp374
sg46
Vinet_ntop(address_family, packed_ip) -> ip_string\u000a\u000aConvert a packed IP address (a 4-byte [IPv4] or 16-byte [IPv6] string) to a\u000astring IP address (e.g. '127.0.0.1' or '::1').\u000a\u000aThe input format matches the format of the standard C library's in_addr or\u000ain6_addr struct. If the input string is not exactly 4 bytes or 16 bytes,\u000asocket.error will be raised.\u000a\u000ainet_ntop() supports IPv4 and IPv6.
p375
sssVntohl
p376
(dp377
g5
g6
sg7
(dp378
g9
((dp379
g11
(g12
g24
tp380
sg15
(lp381
(dp382
g18
(g12
g24
tp383
sg21
Vx
p384
sastp385
sg46
Vntohl(x) -> integer\u000a\u000aConvert a 32-bit integer from network byte order to host byte order.
p386
sssVgethostbyname
p387
(dp388
g5
g6
sg7
(dp389
g9
((dp390
g11
(g12
g19
tp391
sg15
(lp392
(dp393
g18
(g12
g19
tp394
sg21
Vhost
p395
sastp396
sg46
Vgethostbyname(hostname) -> ip address\u000a\u000aReturn the string IPv4 address associated with the given hostname (e.g.\u000a'10.10.0.1'). The hostname is returned as-is if it an IPv4 address. The empty\u000astring is treated as the local host.\u000a\u000agethostbyname() doesn't support IPv6; for IPv4/IPv6 support, use getaddrinfo().
p397
sssVIP_MULTICAST_LOOP
p398
(dp399
g5
g50
sg7
(dp400
g18
(g12
g28
tp401
sssVgetnameinfo
p402
(dp403
g5
g6
sg7
(dp404
g9
((dp405
g11
(g12
g24
tp406
sg15
(lp407
(dp408
g18
(g12
g161
tp409
sg21
VsocketAddr
p410
sa(dp411
g18
(g12
g28
tp412
sg21
Vflags
p413
sastp414
sg46
Vgetnameinfo(socketaddr, flags) -> (host, port)\u000aGiven a socket address, the return a tuple of the corresponding hostname and\u000aport. Available flags:\u000a - NI_NOFQDN: Return only the hostname part of the domain name for hosts on the\u000a   same domain as the executing machine.\u000a - NI_NUMERICHOST: return the numeric form of the host (e.g. '127.0.0.1' or\u000a   '::1' rather than 'localhost').\u000a - NI_NAMEREQD: Raise an error if the hostname cannot be looked up.\u000a - NI_NUMERICSERV: Return string containing the numeric form of the port (e.g.\u000a   '80' rather than 'http'). This flag is required (see below).\u000a - NI_DGRAM: Silently ignored (see below).\u000a\u000aDifference from CPython: the following flag behavior differs from CPython\u000abecause the .NET framework libraries offer no name-to-port conversion APIs:\u000a - NI_NUMERICSERV: This flag is required because the .NET framework libraries\u000a   offer no port-to-name mapping APIs. If it is omitted, getnameinfo() will\u000a   raise a NotImplementedError.\u000a - The NI_DGRAM flag is ignored because it only applies when NI_NUMERICSERV is\u000a   omitted. It it were supported, it would return the UDP-based port name\u000a   rather than the TCP-based port name.\u000a
p415
sssVINADDR_LOOPBACK
p416
(dp417
g5
g50
sg7
(dp418
g18
(g12
g28
tp419
sssVSO_RCVBUF
p420
(dp421
g5
g50
sg7
(dp422
g18
(g12
g28
tp423
sssVgaierror
p424
(dp425
g5
g18
sg7
(dp426
g100
(dp427
g102
(dp428
g5
g50
sg7
(dp429
g18
(g12
g19
tp430
sssg106
(dp431
g5
g50
sg7
(dp432
g18
(g12
g109
tp433
sssg111
(dp434
g5
g50
sg7
(dp435
g18
(g12
g19
tp436
ssssg115
(lp437
(g117
g424
tp438
a(g117
g97
tp439
a(g119
g120
tp440
a(g119
g122
tp441
a(g119
g124
tp442
a(g119
g126
tp443
a(g119
g128
tp444
a(g12
g24
tp445
asg46
g131
sg132
(lp446
(g117
g97
tp447
asssVAI_PASSIVE
p448
(dp449
g5
g50
sg7
(dp450
g18
(g12
g28
tp451
sssVRCVALL_ON
p452
(dp453
g5
g50
sg7
(dp454
g18
(g12
g28
tp455
sssVIPPROTO_ROUTING
p456
(dp457
g5
g50
sg7
(dp458
g18
(g12
g28
tp459
sssVRCVALL_OFF
p460
(dp461
g5
g50
sg7
(dp462
g18
(g12
g28
tp463
sssVSOCK_DGRAM
p464
(dp465
g5
g50
sg7
(dp466
g18
(g12
g28
tp467
sssVIP_MULTICAST_IF
p468
(dp469
g5
g50
sg7
(dp470
g18
(g12
g28
tp471
sssVIPV6_JOIN_GROUP
p472
(dp473
g5
g50
sg7
(dp474
g18
(g12
g28
tp475
sssV_delegate_methods
p476
(dp477
g5
g50
sg7
(dp478
g18
(g12
g161
tp479
sssVIPPROTO_ICMP
p480
(dp481
g5
g50
sg7
(dp482
g18
(g12
g28
tp483
sssVSO_REUSEADDR
p484
(dp485
g5
g50
sg7
(dp486
g18
(g12
g28
tp487
sssVIP_TOS
p488
(dp489
g5
g50
sg7
(dp490
g18
(g12
g28
tp491
sssVSO_SNDBUF
p492
(dp493
g5
g50
sg7
(dp494
g18
(g12
g28
tp495
sssVgethostbyname_ex
p496
(dp497
g5
g6
sg7
(dp498
g9
((dp499
g11
(g12
g161
tp500
sg15
(lp501
(dp502
g18
(g12
g19
tp503
sg21
Vhost
p504
sastp505
sg46
Vgethostbyname_ex(hostname) -> (hostname, aliases, ip_addresses)\u000a\u000aReturn the real host name, a list of aliases, and a list of IP addresses\u000aassociated with the given hostname. If the hostname is an IPv4 address, the\u000atuple ([hostname, [], [hostname]) is returned without doing a DNS lookup.\u000a\u000agethostbyname_ex() doesn't support IPv6; for IPv4/IPv6 support, use\u000agetaddrinfo().
p506
sssVINADDR_NONE
p507
(dp508
g5
g50
sg7
(dp509
g18
(g12
g28
tp510
sssVSO_KEEPALIVE
p511
(dp512
g5
g50
sg7
(dp513
g18
(g12
g28
tp514
sssVNI_NUMERICSERV
p515
(dp516
g5
g50
sg7
(dp517
g18
(g12
g28
tp518
sssVAF_IPX
p519
(dp520
g5
g50
sg7
(dp521
g18
(g12
g28
tp522
sssVSOL_UDP
p523
(dp524
g5
g50
sg7
(dp525
g18
(g12
g28
tp526
sssV_fileobject
p527
(dp528
g5
g18
sg7
(dp529
g100
(dp530
V__del__
p531
(dp532
g5
Vmethod
p533
sg7
(dp534
g9
((dp535
g11
(g12
g138
tp536
sg15
(lp537
(dp538
g18
(g156
g527
tp539
sg21
Vself
p540
sastp541
sg46
V__del__(self: _fileobject)
p542
sssg111
(dp543
g5
g50
sg7
(dp544
g18
(g12
VDocumentationDescriptor
p545
tp546
sssVnext
p547
(dp548
g5
g533
sg7
(dp549
g9
((dp550
g11
(g12
g24
tp551
sg15
(lp552
(dp553
g18
(g12
g24
tp554
sg21
Vself
p555
sastp556
sg46
Vnext(self: object) -> object\u000a
p557
sssV__module__
p558
(dp559
g5
g50
sg7
(dp560
g18
(g12
g19
tp561
sssV__enter__
p562
(dp563
g5
g533
sg7
(dp564
g9
(tsg46
V__enter__(self: IDisposable) -> object\u000a
p565
sssV__init__
p566
(dp567
g5
g533
sg7
(dp568
g9
((dp569
g11
(g12
g138
tp570
sg15
(lp571
(dp572
g18
(g156
g527
tp573
sg21
g540
sa(dp574
Varg_format
p575
V**
p576
sg18
(g12
Vdict
p577
tp578
sg21
Vkwargs
p579
sa(dp580
g575
V*
p581
sg18
(g12
g161
tp582
sg21
Vargs
p583
sas(dp584
g11
(g12
g138
tp585
sg15
(lp586
(dp587
g18
(g156
g527
tp588
sg21
g540
sa(dp589
g575
g581
sg18
(g12
g161
tp590
sg21
Vargs
p591
sastp592
sg46
Vx.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature
p593
sssV__exit__
p594
(dp595
g5
g533
sg7
(dp596
g9
(tsg46
V__exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object)
p597
sssVname
p598
(dp599
g5
g50
sg7
(dp600
g18
(g12
g19
tp601
sssV__new__
p602
(dp603
g5
g6
sg7
(dp604
g9
((dp605
g11
(g156
g527
tp606
sg15
(lp607
(dp608
g18
(g12
g24
tp609
sg21
Vsocket
p610
sa(dp611
g18
(g12
g19
tp612
sg21
Vmode
p613
sg31
V'rb'
p614
sa(dp615
g18
(g12
g28
tp616
sg21
Vbufsize
p617
sg31
V-1
p618
sa(dp619
g18
(g12
Vbool
p620
tp621
sg21
Vclose
p622
sg31
VFalse
p623
sastp624
sg46
V__new__(cls: type, socket: object, mode: str, bufsize: int, close: bool)\u000a
p625
sssVbufsize
p626
(dp627
g5
g50
sg7
(dp628
g18
(g12
Vfield#
p629
tp630
sssVdefault_bufsize
p631
(dp632
g5
g50
sg7
(dp633
g18
(g12
Vmember_descriptor
p634
tp635
sssVDispose
p636
(dp637
g5
g533
sg7
(dp638
g9
((dp639
g11
(g12
g138
tp640
sg15
(lp641
(dp642
g18
(g156
g527
tp643
sg21
g540
sa(dp644
g18
(g12
g620
tp645
sg21
Vdisposing
p646
sastp647
sg46
VDispose(self: _fileobject, disposing: bool)
p648
ssssg115
(lp649
(g156
g527
tp650
a(g12
Vfile
p651
tp652
a(g12
g24
tp653
asg46
V_fileobject(socket: object, mode: str, bufsize: int, close: bool)\u000a
p654
sg132
(lp655
(g12
g651
tp656
asssVNI_NUMERICHOST
p657
(dp658
g5
g50
sg7
(dp659
g18
(g12
g28
tp660
sssVAF_UNSPEC
p661
(dp662
g5
g50
sg7
(dp663
g18
(g12
g28
tp664
sssVINADDR_ALLHOSTS_GROUP
p665
(dp666
g5
g50
sg7
(dp667
g18
(g12
g28
tp668
sssVSOCK_RDM
p669
(dp670
g5
g50
sg7
(dp671
g18
(g12
g28
tp672
sssVEAI_SERVICE
p673
(dp674
g5
g50
sg7
(dp675
g18
(g12
g28
tp676
sssVAF_SNA
p677
(dp678
g5
g50
sg7
(dp679
g18
(g12
g28
tp680
sssVAF_APPLETALK
p681
(dp682
g5
g50
sg7
(dp683
g18
(g12
g28
tp684
sssVIPV6_HOPLIMIT
p685
(dp686
g5
g50
sg7
(dp687
g18
(g12
g28
tp688
sssVSO_RCVLOWAT
p689
(dp690
g5
g50
sg7
(dp691
g18
(g12
g28
tp692
sssVIP_OPTIONS
p693
(dp694
g5
g50
sg7
(dp695
g18
(g12
g28
tp696
sssVNI_MAXHOST
p697
(dp698
g5
g50
sg7
(dp699
g18
(g12
g28
tp700
sssVinet_aton
p701
(dp702
g5
g6
sg7
(dp703
g9
((dp704
g11
(g12
g19
tp705
sg15
(lp706
(dp707
g18
(g12
g19
tp708
sg21
VipString
p709
sastp710
sg46
Vinet_aton(ip_string) -> packed_ip\u000aConvert an IP address (in string dotted quad format, e.g. '127.0.0.1') to a\u000a32-bit packed binary format, as four-character string. The return format\u000amatches the format of the standard C library's in_addr struct.\u000a\u000aIf the address format is invalid, socket.error will be raised. Validity is\u000adetermined by the .NET System.Net.IPAddress.Parse() method.\u000a\u000ainet_aton() supports only IPv4.
p711
sssVAF_IRDA
p712
(dp713
g5
g50
sg7
(dp714
g18
(g12
g28
tp715
sssVIPPORT_USERRESERVED
p716
(dp717
g5
g50
sg7
(dp718
g18
(g12
g28
tp719
sssVIPV6_MULTICAST_IF
p720
(dp721
g5
g50
sg7
(dp722
g18
(g12
g28
tp723
sssVSO_USELOOPBACK
p724
(dp725
g5
g50
sg7
(dp726
g18
(g12
g28
tp727
sssg157
(dp728
g5
g18
sg7
(dp729
g100
(dp730
Vsetblocking
p731
(dp732
g5
g533
sg7
(dp733
g9
((dp734
g11
(g12
g138
tp735
sg15
(lp736
(dp737
g18
(g156
g157
tp738
sg21
g540
sa(dp739
g18
(g12
g28
tp740
sg21
VshouldBlock
p741
sastp742
sg46
Vsetblocking(flag) -> None\u000a\u000aSet the blocking mode of the socket. If flag is 0, the socket will be set to\u000anon-blocking mode; otherwise, it will be set to blocking mode. If the socket is\u000ain blocking mode, and a method is called (such as send() or recv() which does\u000anot complete immediately, the caller will block execution until the requested\u000aoperation completes. In non-blocking mode, a socket.timeout exception would\u000awould be raised in this case.\u000a\u000aNote that changing blocking mode also affects the timeout setting:\u000asetblocking(0) is equivalent to settimeout(0), and setblocking(1) is equivalent\u000ato settimeout(None).
p743
sssVgettimeout
p744
(dp745
g5
g533
sg7
(dp746
g9
((dp747
g11
(g12
g24
tp748
sg15
(lp749
(dp750
g18
(g156
g157
tp751
sg21
g540
sastp752
sg46
Vgettimeout() -> value\u000a\u000aReturn the timeout duration in seconds for this socket as a float. If no\u000atimeout is set, return None. For more details on timeouts and blocking, see the\u000aPython socket module documentation.
p753
sssVshutdown
p754
(dp755
g5
g533
sg7
(dp756
g9
((dp757
g11
(g12
g138
tp758
sg15
(lp759
(dp760
g18
(g156
g157
tp761
sg21
g540
sa(dp762
g18
(g12
g28
tp763
sg21
Vhow
p764
sastp765
sg46
Vshutdown() -> None\u000a\u000aReturn the timeout duration in seconds for this socket as a float. If no\u000atimeout is set, return None. For more details on timeouts and blocking, see the\u000aPython socket module documentation.
p766
sssVclose
p767
(dp768
g5
g533
sg7
(dp769
g9
((dp770
g11
(g12
g138
tp771
sg15
(lp772
(dp773
g18
(g156
g157
tp774
sg21
g540
sastp775
sg46
Vclose() -> None\u000a\u000aClose the socket. It cannot be used after being closed.
p776
sssV__init__
p777
(dp778
g5
g533
sg7
(dp779
g9
((dp780
g11
(g12
g138
tp781
sg15
(lp782
(dp783
g18
(g156
g157
tp784
sg21
g540
sa(dp785
g18
(g12
g28
tp786
sg21
VaddressFamily
p787
sg31
V2
p788
sa(dp789
g18
(g12
g28
tp790
sg21
VsocketType
p791
sg31
V1
p792
sa(dp793
g18
(g12
g28
tp794
sg21
VprotocolType
p795
sg31
V0
p796
sa(dp797
g18
(g156
g157
tp798
sg21
V_sock
p799
sg31
VNone
p800
sastp801
sg46
Vx.__init__(...) initializes x; see x.__class__.__doc__ for signature
p802
sssVbind
p803
(dp804
g5
g533
sg7
(dp805
g9
((dp806
g11
(g12
g138
tp807
sg15
(lp808
(dp809
g18
(g156
g157
tp810
sg21
g540
sa(dp811
g18
(g12
g161
tp812
sg21
Vaddress
p813
sastp814
sg46
Vbind(address) -> None\u000a\u000aBind to an address. If the socket is already bound, socket.error is raised.\u000aFor IP sockets, address is a (host, port) tuple. Raw sockets are not\u000asupported.\u000a\u000aIf you do not care which local address is assigned, set host to INADDR_ANY and\u000athe system will assign the most appropriate network address. Similarly, if you\u000aset port to 0, the system will assign an available port number between 1024\u000aand 5000.
p815
sssVgetsockname
p816
(dp817
g5
g533
sg7
(dp818
g9
((dp819
g11
(g12
g161
tp820
sg15
(lp821
(dp822
g18
(g156
g157
tp823
sg21
g540
sastp824
sg46
Vgetsockname() -> address\u000a\u000aReturn the address of the local end of this socket. The address format is\u000afamily-dependent (e.g. a (host, port) tuple for IPv4).
p825
sssVconnect
p826
(dp827
g5
g533
sg7
(dp828
g9
((dp829
g11
(g12
g138
tp830
sg15
(lp831
(dp832
g18
(g156
g157
tp833
sg21
g540
sa(dp834
g18
(g12
g161
tp835
sg21
Vaddress
p836
sastp837
sg46
Vconnect(address) -> None\u000a\u000aConnect to a remote socket at the given address. IP addresses are expressed\u000aas (host, port).\u000a\u000aRaises socket.error if the socket has been closed, the socket is listening, or\u000aanother connection error occurred.\u000aDifference from CPython: connect() does not support timeouts in blocking mode.\u000aIf a timeout is set and the socket is in blocking mode, connect() will block\u000aindefinitely until a connection is made or an error occurs.
p838
sssV__str__
p839
(dp840
g5
g533
sg7
(dp841
g9
((dp842
g11
(g12
g19
tp843
sg15
(lp844
(dp845
g18
(g12
g24
tp846
sg21
Vself
p847
sastp848
sg46
Vx.__str__() <==> str(x)
p849
sssVrecvfrom
p850
(dp851
g5
g533
sg7
(dp852
g9
((dp853
g11
(g12
g161
tp854
sg15
(lp855
(dp856
g18
(g156
g157
tp857
sg21
g540
sa(dp858
g18
(g12
g28
tp859
sg21
VmaxBytes
p860
sa(dp861
g18
(g12
g28
tp862
sg21
Vflags
p863
sg31
V0
p864
sastp865
sg46
Vrecvfrom(bufsize[, flags]) -> (string, address)\u000a\u000aReceive data from the socket, up to bufsize bytes. string is the data\u000areceived, and address (whose format is protocol-dependent) is the address of\u000athe socket from which the data was received.
p866
sssVsendall
p867
(dp868
g5
g533
sg7
(dp869
g9
((dp870
g11
(g12
g138
tp871
sg15
(lp872
(dp873
g18
(g156
g157
tp874
sg21
g540
sa(dp875
g18
(g12
Vbuffer
p876
tp877
sg21
Vdata
p878
sa(dp879
g18
(g12
g28
tp880
sg21
Vflags
p881
sg31
V0
p882
sas(dp883
g11
(g12
g138
tp884
sg15
(lp885
(dp886
g18
(g156
g157
tp887
sg21
g540
sa(dp888
g18
(g12
g19
tp889
sg21
Vdata
p890
sa(dp891
g18
(g12
g28
tp892
sg21
Vflags
p893
sg31
V0
p894
sastp895
sg46
Vsendall(string[, flags]) -> None\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept().\u000a\u000aUnlike send(), sendall() blocks until all of the data has been sent or until a\u000atimeout or an error occurs. None is returned on success. If an error occurs,\u000athere is no way to tell how much data, if any, was sent.\u000a\u000aDifference from CPython: timeouts do not function as you would expect. The\u000afunction is implemented using multiple calls to send(), so the timeout timer\u000ais reset after each of those calls. That means that the upper bound on the\u000atime that it will take for sendall() to return is the number of bytes in\u000astring times the timeout interval.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network sendsendall(string[, flags]) -> None\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept().\u000a\u000aUnlike send(), sendall() blocks until all of the data has been sent or until a\u000atimeout or an error occurs. None is returned on success. If an error occurs,\u000athere is no way to tell how much data, if any, was sent.\u000a\u000aDifference from CPython: timeouts do not function as you would expect. The\u000afunction is implemented using multiple calls to send(), so the timeout timer\u000ais reset after each of those calls. That means that the upper bound on the\u000atime that it will take for sendall() to return is the number of bytes in\u000astring times the timeout interval.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p896
sssVlisten
p897
(dp898
g5
g533
sg7
(dp899
g9
((dp900
g11
(g12
g138
tp901
sg15
(lp902
(dp903
g18
(g156
g157
tp904
sg21
g540
sa(dp905
g18
(g12
g28
tp906
sg21
Vbacklog
p907
sastp908
sg46
Vlisten(backlog) -> None\u000a\u000aListen for connections on the socket. Backlog is the maximum length of the\u000apending connections queue. The maximum value is system-dependent.
p909
sssVconnect_ex
p910
(dp911
g5
g533
sg7
(dp912
g9
((dp913
g11
(g12
g28
tp914
sg15
(lp915
(dp916
g18
(g156
g157
tp917
sg21
g540
sa(dp918
g18
(g12
g161
tp919
sg21
Vaddress
p920
sastp921
sg46
Vconnect_ex(address) -> error_code\u000a\u000aLike connect(), but return an error code insted of raising an exception for\u000asocket exceptions raised by the underlying system Connect() call. Note that\u000aexceptions other than SocketException generated by the system Connect() call\u000awill still be raised.\u000a\u000aA return value of 0 indicates that the connect call was successful.\u000aDifference from CPython: connect_ex() does not support timeouts in blocking\u000amode. If a timeout is set and the socket is in blocking mode, connect_ex() will\u000ablock indefinitely until a connection is made or an error occurs.
p922
sssVsetsockopt
p923
(dp924
g5
g533
sg7
(dp925
g9
((dp926
g11
(g12
g138
tp927
sg15
(lp928
(dp929
g18
(g156
g157
tp930
sg21
g540
sa(dp931
g18
(g12
g28
tp932
sg21
VoptionLevel
p933
sa(dp934
g18
(g12
g28
tp935
sg21
VoptionName
p936
sa(dp937
g18
(g12
g24
tp938
sg21
Vvalue
p939
sastp940
sg46
Vsetsockopt(level, optname[, value]) -> None\u000a\u000aSet the value of a socket option. level is one of the SOL_* constants defined\u000ain this module, and optname is one of the SO_* constants. value may be either\u000aan integer or a string containing a binary structure. The caller is responsible\u000afor properly encoding the byte string.
p941
sssVrecv
p942
(dp943
g5
g533
sg7
(dp944
g9
((dp945
g11
(g12
g19
tp946
sg15
(lp947
(dp948
g18
(g156
g157
tp949
sg21
g540
sa(dp950
g18
(g12
g28
tp951
sg21
VmaxBytes
p952
sa(dp953
g18
(g12
g28
tp954
sg21
Vflags
p955
sg31
V0
p956
sastp957
sg46
Vrecv(bufsize[, flags]) -> string\u000a\u000aReceive data from the socket, up to bufsize bytes. For connection-oriented\u000aprotocols (e.g. SOCK_STREAM), you must first call either connect() or\u000aaccept(). Connectionless protocols (e.g. SOCK_DGRAM) may also use recvfrom().\u000a\u000arecv() blocks until data is available, unless a timeout was set using\u000asettimeout(). If the timeout was exceeded, socket.timeout is raised.recv() returns immediately with zero bytes when the connection is closed.
p958
sssVproto
p959
(dp960
g5
Vproperty
p961
sg7
(dp962
g46
VGet: proto(self: socket) -> int\u000a\u000a
p963
sg18
(g12
g28
tp964
sssVtype
p965
(dp966
g5
g961
sg7
(dp967
g46
VGet: type(self: socket) -> int\u000a\u000a
p968
sg18
(g12
g28
tp969
sssVfileno
p970
(dp971
g5
g533
sg7
(dp972
g9
(tsg46
Vfileno() -> file_handle\u000a\u000aReturn the underlying system handle for this socket (a 64-bit integer).
p973
sssVrecv_into
p974
(dp975
g5
g533
sg7
(dp976
g9
((dp977
g11
(g12
g28
tp978
sg15
(lp979
(dp980
g18
(g156
g157
tp981
sg21
g540
sa(dp982
g18
(Varray
p983
Varray
p984
tp985
sg21
Vbuffer
p986
sa(dp987
g18
(g12
g28
tp988
sg21
Vnbytes
p989
sg31
V0
p990
sa(dp991
g18
(g12
g28
tp992
sg21
Vflags
p993
sg31
V0
p994
sas(dp995
g11
(g12
g28
tp996
sg15
(lp997
(dp998
g18
(g156
g157
tp999
sg21
g540
sa(dp1000
g18
(g12
Vbytearray
p1001
tp1002
sg21
Vbuffer
p1003
sa(dp1004
g18
(g12
g28
tp1005
sg21
Vnbytes
p1006
sg31
V0
p1007
sa(dp1008
g18
(g12
g28
tp1009
sg21
Vflags
p1010
sg31
V0
p1011
sas(dp1012
g11
(g12
g28
tp1013
sg15
(lp1014
(dp1015
g18
(g156
g157
tp1016
sg21
g540
sa(dp1017
g18
(g12
g876
tp1018
sg21
Vbuffer
p1019
sa(dp1020
g18
(g12
g28
tp1021
sg21
Vnbytes
p1022
sg31
V0
p1023
sa(dp1024
g18
(g12
g28
tp1025
sg21
Vflags
p1026
sg31
V0
p1027
sas(dp1028
g11
(g12
g28
tp1029
sg15
(lp1030
(dp1031
g18
(g156
g157
tp1032
sg21
g540
sa(dp1033
g18
(g12
g19
tp1034
sg21
Vbuffer
p1035
sa(dp1036
g18
(g12
g28
tp1037
sg21
Vnbytes
p1038
sg31
V0
p1039
sa(dp1040
g18
(g12
g28
tp1041
sg21
Vflags
p1042
sg31
V0
p1043
sastp1044
sg46
Vrecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(bytearray, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a bytearray rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000a
p1045
sssVgetpeername
p1046
(dp1047
g5
g533
sg7
(dp1048
g9
((dp1049
g11
(g12
g161
tp1050
sg15
(lp1051
(dp1052
g18
(g156
g157
tp1053
sg21
g540
sastp1054
sg46
Vgetpeername() -> address\u000a\u000aReturn the address of the remote end of this socket. The address format is\u000afamily-dependent (e.g. a (host, port) tuple for IPv4).
p1055
sssVsendto
p1056
(dp1057
g5
g533
sg7
(dp1058
g9
((dp1059
g11
(g12
g28
tp1060
sg15
(lp1061
(dp1062
g18
(g156
g157
tp1063
sg21
g540
sa(dp1064
g18
(g12
g19
tp1065
sg21
Vdata
p1066
sa(dp1067
g18
(g12
g161
tp1068
sg21
Vaddress
p1069
sas(dp1070
g11
(g12
g28
tp1071
sg15
(lp1072
(dp1073
g18
(g156
g157
tp1074
sg21
g540
sa(dp1075
g18
(g12
g19
tp1076
sg21
Vdata
p1077
sa(dp1078
g18
(g12
g28
tp1079
sg21
Vflags
p1080
sa(dp1081
g18
(g12
g161
tp1082
sg21
Vaddress
p1083
sastp1084
sg46
Vsendto(string[, flags], address) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket does not need to be connected to a\u000aremote socket since the address is specified in the call to sendto(). Returns\u000athe number of bytes sent to the remote socket.\u000a\u000aBlocking sockets will block until the all of the bytes in the buffer are sent.\u000aSince a nonblocking Socket completes immediately, it might not send all of the\u000abytes in the buffer. It is your application's responsibility to keep track of\u000athe number of bytes sent and to retry the operation until the application sends\u000aall of the bytes in the buffer.\u000a\u000aNote that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p1085
sssVfamily
p1086
(dp1087
g5
g961
sg7
(dp1088
g46
VGet: family(self: socket) -> int\u000a\u000a
p1089
sg18
(g12
g28
tp1090
sssVaccept
p1091
(dp1092
g5
g533
sg7
(dp1093
g9
((dp1094
g11
(g12
g161
tp1095
sg15
(lp1096
(dp1097
g18
(g156
g157
tp1098
sg21
g540
sastp1099
sg46
Vaccept() -> (conn, address)\u000a\u000aAccept a connection. The socket must be bound and listening before calling\u000aaccept(). conn is a new socket object connected to the remote host, and\u000aaddress is the remote host's address (e.g. a (host, port) tuple for IPv4).\u000a\u000a
p1100
sssVmakefile
p1101
(dp1102
g5
g533
sg7
(dp1103
g9
((dp1104
g11
(g12
g651
tp1105
sg15
(lp1106
(dp1107
g18
(g156
g157
tp1108
sg21
g540
sa(dp1109
g18
(g12
g19
tp1110
sg21
Vmode
p1111
sg31
V'r'
p1112
sa(dp1113
g18
(g12
g28
tp1114
sg21
VbufSize
p1115
sg31
V8192
p1116
sastp1117
sg46
Vmakefile([mode[, bufsize]]) -> file object\u000a\u000aReturn a regular file object corresponding to the socket.  The mode\u000aand bufsize arguments are as for the built-in open() function.
p1118
sssVgetsockopt
p1119
(dp1120
g5
g533
sg7
(dp1121
g9
((dp1122
g11
(g12
g24
tp1123
sg15
(lp1124
(dp1125
g18
(g156
g157
tp1126
sg21
g540
sa(dp1127
g18
(g12
g28
tp1128
sg21
VoptionLevel
p1129
sa(dp1130
g18
(g12
g28
tp1131
sg21
VoptionName
p1132
sa(dp1133
g18
(g12
g28
tp1134
sg21
VoptionLength
p1135
sg31
V0
p1136
sastp1137
sg46
Vgetsockopt(level, optname[, buflen]) -> value\u000a\u000aReturn the value of a socket option. level is one of the SOL_* constants\u000adefined in this module, and optname is one of the SO_* constants. If buflen is\u000aomitted or zero, an integer value is returned. If it is present, a byte string\u000awhose maximum length is buflen bytes) is returned. The caller must the decode\u000athe resulting byte string.
p1138
sssVsend
p1139
(dp1140
g5
g533
sg7
(dp1141
g9
((dp1142
g11
(g12
g28
tp1143
sg15
(lp1144
(dp1145
g18
(g156
g157
tp1146
sg21
g540
sa(dp1147
g18
(g12
g876
tp1148
sg21
Vdata
p1149
sa(dp1150
g18
(g12
g28
tp1151
sg21
Vflags
p1152
sg31
V0
p1153
sas(dp1154
g11
(g12
g28
tp1155
sg15
(lp1156
(dp1157
g18
(g156
g157
tp1158
sg21
g540
sa(dp1159
g18
(g12
g19
tp1160
sg21
Vdata
p1161
sa(dp1162
g18
(g12
g28
tp1163
sg21
Vflags
p1164
sg31
V0
p1165
sastp1166
sg46
Vsend(string[, flags]) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept(). Returns the number of bytes\u000asent to the remote socket.\u000a\u000aNote that the successful completion of a send() call does not mean that all of\u000athe data was sent. The caller must keep track of the number of bytes sent and\u000aretry the operation until all of the data has been sent.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network sendsend(string[, flags]) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept(). Returns the number of bytes\u000asent to the remote socket.\u000a\u000aNote that the successful completion of a send() call does not mean that all of\u000athe data was sent. The caller must keep track of the number of bytes sent and\u000aretry the operation until all of the data has been sent.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p1167
sssV__module__
p1168
(dp1169
g5
g50
sg7
(dp1170
g18
(g12
g19
tp1171
sssV_sock
p1172
(dp1173
g5
g961
sg7
(dp1174
g46
VGet: _sock(self: socket) -> socket\u000a\u000a
p1175
sg18
(g156
g157
tp1176
sssVsettimeout
p1177
(dp1178
g5
g533
sg7
(dp1179
g9
((dp1180
g11
(g12
g138
tp1181
sg15
(lp1182
(dp1183
g18
(g156
g157
tp1184
sg21
g540
sa(dp1185
g18
(g12
g24
tp1186
sg21
Vtimeout
p1187
sastp1188
sg46
Vsettimeout(value) -> None\u000a\u000aSet a timeout on blocking socket methods. value may be either None or a\u000anon-negative float, with one of the following meanings:\u000a - None: disable timeouts and block indefinitely - 0.0: don't block at all (return immediately if the operation can be\u000a   completed; raise socket.error otherwise)\u000a - float > 0.0: block for up to the specified number of seconds; raise\u000a   socket.timeout if the operation cannot be completed in time\u000a\u000asettimeout(None) is equivalent to setblocking(1), and settimeout(0.0) is\u000aequivalent to setblocking(0).\u000aIf the timeout is non-zero and is less than 0.5, it will be set to 0.5. This\u000alimitation is specific to IronPython.\u000a
p1189
sssVioctl
p1190
(dp1191
g5
g533
sg7
(dp1192
g9
((dp1193
g11
(g12
g28
tp1194
sg15
(lp1195
(dp1196
g18
(g156
g157
tp1197
sg21
g540
sa(dp1198
g18
(g12
Vlong
p1199
tp1200
sg21
Vcmd
p1201
sa(dp1202
g18
(g12
g28
tp1203
sg21
Voption
p1204
sastp1205
sg46
Vioctl(self: socket, cmd: long, option: int) -> int\u000a
p1206
sssg111
(dp1207
g5
g50
sg7
(dp1208
g18
(g12
g545
tp1209
sssVrecvfrom_into
p1210
(dp1211
g5
g533
sg7
(dp1212
g9
((dp1213
g11
(g12
g161
tp1214
sg15
(lp1215
(dp1216
g18
(g156
g157
tp1217
sg21
g540
sa(dp1218
g18
(g983
g984
tp1219
sg21
Vbuffer
p1220
sa(dp1221
g18
(g12
g28
tp1222
sg21
Vnbytes
p1223
sg31
V0
p1224
sa(dp1225
g18
(g12
g28
tp1226
sg21
Vflags
p1227
sg31
V0
p1228
sas(dp1229
g11
(g12
g161
tp1230
sg15
(lp1231
(dp1232
g18
(g156
g157
tp1233
sg21
g540
sa(dp1234
g18
(g12
g876
tp1235
sg21
Vbuffer
p1236
sa(dp1237
g18
(g12
g28
tp1238
sg21
Vnbytes
p1239
sg31
V0
p1240
sa(dp1241
g18
(g12
g28
tp1242
sg21
Vflags
p1243
sg31
V0
p1244
sas(dp1245
g11
(g12
g161
tp1246
sg15
(lp1247
(dp1248
g18
(g156
g157
tp1249
sg21
g540
sa(dp1250
g18
(g12
g19
tp1251
sg21
Vbuffer
p1252
sa(dp1253
g18
(g12
g28
tp1254
sg21
Vnbytes
p1255
sg31
V0
p1256
sa(dp1257
g18
(g12
g28
tp1258
sg21
Vflags
p1259
sg31
V0
p1260
sastp1261
sg46
Vrecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000a
p1262
ssssg115
(lp1263
(g156
g157
tp1264
a(g12
g24
tp1265
asg46
Vsocket([family[, type[, proto]]]) -> socket object\u000a\u000aCreate a socket (a network connection endpoint) of the given family, type,\u000aand protocol. socket() accepts keyword arguments.\u000a - family (address family) defaults to AF_INET\u000a - type (socket type) defaults to SOCK_STREAM\u000a - proto (protocol type) defaults to 0, which specifies the default protocol\u000a\u000aThis module supports only IP sockets. It does not support raw or Unix sockets.\u000aBoth IPv4 and IPv6 are supported.
p1266
sg132
(lp1267
(g12
g24
tp1268
asssVIPPROTO_IP
p1269
(dp1270
g5
g50
sg7
(dp1271
g18
(g12
g28
tp1272
sssVIPPROTO_ESP
p1273
(dp1274
g5
g50
sg7
(dp1275
g18
(g12
g28
tp1276
sssVIPV6_LEAVE_GROUP
p1277
(dp1278
g5
g50
sg7
(dp1279
g18
(g12
g28
tp1280
sssVIP_MULTICAST_TTL
p1281
(dp1282
g5
g50
sg7
(dp1283
g18
(g12
g28
tp1284
sssVSOL_SOCKET
p1285
(dp1286
g5
g50
sg7
(dp1287
g18
(g12
g28
tp1288
sssVSOCK_SEQPACKET
p1289
(dp1290
g5
g50
sg7
(dp1291
g18
(g12
g28
tp1292
sssVIP_TTL
p1293
(dp1294
g5
g50
sg7
(dp1295
g18
(g12
g28
tp1296
sssVSO_BROADCAST
p1297
(dp1298
g5
g50
sg7
(dp1299
g18
(g12
g28
tp1300
sssVMSG_DONTROUTE
p1301
(dp1302
g5
g50
sg7
(dp1303
g18
(g12
g28
tp1304
sssVgetprotobyname
p1305
(dp1306
g5
g6
sg7
(dp1307
g9
((dp1308
g11
(g12
g24
tp1309
sg15
(lp1310
(dp1311
g18
(g12
g19
tp1312
sg21
VprotocolName
p1313
sastp1314
sg46
Vgetprotobyname(protoname) -> integer proto\u000a\u000aGiven a string protocol name (e.g. "udp"), return the associated integer\u000aprotocol number, suitable for passing to socket(). The name is case\u000ainsensitive.\u000a\u000aRaises socket.error if no protocol number can be found.
p1315
sssVherror
p1316
(dp1317
g5
g18
sg7
(dp1318
g100
(dp1319
g102
(dp1320
g5
g50
sg7
(dp1321
g18
(g12
g19
tp1322
sssg106
(dp1323
g5
g50
sg7
(dp1324
g18
(g12
g109
tp1325
sssg111
(dp1326
g5
g50
sg7
(dp1327
g18
(g12
g19
tp1328
ssssg115
(lp1329
(g117
g1316
tp1330
a(g117
g97
tp1331
a(g119
g120
tp1332
a(g119
g122
tp1333
a(g119
g124
tp1334
a(g119
g126
tp1335
a(g119
g128
tp1336
a(g12
g24
tp1337
asg46
g131
sg132
(lp1338
(g117
g97
tp1339
asssV__name__
p1340
(dp1341
g5
g50
sg7
(dp1342
g18
(g12
g19
tp1343
sssVsetdefaulttimeout
p1344
(dp1345
g5
g6
sg7
(dp1346
g9
((dp1347
g11
(g12
g138
tp1348
sg15
(lp1349
(dp1350
g18
(g12
g24
tp1351
sg21
Vtimeout
p1352
sastp1353
sg46
Vsetdefaulttimeout(timeout) -> None\u000a\u000aSet the default timeout for new socket objects. timeout must be either None,\u000ameaning that sockets have no timeout and start in blocking mode, or a\u000anon-negative float that specifies the default timeout in seconds.
p1354
sssVSO_LINGER
p1355
(dp1356
g5
g50
sg7
(dp1357
g18
(g12
g28
tp1358
sssV_GLOBAL_DEFAULT_TIMEOUT
p1359
(dp1360
g5
g50
sg7
(dp1361
g18
(g12
g24
tp1362
sssVEAI_BADFLAGS
p1363
(dp1364
g5
g50
sg7
(dp1365
g18
(g12
g28
tp1366
sssVIPV6_MULTICAST_HOPS
p1367
(dp1368
g5
g50
sg7
(dp1369
g18
(g12
g28
tp1370
sssVEAI_MEMORY
p1371
(dp1372
g5
g50
sg7
(dp1373
g18
(g12
g28
tp1374
sssVEAI_SYSTEM
p1375
(dp1376
g5
g50
sg7
(dp1377
g18
(g12
g28
tp1378
sssVMSG_OOB
p1379
(dp1380
g5
g50
sg7
(dp1381
g18
(g12
g28
tp1382
sssVNI_NOFQDN
p1383
(dp1384
g5
g50
sg7
(dp1385
g18
(g12
g28
tp1386
sssVgetservbyport
p1387
(dp1388
g5
g6
sg7
(dp1389
g9
((dp1390
g11
(g12
g19
tp1391
sg15
(lp1392
(dp1393
g18
(g12
g28
tp1394
sg21
Vport
p1395
sa(dp1396
g18
(g12
g19
tp1397
sg21
VprotocolName
p1398
sg31
g800
sastp1399
sg46
Vgetservbyport(port[, protocol_name]) -> service_name\u000a\u000aNot implemented.
p1400
sssVgetservbyname
p1401
(dp1402
g5
g6
sg7
(dp1403
g9
((dp1404
g11
(g12
g28
tp1405
sg15
(lp1406
(dp1407
g18
(g12
g19
tp1408
sg21
VserviceName
p1409
sa(dp1410
g18
(g12
g19
tp1411
sg21
VprotocolName
p1412
sg31
g800
sastp1413
sg46
Vgetservbyname(service_name[, protocol_name]) -> port\u000a\u000aNot implemented.
p1414
sssVSO_SNDTIMEO
p1415
(dp1416
g5
g50
sg7
(dp1417
g18
(g12
g28
tp1418
sssVSO_DONTROUTE
p1419
(dp1420
g5
g50
sg7
(dp1421
g18
(g12
g28
tp1422
sssVIPPROTO_IPV4
p1423
(dp1424
g5
g50
sg7
(dp1425
g18
(g12
g28
tp1426
sssVRCVALL_MAX
p1427
(dp1428
g5
g50
sg7
(dp1429
g18
(g12
g28
tp1430
sssVhas_ipv6
p1431
(dp1432
g5
g50
sg7
(dp1433
g18
(g12
g28
tp1434
sssVIPPROTO_RAW
p1435
(dp1436
g5
g50
sg7
(dp1437
g18
(g12
g28
tp1438
sssVSOL_IP
p1439
(dp1440
g5
g50
sg7
(dp1441
g18
(g12
g28
tp1442
sssVTCP_NODELAY
p1443
(dp1444
g5
g50
sg7
(dp1445
g18
(g12
g28
tp1446
sssVgetfqdn
p1447
(dp1448
g5
g6
sg7
(dp1449
g9
((dp1450
g11
(g12
g19
tp1451
sg15
(lp1452
(dp1453
g18
(g12
g19
tp1454
sg21
Vhost
p1455
sas(dp1456
g11
(g12
g19
tp1457
sg15
(lp1458
stp1459
sg46
Vgetfqdn([hostname_or_ip]) -> hostname\u000a\u000aReturn the fully-qualified domain name for the specified hostname or IP\u000aaddress. An unspecified or empty name is interpreted as the local host. If the\u000aname lookup fails, the passed-in name is returned as-is.
p1460
sssVIPPROTO_ICMPV6
p1461
(dp1462
g5
g50
sg7
(dp1463
g18
(g12
g28
tp1464
sssVIPPROTO_TCP
p1465
(dp1466
g5
g50
sg7
(dp1467
g18
(g12
g28
tp1468
sssVIPV6_UNICAST_HOPS
p1469
(dp1470
g5
g50
sg7
(dp1471
g18
(g12
g28
tp1472
sssVSO_ERROR
p1473
(dp1474
g5
g50
sg7
(dp1475
g18
(g12
g28
tp1476
sssVAI_NUMERICHOST
p1477
(dp1478
g5
g50
sg7
(dp1479
g18
(g12
g28
tp1480
sssVEAI_NODATA
p1481
(dp1482
g5
g50
sg7
(dp1483
g18
(g12
g28
tp1484
sssVSOL_TCP
p1485
(dp1486
g5
g50
sg7
(dp1487
g18
(g12
g28
tp1488
sssVhtonl
p1489
(dp1490
g5
g6
sg7
(dp1491
g9
((dp1492
g11
(g12
g24
tp1493
sg15
(lp1494
(dp1495
g18
(g12
g24
tp1496
sg21
Vx
p1497
sastp1498
sg46
Vhtonl(x) -> integer\u000a\u000aConvert a 32bit integer from host byte order to network byte order.
p1499
sssVIPPORT_RESERVED
p1500
(dp1501
g5
g50
sg7
(dp1502
g18
(g12
g28
tp1503
sssVSO_DEBUG
p1504
(dp1505
g5
g50
sg7
(dp1506
g18
(g12
g28
tp1507
sssVSO_EXCLUSIVEADDRUSE
p1508
(dp1509
g5
g50
sg7
(dp1510
g18
(g12
g28
tp1511
sssVhtons
p1512
(dp1513
g5
g6
sg7
(dp1514
g9
((dp1515
g11
(g12
g28
tp1516
sg15
(lp1517
(dp1518
g18
(g12
g24
tp1519
sg21
Vx
p1520
sastp1521
sg46
Vhtons(x) -> integer\u000a\u000aConvert a 16-bit integer from host byte order to network byte order.
p1522
sssVIP_DROP_MEMBERSHIP
p1523
(dp1524
g5
g50
sg7
(dp1525
g18
(g12
g28
tp1526
sssVIPPROTO_IGMP
p1527
(dp1528
g5
g50
sg7
(dp1529
g18
(g12
g28
tp1530
sssVIP_HDRINCL
p1531
(dp1532
g5
g50
sg7
(dp1533
g18
(g12
g28
tp1534
sssVSocketType
p1535
(dp1536
g5
g18
sg7
(dp1537
g100
(dp1538
g731
(dp1539
g5
g533
sg7
(dp1540
g9
((dp1541
g11
(g12
g138
tp1542
sg15
(lp1543
(dp1544
g18
(g156
g157
tp1545
sg21
g540
sa(dp1546
g18
(g12
g28
tp1547
sg21
g741
sastp1548
sg46
Vsetblocking(flag) -> None\u000a\u000aSet the blocking mode of the socket. If flag is 0, the socket will be set to\u000anon-blocking mode; otherwise, it will be set to blocking mode. If the socket is\u000ain blocking mode, and a method is called (such as send() or recv() which does\u000anot complete immediately, the caller will block execution until the requested\u000aoperation completes. In non-blocking mode, a socket.timeout exception would\u000awould be raised in this case.\u000a\u000aNote that changing blocking mode also affects the timeout setting:\u000asetblocking(0) is equivalent to settimeout(0), and setblocking(1) is equivalent\u000ato settimeout(None).
p1549
sssg744
(dp1550
g5
g533
sg7
(dp1551
g9
((dp1552
g11
(g12
g24
tp1553
sg15
(lp1554
(dp1555
g18
(g156
g157
tp1556
sg21
g540
sastp1557
sg46
Vgettimeout() -> value\u000a\u000aReturn the timeout duration in seconds for this socket as a float. If no\u000atimeout is set, return None. For more details on timeouts and blocking, see the\u000aPython socket module documentation.
p1558
sssg754
(dp1559
g5
g533
sg7
(dp1560
g9
((dp1561
g11
(g12
g138
tp1562
sg15
(lp1563
(dp1564
g18
(g156
g157
tp1565
sg21
g540
sa(dp1566
g18
(g12
g28
tp1567
sg21
g764
sastp1568
sg46
Vshutdown() -> None\u000a\u000aReturn the timeout duration in seconds for this socket as a float. If no\u000atimeout is set, return None. For more details on timeouts and blocking, see the\u000aPython socket module documentation.
p1569
sssg767
(dp1570
g5
g533
sg7
(dp1571
g9
((dp1572
g11
(g12
g138
tp1573
sg15
(lp1574
(dp1575
g18
(g156
g157
tp1576
sg21
g540
sastp1577
sg46
Vclose() -> None\u000a\u000aClose the socket. It cannot be used after being closed.
p1578
sssg777
(dp1579
g5
g533
sg7
(dp1580
g9
((dp1581
g11
(g12
g138
tp1582
sg15
(lp1583
(dp1584
g18
(g156
g157
tp1585
sg21
g540
sa(dp1586
g18
(g12
g28
tp1587
sg21
g787
sg31
V2
p1588
sa(dp1589
g18
(g12
g28
tp1590
sg21
g791
sg31
V1
p1591
sa(dp1592
g18
(g12
g28
tp1593
sg21
g795
sg31
V0
p1594
sa(dp1595
g18
(g156
g157
tp1596
sg21
g799
sg31
g800
sastp1597
sg46
Vx.__init__(...) initializes x; see x.__class__.__doc__ for signature
p1598
sssg803
(dp1599
g5
g533
sg7
(dp1600
g9
((dp1601
g11
(g12
g138
tp1602
sg15
(lp1603
(dp1604
g18
(g156
g157
tp1605
sg21
g540
sa(dp1606
g18
(g12
g161
tp1607
sg21
g813
sastp1608
sg46
Vbind(address) -> None\u000a\u000aBind to an address. If the socket is already bound, socket.error is raised.\u000aFor IP sockets, address is a (host, port) tuple. Raw sockets are not\u000asupported.\u000a\u000aIf you do not care which local address is assigned, set host to INADDR_ANY and\u000athe system will assign the most appropriate network address. Similarly, if you\u000aset port to 0, the system will assign an available port number between 1024\u000aand 5000.
p1609
sssg816
(dp1610
g5
g533
sg7
(dp1611
g9
((dp1612
g11
(g12
g161
tp1613
sg15
(lp1614
(dp1615
g18
(g156
g157
tp1616
sg21
g540
sastp1617
sg46
Vgetsockname() -> address\u000a\u000aReturn the address of the local end of this socket. The address format is\u000afamily-dependent (e.g. a (host, port) tuple for IPv4).
p1618
sssg826
(dp1619
g5
g533
sg7
(dp1620
g9
((dp1621
g11
(g12
g138
tp1622
sg15
(lp1623
(dp1624
g18
(g156
g157
tp1625
sg21
g540
sa(dp1626
g18
(g12
g161
tp1627
sg21
g836
sastp1628
sg46
Vconnect(address) -> None\u000a\u000aConnect to a remote socket at the given address. IP addresses are expressed\u000aas (host, port).\u000a\u000aRaises socket.error if the socket has been closed, the socket is listening, or\u000aanother connection error occurred.\u000aDifference from CPython: connect() does not support timeouts in blocking mode.\u000aIf a timeout is set and the socket is in blocking mode, connect() will block\u000aindefinitely until a connection is made or an error occurs.
p1629
sssg839
(dp1630
g5
g533
sg7
(dp1631
g9
((dp1632
g11
(g12
g19
tp1633
sg15
(lp1634
(dp1635
g18
(g12
g24
tp1636
sg21
g847
sastp1637
sg46
Vx.__str__() <==> str(x)
p1638
sssg850
(dp1639
g5
g533
sg7
(dp1640
g9
((dp1641
g11
(g12
g161
tp1642
sg15
(lp1643
(dp1644
g18
(g156
g157
tp1645
sg21
g540
sa(dp1646
g18
(g12
g28
tp1647
sg21
g860
sa(dp1648
g18
(g12
g28
tp1649
sg21
g863
sg31
V0
p1650
sastp1651
sg46
Vrecvfrom(bufsize[, flags]) -> (string, address)\u000a\u000aReceive data from the socket, up to bufsize bytes. string is the data\u000areceived, and address (whose format is protocol-dependent) is the address of\u000athe socket from which the data was received.
p1652
sssg867
(dp1653
g5
g533
sg7
(dp1654
g9
((dp1655
g11
(g12
g138
tp1656
sg15
(lp1657
(dp1658
g18
(g156
g157
tp1659
sg21
g540
sa(dp1660
g18
(g12
g876
tp1661
sg21
g878
sa(dp1662
g18
(g12
g28
tp1663
sg21
g881
sg31
V0
p1664
sas(dp1665
g11
(g12
g138
tp1666
sg15
(lp1667
(dp1668
g18
(g156
g157
tp1669
sg21
g540
sa(dp1670
g18
(g12
g19
tp1671
sg21
g890
sa(dp1672
g18
(g12
g28
tp1673
sg21
g893
sg31
V0
p1674
sastp1675
sg46
Vsendall(string[, flags]) -> None\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept().\u000a\u000aUnlike send(), sendall() blocks until all of the data has been sent or until a\u000atimeout or an error occurs. None is returned on success. If an error occurs,\u000athere is no way to tell how much data, if any, was sent.\u000a\u000aDifference from CPython: timeouts do not function as you would expect. The\u000afunction is implemented using multiple calls to send(), so the timeout timer\u000ais reset after each of those calls. That means that the upper bound on the\u000atime that it will take for sendall() to return is the number of bytes in\u000astring times the timeout interval.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network sendsendall(string[, flags]) -> None\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept().\u000a\u000aUnlike send(), sendall() blocks until all of the data has been sent or until a\u000atimeout or an error occurs. None is returned on success. If an error occurs,\u000athere is no way to tell how much data, if any, was sent.\u000a\u000aDifference from CPython: timeouts do not function as you would expect. The\u000afunction is implemented using multiple calls to send(), so the timeout timer\u000ais reset after each of those calls. That means that the upper bound on the\u000atime that it will take for sendall() to return is the number of bytes in\u000astring times the timeout interval.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p1676
sssg897
(dp1677
g5
g533
sg7
(dp1678
g9
((dp1679
g11
(g12
g138
tp1680
sg15
(lp1681
(dp1682
g18
(g156
g157
tp1683
sg21
g540
sa(dp1684
g18
(g12
g28
tp1685
sg21
g907
sastp1686
sg46
Vlisten(backlog) -> None\u000a\u000aListen for connections on the socket. Backlog is the maximum length of the\u000apending connections queue. The maximum value is system-dependent.
p1687
sssg910
(dp1688
g5
g533
sg7
(dp1689
g9
((dp1690
g11
(g12
g28
tp1691
sg15
(lp1692
(dp1693
g18
(g156
g157
tp1694
sg21
g540
sa(dp1695
g18
(g12
g161
tp1696
sg21
g920
sastp1697
sg46
Vconnect_ex(address) -> error_code\u000a\u000aLike connect(), but return an error code insted of raising an exception for\u000asocket exceptions raised by the underlying system Connect() call. Note that\u000aexceptions other than SocketException generated by the system Connect() call\u000awill still be raised.\u000a\u000aA return value of 0 indicates that the connect call was successful.\u000aDifference from CPython: connect_ex() does not support timeouts in blocking\u000amode. If a timeout is set and the socket is in blocking mode, connect_ex() will\u000ablock indefinitely until a connection is made or an error occurs.
p1698
sssg923
(dp1699
g5
g533
sg7
(dp1700
g9
((dp1701
g11
(g12
g138
tp1702
sg15
(lp1703
(dp1704
g18
(g156
g157
tp1705
sg21
g540
sa(dp1706
g18
(g12
g28
tp1707
sg21
g933
sa(dp1708
g18
(g12
g28
tp1709
sg21
g936
sa(dp1710
g18
(g12
g24
tp1711
sg21
g939
sastp1712
sg46
Vsetsockopt(level, optname[, value]) -> None\u000a\u000aSet the value of a socket option. level is one of the SOL_* constants defined\u000ain this module, and optname is one of the SO_* constants. value may be either\u000aan integer or a string containing a binary structure. The caller is responsible\u000afor properly encoding the byte string.
p1713
sssg942
(dp1714
g5
g533
sg7
(dp1715
g9
((dp1716
g11
(g12
g19
tp1717
sg15
(lp1718
(dp1719
g18
(g156
g157
tp1720
sg21
g540
sa(dp1721
g18
(g12
g28
tp1722
sg21
g952
sa(dp1723
g18
(g12
g28
tp1724
sg21
g955
sg31
V0
p1725
sastp1726
sg46
Vrecv(bufsize[, flags]) -> string\u000a\u000aReceive data from the socket, up to bufsize bytes. For connection-oriented\u000aprotocols (e.g. SOCK_STREAM), you must first call either connect() or\u000aaccept(). Connectionless protocols (e.g. SOCK_DGRAM) may also use recvfrom().\u000a\u000arecv() blocks until data is available, unless a timeout was set using\u000asettimeout(). If the timeout was exceeded, socket.timeout is raised.recv() returns immediately with zero bytes when the connection is closed.
p1727
sssg959
(dp1728
g5
g961
sg7
(dp1729
g46
VGet: proto(self: socket) -> int\u000a\u000a
p1730
sg18
(g12
g28
tp1731
sssg965
(dp1732
g5
g961
sg7
(dp1733
g46
VGet: type(self: socket) -> int\u000a\u000a
p1734
sg18
(g12
g28
tp1735
sssg970
(dp1736
g5
g533
sg7
(dp1737
g9
(tsg46
Vfileno() -> file_handle\u000a\u000aReturn the underlying system handle for this socket (a 64-bit integer).
p1738
sssg974
(dp1739
g5
g533
sg7
(dp1740
g9
((dp1741
g11
(g12
g28
tp1742
sg15
(lp1743
(dp1744
g18
(g156
g157
tp1745
sg21
g540
sa(dp1746
g18
(g983
g984
tp1747
sg21
g986
sa(dp1748
g18
(g12
g28
tp1749
sg21
g989
sg31
V0
p1750
sa(dp1751
g18
(g12
g28
tp1752
sg21
g993
sg31
V0
p1753
sas(dp1754
g11
(g12
g28
tp1755
sg15
(lp1756
(dp1757
g18
(g156
g157
tp1758
sg21
g540
sa(dp1759
g18
(g12
g1001
tp1760
sg21
g1003
sa(dp1761
g18
(g12
g28
tp1762
sg21
g1006
sg31
V0
p1763
sa(dp1764
g18
(g12
g28
tp1765
sg21
g1010
sg31
V0
p1766
sas(dp1767
g11
(g12
g28
tp1768
sg15
(lp1769
(dp1770
g18
(g156
g157
tp1771
sg21
g540
sa(dp1772
g18
(g12
g876
tp1773
sg21
g1019
sa(dp1774
g18
(g12
g28
tp1775
sg21
g1022
sg31
V0
p1776
sa(dp1777
g18
(g12
g28
tp1778
sg21
g1026
sg31
V0
p1779
sas(dp1780
g11
(g12
g28
tp1781
sg15
(lp1782
(dp1783
g18
(g156
g157
tp1784
sg21
g540
sa(dp1785
g18
(g12
g19
tp1786
sg21
g1035
sa(dp1787
g18
(g12
g28
tp1788
sg21
g1038
sg31
V0
p1789
sa(dp1790
g18
(g12
g28
tp1791
sg21
g1042
sg31
V0
p1792
sastp1793
sg46
Vrecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(bytearray, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a bytearray rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000arecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating\u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize\u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.\u000a
p1794
sssg1046
(dp1795
g5
g533
sg7
(dp1796
g9
((dp1797
g11
(g12
g161
tp1798
sg15
(lp1799
(dp1800
g18
(g156
g157
tp1801
sg21
g540
sastp1802
sg46
Vgetpeername() -> address\u000a\u000aReturn the address of the remote end of this socket. The address format is\u000afamily-dependent (e.g. a (host, port) tuple for IPv4).
p1803
sssg1056
(dp1804
g5
g533
sg7
(dp1805
g9
((dp1806
g11
(g12
g28
tp1807
sg15
(lp1808
(dp1809
g18
(g156
g157
tp1810
sg21
g540
sa(dp1811
g18
(g12
g19
tp1812
sg21
g1066
sa(dp1813
g18
(g12
g161
tp1814
sg21
g1069
sas(dp1815
g11
(g12
g28
tp1816
sg15
(lp1817
(dp1818
g18
(g156
g157
tp1819
sg21
g540
sa(dp1820
g18
(g12
g19
tp1821
sg21
g1077
sa(dp1822
g18
(g12
g28
tp1823
sg21
g1080
sa(dp1824
g18
(g12
g161
tp1825
sg21
g1083
sastp1826
sg46
Vsendto(string[, flags], address) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket does not need to be connected to a\u000aremote socket since the address is specified in the call to sendto(). Returns\u000athe number of bytes sent to the remote socket.\u000a\u000aBlocking sockets will block until the all of the bytes in the buffer are sent.\u000aSince a nonblocking Socket completes immediately, it might not send all of the\u000abytes in the buffer. It is your application's responsibility to keep track of\u000athe number of bytes sent and to retry the operation until the application sends\u000aall of the bytes in the buffer.\u000a\u000aNote that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p1827
sssg1086
(dp1828
g5
g961
sg7
(dp1829
g46
VGet: family(self: socket) -> int\u000a\u000a
p1830
sg18
(g12
g28
tp1831
sssg1091
(dp1832
g5
g533
sg7
(dp1833
g9
((dp1834
g11
(g12
g161
tp1835
sg15
(lp1836
(dp1837
g18
(g156
g157
tp1838
sg21
g540
sastp1839
sg46
Vaccept() -> (conn, address)\u000a\u000aAccept a connection. The socket must be bound and listening before calling\u000aaccept(). conn is a new socket object connected to the remote host, and\u000aaddress is the remote host's address (e.g. a (host, port) tuple for IPv4).\u000a\u000a
p1840
sssg1101
(dp1841
g5
g533
sg7
(dp1842
g9
((dp1843
g11
(g12
g651
tp1844
sg15
(lp1845
(dp1846
g18
(g156
g157
tp1847
sg21
g540
sa(dp1848
g18
(g12
g19
tp1849
sg21
g1111
sg31
V'r'
p1850
sa(dp1851
g18
(g12
g28
tp1852
sg21
g1115
sg31
V8192
p1853
sastp1854
sg46
Vmakefile([mode[, bufsize]]) -> file object\u000a\u000aReturn a regular file object corresponding to the socket.  The mode\u000aand bufsize arguments are as for the built-in open() function.
p1855
sssg1119
(dp1856
g5
g533
sg7
(dp1857
g9
((dp1858
g11
(g12
g24
tp1859
sg15
(lp1860
(dp1861
g18
(g156
g157
tp1862
sg21
g540
sa(dp1863
g18
(g12
g28
tp1864
sg21
g1129
sa(dp1865
g18
(g12
g28
tp1866
sg21
g1132
sa(dp1867
g18
(g12
g28
tp1868
sg21
g1135
sg31
V0
p1869
sastp1870
sg46
Vgetsockopt(level, optname[, buflen]) -> value\u000a\u000aReturn the value of a socket option. level is one of the SOL_* constants\u000adefined in this module, and optname is one of the SO_* constants. If buflen is\u000aomitted or zero, an integer value is returned. If it is present, a byte string\u000awhose maximum length is buflen bytes) is returned. The caller must the decode\u000athe resulting byte string.
p1871
sssg1139
(dp1872
g5
g533
sg7
(dp1873
g9
((dp1874
g11
(g12
g28
tp1875
sg15
(lp1876
(dp1877
g18
(g156
g157
tp1878
sg21
g540
sa(dp1879
g18
(g12
g876
tp1880
sg21
g1149
sa(dp1881
g18
(g12
g28
tp1882
sg21
g1152
sg31
V0
p1883
sas(dp1884
g11
(g12
g28
tp1885
sg15
(lp1886
(dp1887
g18
(g156
g157
tp1888
sg21
g540
sa(dp1889
g18
(g12
g19
tp1890
sg21
g1161
sa(dp1891
g18
(g12
g28
tp1892
sg21
g1164
sg31
V0
p1893
sastp1894
sg46
Vsend(string[, flags]) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept(). Returns the number of bytes\u000asent to the remote socket.\u000a\u000aNote that the successful completion of a send() call does not mean that all of\u000athe data was sent. The caller must keep track of the number of bytes sent and\u000aretry the operation until all of the data has been sent.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network sendsend(string[, flags]) -> bytes_sent\u000a\u000aSend data to the remote socket. The socket must be connected to a remote\u000asocket (by calling either connect() or accept(). Returns the number of bytes\u000asent to the remote socket.\u000a\u000aNote that the successful completion of a send() call does not mean that all of\u000athe data was sent. The caller must keep track of the number of bytes sent and\u000aretry the operation until all of the data has been sent.\u000a\u000aAlso note that there is no guarantee that the data you send will appear on the\u000anetwork immediately. To increase network efficiency, the underlying system may\u000adelay transmission until a significant amount of outgoing data is collected. A\u000asuccessful completion of the Send method means that the underlying system has\u000ahad room to buffer your data for a network send
p1895
sssg1168
(dp1896
g5
g50
sg7
(dp1897
g18
(g12
g19
tp1898
sssg1172
(dp1899
g5
g961
sg7
(dp1900
g46
VGet: _sock(self: socket) -> socket\u000a\u000a
p1901
sg18
(g156
g157
tp1902
sssg1177
(dp1903
g5
g533
sg7
(dp1904
g9
((dp1905
g11
(g12
g138
tp1906
sg15
(lp1907
(dp1908
g18
(g156
g157
tp1909
sg21
g540
sa(dp1910
g18
(g12
g24
tp1911
sg21
g1187
sastp1912
sg46
Vsettimeout(value) -> None\u000a\u000aSet a timeout on blocking socket methods. value may be either None or a\u000anon-negative float, with one of the following meanings:\u000a - None: disable timeouts and block indefinitely - 0.0: don't block at all (return immediately if the operation can be\u000a   completed; raise socket.error otherwise)\u000a - float > 0.0: block for up to the specified number of seconds; raise\u000a   socket.timeout if the operation cannot be completed in time\u000a\u000asettimeout(None) is equivalent to setblocking(1), and settimeout(0.0) is\u000aequivalent to setblocking(0).\u000aIf the timeout is non-zero and is less than 0.5, it will be set to 0.5. This\u000alimitation is specific to IronPython.\u000a
p1913
sssg1190
(dp1914
g5
g533
sg7
(dp1915
g9
((dp1916
g11
(g12
g28
tp1917
sg15
(lp1918
(dp1919
g18
(g156
g157
tp1920
sg21
g540
sa(dp1921
g18
(g12
g1199
tp1922
sg21
g1201
sa(dp1923
g18
(g12
g28
tp1924
sg21
g1204
sastp1925
sg46
Vioctl(self: socket, cmd: long, option: int) -> int\u000a
p1926
sssg111
(dp1927
g5
g50
sg7
(dp1928
g18
(g12
g545
tp1929
sssg1210
(dp1930
g5
g533
sg7
(dp1931
g9
((dp1932
g11
(g12
g161
tp1933
sg15
(lp1934
(dp1935
g18
(g156
g157
tp1936
sg21
g540
sa(dp1937
g18
(g983
g984
tp1938
sg21
g1220
sa(dp1939
g18
(g12
g28
tp1940
sg21
g1223
sg31
V0
p1941
sa(dp1942
g18
(g12
g28
tp1943
sg21
g1227
sg31
V0
p1944
sas(dp1945
g11
(g12
g161
tp1946
sg15
(lp1947
(dp1948
g18
(g156
g157
tp1949
sg21
g540
sa(dp1950
g18
(g12
g876
tp1951
sg21
g1236
sa(dp1952
g18
(g12
g28
tp1953
sg21
g1239
sg31
V0
p1954
sa(dp1955
g18
(g12
g28
tp1956
sg21
g1243
sg31
V0
p1957
sas(dp1958
g11
(g12
g161
tp1959
sg15
(lp1960
(dp1961
g18
(g156
g157
tp1962
sg21
g540
sa(dp1963
g18
(g12
g19
tp1964
sg21
g1252
sa(dp1965
g18
(g12
g28
tp1966
sg21
g1255
sg31
V0
p1967
sa(dp1968
g18
(g12
g28
tp1969
sg21
g1259
sg31
V0
p1970
sastp1971
sg46
Vrecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000arecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\u000a
p1972
ssssg115
(lp1973
(g156
g157
tp1974
a(g12
g24
tp1975
asg46
Vsocket([family[, type[, proto]]]) -> socket object\u000a\u000aCreate a socket (a network connection endpoint) of the given family, type,\u000aand protocol. socket() accepts keyword arguments.\u000a - family (address family) defaults to AF_INET\u000a - type (socket type) defaults to SOCK_STREAM\u000a - proto (protocol type) defaults to 0, which specifies the default protocol\u000a\u000aThis module supports only IP sockets. It does not support raw or Unix sockets.\u000aBoth IPv4 and IPv6 are supported.
p1976
sg132
(lp1977
(g12
g24
tp1978
asssVSIO_RCVALL
p1979
(dp1980
g5
g50
sg7
(dp1981
g18
(g12
g1199
tp1982
sssVIPPROTO_HOPOPTS
p1983
(dp1984
g5
g50
sg7
(dp1985
g18
(g12
g28
tp1986
sssVEAI_FAMILY
p1987
(dp1988
g5
g50
sg7
(dp1989
g18
(g12
g28
tp1990
sssVNI_NAMEREQD
p1991
(dp1992
g5
g50
sg7
(dp1993
g18
(g12
g28
tp1994
sssVssl
p1995
(dp1996
g5
g18
sg7
(dp1997
g100
(dp1998
Vcipher
p1999
(dp2000
g5
g533
sg7
(dp2001
g9
(tsg46
Vcipher(self: ssl) -> tuple\u000a
p2002
sssVread
p2003
(dp2004
g5
g533
sg7
(dp2005
g9
(tsg46
Vread([n]) -> buffer_read\u000a\u000aIf n is present, reads up to n bytes from the SSL connection. Otherwise, reads to EOF.
p2006
sssg111
(dp2007
g5
g50
sg7
(dp2008
g18
(g12
g545
tp2009
sssVdo_handshake
p2010
(dp2011
g5
g533
sg7
(dp2012
g9
(tsg46
Vdo_handshake(self: ssl)
p2013
sssVpeer_certificate
p2014
(dp2015
g5
g533
sg7
(dp2016
g9
(tsg46
Vpeer_certificate(self: ssl, binary_form: bool) -> object\u000a
p2017
sssVpending
p2018
(dp2019
g5
g533
sg7
(dp2020
g9
(tsg46
Vpending(self: ssl) -> int\u000a
p2021
sssVserver
p2022
(dp2023
g5
g533
sg7
(dp2024
g9
(tsg46
Vserver() -> server_certificate\u000a\u000aReturns a string that describes the server's certificate. Only useful for debugging purposes.
p2025
sssV__repr__
p2026
(dp2027
g5
g533
sg7
(dp2028
g9
((dp2029
g11
(g12
g19
tp2030
sg15
(lp2031
(dp2032
g18
(g12
g24
tp2033
sg21
Vself
p2034
sastp2035
sg46
V__repr__(self: object) -> str\u000a
p2036
sssg602
(dp2037
g5
g6
sg7
(dp2038
g9
(tsg46
V__new__(cls: type, sock: socket, keyfile: str, certfile: str)\u000a
p2039
sssVissuer
p2040
(dp2041
g5
g533
sg7
(dp2042
g9
(tsg46
Vissuer() -> issuer_certificate\u000a\u000aReturns a string that describes the issuer of the server's certificate. Only useful for debugging purposes.
p2043
sssVwrite
p2044
(dp2045
g5
g533
sg7
(dp2046
g9
(tsg46
Vwrite(s) -> bytes_sent\u000a\u000aWrites the string s through the SSL connection.
p2047
sssVshutdown
p2048
(dp2049
g5
g533
sg7
(dp2050
g9
(tsg46
Vshutdown(self: ssl) -> socket\u000a
p2051
ssssg115
(lp2052
(g156
g1995
tp2053
a(g12
g24
tp2054
asg46
Vssl(sock: socket, keyfile: str, certfile: str)\u000a
p2055
sg132
(lp2056
(g12
g24
tp2057
asssVEAI_FAIL
p2058
(dp2059
g5
g50
sg7
(dp2060
g18
(g12
g28
tp2061
sssVNI_MAXSERV
p2062
(dp2063
g5
g50
sg7
(dp2064
g18
(g12
g28
tp2065
sssVIPPROTO_AH
p2066
(dp2067
g5
g50
sg7
(dp2068
g18
(g12
g28
tp2069
sssVSHUT_WR
p2070
(dp2071
g5
g50
sg7
(dp2072
g18
(g12
g28
tp2073
sssVSO_SNDLOWAT
p2074
(dp2075
g5
g50
sg7
(dp2076
g18
(g12
g28
tp2077
sssVSO_OOBINLINE
p2078
(dp2079
g5
g50
sg7
(dp2080
g18
(g12
g28
tp2081
sssVIPV6_PKTINFO
p2082
(dp2083
g5
g50
sg7
(dp2084
g18
(g12
g28
tp2085
ssssVdoc
p2086
VImplementation module for socket operations.\u000a\u000aThis module is a loose wrapper around the .NET System.Net.Sockets API, so you\u000amay find the corresponding MSDN documentation helpful in decoding error\u000amessages and understanding corner cases.\u000a\u000aThis implementation of socket differs slightly from the standard CPython\u000asocket module. Many of these differences are due to the implementation of the\u000a.NET socket libraries. These differences are summarized below. For full\u000adetails, check the docstrings of the functions mentioned.\u000a - s.accept(), s.connect(), and s.connect_ex() do not support timeouts.\u000a - Timeouts in s.sendall() don't work correctly.\u000a - s.dup() is not implemented.\u000a - getservbyname() and getservbyport() are not implemented.\u000a - SSL support is not implemented.\u000aAn Extra IronPython-specific function is exposed only if the clr module is\u000aimported:\u000a - s.HandleToSocket() returns the System.Net.Sockets.Socket object associated\u000a   with a particular "file descriptor number" (as returned by s.fileno()).\u000a
p2087
s.