(dp1
Vdoc
p2
VBuilt-in functions, exceptions, and other objects.\u000a\u000aNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
p3
sVmembers
p4
(dp5
Vbytearray
p6
(dp7
Vkind
p8
Vtype
p9
sVvalue
p10
(dp11
g2
Vbytearray(iterable_of_ints) -> bytearray\u000abytearray(string, encoding[, errors]) -> bytearray\u000abytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\u000abytearray(int) -> bytes array of size given by the parameter initialized with null bytes\u000abytearray() -> empty bytes array\u000a\u000aConstruct an mutable bytearray object from:\u000a  - an iterable yielding integers in range(256)\u000a  - a text string encoded using the specified encoding\u000a  - a bytes or a buffer object\u000a  - any object implementing the buffer API.\u000a  - an integer
p12
sVbases
p13
(lp14
(dp15
Vmodule_name
p16
Vbuiltins
p17
sVtype_name
p18
Vobject
p19
sasg4
(dp20
Vupper
p21
(dp22
g8
Vmethod
p23
sg10
(dp24
Voverloads
p25
(lp26
(dp27
Vret_type
p28
(lp29
(dp30
g18
Vcopy
p31
sasg2
VReturn a copy of B with all ASCII characters converted to uppercase.
p32
sVargs
p33
((dp34
g9
(lp35
(dp36
g16
Vbuiltins
p37
sg18
Vobject
p38
sasVname
p39
Vself
p40
stp41
sasg2
VB.upper() -> copy of B\u000a\u000aReturn a copy of B with all ASCII characters converted to uppercase.
p42
sssV__ne__
p43
(dp44
g8
g23
sg10
(dp45
g25
(lp46
(dp47
g2
V==> x!=y
p48
sg33
((dp49
g9
(lp50
g36
asg39
g40
s(dp51
g39
Vy
stp52
sasg2
Vx.__ne__(y) <==> x!=y
p53
sssVlstrip
p54
(dp55
g8
g23
sg10
(dp56
g25
(lp57
(dp58
g28
(lp59
(dp60
g16
Vbuiltins
p61
sg18
Vbytearray
p62
sasg2
VStrip leading bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip leading ASCII whitespace.
p63
sg33
((dp64
g9
(lp65
g36
asg39
g40
s(dp66
Vdefault_value
p67
VNone
p68
sg39
Vbytes
p69
stp70
sasg2
VB.lstrip([bytes]) -> bytearray\u000a\u000aStrip leading bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip leading ASCII whitespace.
p71
sssV__str__
p72
(dp73
g8
g23
sg10
(dp74
g25
(lp75
(dp76
g2
V==> str(x)
p77
sg33
((dp78
g9
(lp79
g36
asg39
g40
stp80
sasg2
Vx.__str__() <==> str(x)
p81
sssV__reduce__
p82
(dp83
g8
g23
sg10
(dp84
g25
Nsg2
VReturn state information for pickling.
p85
sssVremove
p86
(dp87
g8
g23
sg10
(dp88
g25
(lp89
(dp90
g28
(lp91
(dp92
g16
Vbuiltins
p93
sg18
VNoneType
p94
sasg2
VRemove the first occurrence of a value in B.
p95
sg33
((dp96
g9
(lp97
g36
asg39
g40
s(dp98
g39
Vint
p99
stp100
sasg2
VB.remove(int) -> None\u000a\u000aRemove the first occurrence of a value in B.
p101
sssVpop
p102
(dp103
g8
g23
sg10
(dp104
g25
(lp105
(dp106
g28
(lp107
(dp108
g16
Vbuiltins
p109
sg18
Vint
p110
sasg2
VRemove and return a single item from B. If no index\u000aargument is given, will pop the last value.
p111
sg33
((dp112
g9
(lp113
g36
asg39
g40
s(dp114
g67
g68
sg39
Vindex
p115
stp116
sasg2
VB.pop([index]) -> int\u000a\u000aRemove and return a single item from B. If no index\u000aargument is given, will pop the last value.
p117
sssVreplace
p118
(dp119
g8
g23
sg10
(dp120
g25
(lp121
(dp122
g28
(lp123
g60
asg2
VReturn a copy of B with all occurrences of subsection\u000aold replaced by new.  If the optional argument count is\u000agiven, only the first count occurrences are replaced.
p124
sg33
((dp125
g9
(lp126
g36
asg39
g40
s(dp127
g39
Vold
p128
s(dp129
g39
Vnew
p130
s(dp131
g67
g68
sg39
Vcount
p132
stp133
sasg2
VB.replace(old, new[, count]) -> bytearray\u000a\u000aReturn a copy of B with all occurrences of subsection\u000aold replaced by new.  If the optional argument count is\u000agiven, only the first count occurrences are replaced.
p134
sssVisdigit
p135
(dp136
g8
g23
sg10
(dp137
g25
(lp138
(dp139
g28
(lp140
(dp141
g16
Vbuiltins
p142
sg18
Vbool
p143
sasg2
VReturn True if all characters in B are digits\u000aand there is at least one character in B, False otherwise.
p144
sg33
((dp145
g9
(lp146
g36
asg39
g40
stp147
sasg2
VB.isdigit() -> bool\u000a\u000aReturn True if all characters in B are digits\u000aand there is at least one character in B, False otherwise.
p148
sssVendswith
p149
(dp150
g8
g23
sg10
(dp151
g25
(lp152
(dp153
g28
(lp154
g141
asg2
VReturn True if B ends with the specified suffix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000asuffix can also be a tuple of bytes to try.
p155
sg33
((dp156
g9
(lp157
g36
asg39
g40
s(dp158
g39
Vsuffix
p159
s(dp160
g67
g68
sg39
Vstart
p161
s(dp162
g67
g68
sg39
Vend
p163
stp164
sasg2
VB.endswith(suffix[, start[, end]]) -> bool\u000a\u000aReturn True if B ends with the specified suffix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000asuffix can also be a tuple of bytes to try.
p165
sssVsplitlines
p166
(dp167
g8
g23
sg10
(dp168
g25
(lp169
(dp170
g28
(lp171
(dp172
g16
Vbuiltins
p173
sg18
Vlist
p174
sasg2
VReturn a list of the lines in B, breaking at line boundaries.\u000aLine breaks are not included in the resulting list unless keepends\u000ais given and true.
p175
sg33
((dp176
g9
(lp177
g36
asg39
g40
s(dp178
g67
g68
sg39
Vkeepends
p179
stp180
sasg2
VB.splitlines([keepends]) -> list of lines\u000a\u000aReturn a list of the lines in B, breaking at line boundaries.\u000aLine breaks are not included in the resulting list unless keepends\u000ais given and true.
p181
sssVrfind
p182
(dp183
g8
g23
sg10
(dp184
g25
(lp185
(dp186
g28
(lp187
g108
asg2
VReturn the highest index in B where subsection sub is found,\u000asuch that sub is contained within B[start,end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p188
sg33
((dp189
g9
(lp190
g36
asg39
g40
s(dp191
g39
Vsub
p192
s(dp193
g67
g68
sg39
Vstart
p194
s(dp195
g67
g68
sg39
Vend
p196
stp197
sasg2
VB.rfind(sub[, start[, end]]) -> int\u000a\u000aReturn the highest index in B where subsection sub is found,\u000asuch that sub is contained within B[start,end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p198
sssVstrip
p199
(dp200
g8
g23
sg10
(dp201
g25
(lp202
(dp203
g28
(lp204
g60
asg2
VStrip leading and trailing bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip ASCII whitespace.
p205
sg33
((dp206
g9
(lp207
g36
asg39
g40
s(dp208
g67
g68
sg39
Vbytes
p209
stp210
sasg2
VB.strip([bytes]) -> bytearray\u000a\u000aStrip leading and trailing bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip ASCII whitespace.
p211
sssV__rmul__
p212
(dp213
g8
g23
sg10
(dp214
g25
(lp215
(dp216
g2
V==> n*x
p217
sg33
((dp218
g9
(lp219
g36
asg39
g40
s(dp220
g39
Vn
stp221
sasg2
Vx.__rmul__(n) <==> n*x
p222
sssV__lt__
p223
(dp224
g8
g23
sg10
(dp225
g25
(lp226
(dp227
g2
V==> x<y
p228
sg33
((dp229
g9
(lp230
g36
asg39
g40
s(dp231
g39
Vy
stp232
sasg2
Vx.__lt__(y) <==> x<y
p233
sssVljust
p234
(dp235
g8
g23
sg10
(dp236
g25
(lp237
(dp238
g28
(lp239
g30
asg2
VReturn B left justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space).
p240
sg33
((dp241
g9
(lp242
g36
asg39
g40
s(dp243
g39
Vwidth
p244
s(dp245
g67
g68
sg39
Vfillchar
p246
stp247
sasg2
VB.ljust(width[, fillchar]) -> copy of B\u000a\u000aReturn B left justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space).
p248
sssVfind
p249
(dp250
g8
g23
sg10
(dp251
g25
(lp252
(dp253
g28
(lp254
g108
asg2
VReturn the lowest index in B where subsection sub is found,\u000asuch that sub is contained within B[start,end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p255
sg33
((dp256
g9
(lp257
g36
asg39
g40
s(dp258
g39
Vsub
p259
s(dp260
g67
g68
sg39
Vstart
p261
s(dp262
g67
g68
sg39
Vend
p263
stp264
sasg2
VB.find(sub[, start[, end]]) -> int\u000a\u000aReturn the lowest index in B where subsection sub is found,\u000asuch that sub is contained within B[start,end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p265
sssV__init__
p266
(dp267
g8
g23
sg10
(dp268
g25
(lp269
(dp270
g2
Vinitializes x; see help(type(x)) for signature
p271
sg33
((dp272
g9
(lp273
g36
asg39
g40
s(dp274
Varg_format
p275
V*
sg39
g33
stp276
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p277
sssVrjust
p278
(dp279
g8
g23
sg10
(dp280
g25
(lp281
(dp282
g28
(lp283
g30
asg2
VReturn B right justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space)
p284
sg33
((dp285
g9
(lp286
g36
asg39
g40
s(dp287
g39
Vwidth
p288
s(dp289
g67
g68
sg39
Vfillchar
p290
stp291
sasg2
VB.rjust(width[, fillchar]) -> copy of B\u000a\u000aReturn B right justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space)
p292
sssV__alloc__
p293
(dp294
g8
g23
sg10
(dp295
g25
(lp296
(dp297
g28
(lp298
g108
asg2
VReturn the number of bytes actually allocated.
p299
sg33
((dp300
g9
(lp301
g36
asg39
g40
stp302
sasg2
VB.__alloc__() -> int\u000a\u000aReturn the number of bytes actually allocated.
p303
sssV__reduce_ex__
p304
(dp305
g8
g23
sg10
(dp306
g25
Nsg2
VReturn state information for pickling.
p307
sssV__getitem__
p308
(dp309
g8
g23
sg10
(dp310
g25
(lp311
(dp312
g2
V==> x[y]
p313
sg33
((dp314
g9
(lp315
g36
asg39
g40
s(dp316
g39
Vy
stp317
sasg2
Vx.__getitem__(y) <==> x[y]
p318
sssV__new__
p319
(dp320
g8
Vfunction
p321
sg10
(dp322
g25
(lp323
(dp324
g28
(lp325
g60
asg2
Vbytearray() -> empty bytes array\u000a\u000aConstruct an mutable bytearray object from:\u000a  - an iterable yielding integers in range(256)\u000a  - a text string encoded using the specified encoding\u000a  - a bytes or a buffer object\u000a  - any object implementing the buffer API.\u000a  - an integer
p326
sg33
((dp327
g9
(lp328
(dp329
g16
Vbuiltins
p330
sg18
Vtype
p331
sasg39
Vcls
p332
s(dp333
g39
Viterable_of_ints
p334
stp335
sa(dp336
g28
(lp337
g60
asg2
g326
sg33
(g327
(dp338
g39
Vstring
p339
s(dp340
g39
Vencoding
p341
s(dp342
g67
g68
sg39
Verrors
p343
stp344
sa(dp345
g28
(lp346
(dp347
g18
Vmutable
p348
sasg2
g326
sg33
(g327
(dp349
g39
Vbytes_or_buffer
p350
stp351
sa(dp352
g28
(lp353
(dp354
g16
Vbuiltins
p355
sg18
Vbytes
p356
sasg2
g326
sg33
(g327
(dp357
g39
Vint
p358
stp359
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p360
sssV__contains__
p361
(dp362
g8
g23
sg10
(dp363
g25
(lp364
(dp365
g2
V==> y in x
p366
sg33
((dp367
g9
(lp368
g36
asg39
g40
s(dp369
g39
Vy
stp370
sasg2
Vx.__contains__(y) <==> y in x
p371
sssVrindex
p372
(dp373
g8
g23
sg10
(dp374
g25
(lp375
(dp376
g28
(lp377
g108
asg2
VLike B.rfind() but raise ValueError when the subsection is not found.
p378
sg33
((dp379
g9
(lp380
g36
asg39
g40
s(dp381
g39
Vsub
p382
s(dp383
g67
g68
sg39
Vstart
p384
s(dp385
g67
g68
sg39
Vend
p386
stp387
sasg2
VB.rindex(sub[, start[, end]]) -> int\u000a\u000aLike B.rfind() but raise ValueError when the subsection is not found.
p388
sssVcapitalize
p389
(dp390
g8
g23
sg10
(dp391
g25
(lp392
(dp393
g28
(lp394
g30
asg2
VReturn a copy of B with only its first character capitalized (ASCII)\u000aand the rest lower-cased.
p395
sg33
((dp396
g9
(lp397
g36
asg39
g40
stp398
sasg2
VB.capitalize() -> copy of B\u000a\u000aReturn a copy of B with only its first character capitalized (ASCII)\u000aand the rest lower-cased.
p399
sssVdecode
p400
(dp401
g8
g23
sg10
(dp402
g25
(lp403
(dp404
g28
(lp405
(dp406
g16
Vbuiltins
p407
sg18
Vstr
p408
sasg2
VDecode B using the codec registered for encoding. Default encoding\u000ais 'utf-8'. errors may be given to set a different error\u000ahandling scheme.  Default is 'strict' meaning that encoding errors raise\u000aa UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\u000aas well as any other name registered with codecs.register_error that is\u000aable to handle UnicodeDecodeErrors.
p409
sg33
((dp410
g9
(lp411
g36
asg39
g40
s(dp412
g67
Vutf-8
p413
sg39
Vencoding
p414
s(dp415
g67
Vstrict
p416
sg39
Verrors
p417
stp418
sasg2
VB.decode(encoding='utf-8', errors='strict') -> str\u000a\u000aDecode B using the codec registered for encoding. Default encoding\u000ais 'utf-8'. errors may be given to set a different error\u000ahandling scheme.  Default is 'strict' meaning that encoding errors raise\u000aa UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\u000aas well as any other name registered with codecs.register_error that is\u000aable to handle UnicodeDecodeErrors.
p419
sssVisalpha
p420
(dp421
g8
g23
sg10
(dp422
g25
(lp423
(dp424
g28
(lp425
g141
asg2
VReturn True if all characters in B are alphabetic\u000aand there is at least one character in B, False otherwise.
p426
sg33
((dp427
g9
(lp428
g36
asg39
g40
stp429
sasg2
VB.isalpha() -> bool\u000a\u000aReturn True if all characters in B are alphabetic\u000aand there is at least one character in B, False otherwise.
p430
sssVsplit
p431
(dp432
g8
g23
sg10
(dp433
g25
(lp434
(dp435
g28
(lp436
g172
asg2
VReturn a list of the sections in B, using sep as the delimiter.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p437
sg33
((dp438
g9
(lp439
g36
asg39
g40
s(dp440
g67
VNone
p441
sg39
Vsep
p442
s(dp443
g67
V1
sg39
Vmaxsplit
p444
stp445
sasg2
VB.split(sep=None, maxsplit=-1) -> list of bytearrays\u000a\u000aReturn a list of the sections in B, using sep as the delimiter.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p446
sssVrstrip
p447
(dp448
g8
g23
sg10
(dp449
g25
(lp450
(dp451
g28
(lp452
g60
asg2
VStrip trailing bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip trailing ASCII whitespace.
p453
sg33
((dp454
g9
(lp455
g36
asg39
g40
s(dp456
g67
g68
sg39
Vbytes
p457
stp458
sasg2
VB.rstrip([bytes]) -> bytearray\u000a\u000aStrip trailing bytes contained in the argument\u000aand return the result as a new bytearray.\u000aIf the argument is omitted, strip trailing ASCII whitespace.
p459
sssV__eq__
p460
(dp461
g8
g23
sg10
(dp462
g25
(lp463
(dp464
g2
V==> x==y
p465
sg33
((dp466
g9
(lp467
g36
asg39
g40
s(dp468
g39
Vy
stp469
sasg2
Vx.__eq__(y) <==> x==y
p470
sssVtranslate
p471
(dp472
g8
g23
sg10
(dp473
g25
(lp474
(dp475
g28
(lp476
g60
asg2
VReturn a copy of B, where all characters occurring in the\u000aoptional argument deletechars are removed, and the remaining\u000acharacters have been mapped through the given translation\u000atable, which must be a bytes object of length 256.
p477
sg33
((dp478
g9
(lp479
g36
asg39
g40
s(dp480
g39
Vtable
p481
s(dp482
g67
g68
sg39
Vdeletechars
p483
stp484
sasg2
VB.translate(table[, deletechars]) -> bytearray\u000a\u000aReturn a copy of B, where all characters occurring in the\u000aoptional argument deletechars are removed, and the remaining\u000acharacters have been mapped through the given translation\u000atable, which must be a bytes object of length 256.
p485
sssVisspace
p486
(dp487
g8
g23
sg10
(dp488
g25
(lp489
(dp490
g28
(lp491
g141
asg2
VReturn True if all characters in B are whitespace\u000aand there is at least one character in B, False otherwise.
p492
sg33
((dp493
g9
(lp494
g36
asg39
g40
stp495
sasg2
VB.isspace() -> bool\u000a\u000aReturn True if all characters in B are whitespace\u000aand there is at least one character in B, False otherwise.
p496
sssV__len__
p497
(dp498
g8
g23
sg10
(dp499
g25
(lp500
(dp501
g2
V==> len(x)
p502
sg33
((dp503
g9
(lp504
g36
asg39
g40
stp505
sasg2
Vx.__len__() <==> len(x)
p506
sssV__repr__
p507
(dp508
g8
g23
sg10
(dp509
g25
(lp510
(dp511
g2
V==> repr(x)
p512
sg33
((dp513
g9
(lp514
g36
asg39
g40
stp515
sasg2
Vx.__repr__() <==> repr(x)
p516
sssVisalnum
p517
(dp518
g8
g23
sg10
(dp519
g25
(lp520
(dp521
g28
(lp522
g141
asg2
VReturn True if all characters in B are alphanumeric\u000aand there is at least one character in B, False otherwise.
p523
sg33
((dp524
g9
(lp525
g36
asg39
g40
stp526
sasg2
VB.isalnum() -> bool\u000a\u000aReturn True if all characters in B are alphanumeric\u000aand there is at least one character in B, False otherwise.
p527
sssVstartswith
p528
(dp529
g8
g23
sg10
(dp530
g25
(lp531
(dp532
g28
(lp533
g141
asg2
VReturn True if B starts with the specified prefix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000aprefix can also be a tuple of bytes to try.
p534
sg33
((dp535
g9
(lp536
g36
asg39
g40
s(dp537
g39
Vprefix
p538
s(dp539
g67
g68
sg39
Vstart
p540
s(dp541
g67
g68
sg39
Vend
p542
stp543
sasg2
VB.startswith(prefix[, start[, end]]) -> bool\u000a\u000aReturn True if B starts with the specified prefix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000aprefix can also be a tuple of bytes to try.
p544
sssVextend
p545
(dp546
g8
g23
sg10
(dp547
g25
(lp548
(dp549
g28
(lp550
g92
asg2
VAppend all the elements from the iterator or sequence to the\u000aend of B.
p551
sg33
((dp552
g9
(lp553
g36
asg39
g40
s(dp554
g39
Viterable_of_ints
p555
stp556
sasg2
VB.extend(iterable_of_ints) -> None\u000a\u000aAppend all the elements from the iterator or sequence to the\u000aend of B.
p557
sssVindex
p558
(dp559
g8
g23
sg10
(dp560
g25
(lp561
(dp562
g28
(lp563
g108
asg2
VLike B.find() but raise ValueError when the subsection is not found.
p564
sg33
((dp565
g9
(lp566
g36
asg39
g40
s(dp567
g39
Vsub
p568
s(dp569
g67
g68
sg39
Vstart
p570
s(dp571
g67
g68
sg39
Vend
p572
stp573
sasg2
VB.index(sub[, start[, end]]) -> int\u000a\u000aLike B.find() but raise ValueError when the subsection is not found.
p574
sssVfromhex
p575
(dp576
g8
g321
sg10
(dp577
g25
(lp578
(dp579
g28
(lp580
g60
asg2
V(static method)\u000a\u000aCreate a bytearray object from a string of hexadecimal numbers.\u000aSpaces between two numbers are accepted.\u000aExample: bytearray.fromhex('B9 01EF') -> bytearray(b'\u005cxb9\u005cx01\u005cxef').
p581
sg33
((dp582
g39
Vstring
p583
stp584
sasg2
Vbytearray.fromhex(string) -> bytearray (static method)\u000a\u000aCreate a bytearray object from a string of hexadecimal numbers.\u000aSpaces between two numbers are accepted.\u000aExample: bytearray.fromhex('B9 01EF') -> bytearray(b'\u005cxb9\u005cx01\u005cxef').
p585
sssVswapcase
p586
(dp587
g8
g23
sg10
(dp588
g25
(lp589
(dp590
g28
(lp591
g30
asg2
VReturn a copy of B with uppercase ASCII characters converted\u000ato lowercase ASCII and vice versa.
p592
sg33
((dp593
g9
(lp594
g36
asg39
g40
stp595
sasg2
VB.swapcase() -> copy of B\u000a\u000aReturn a copy of B with uppercase ASCII characters converted\u000ato lowercase ASCII and vice versa.
p596
sssVappend
p597
(dp598
g8
g23
sg10
(dp599
g25
(lp600
(dp601
g28
(lp602
g92
asg2
VAppend a single item to the end of B.
p603
sg33
((dp604
g9
(lp605
g36
asg39
g40
s(dp606
g39
Vint
p607
stp608
sasg2
VB.append(int) -> None\u000a\u000aAppend a single item to the end of B.
p609
sssVislower
p610
(dp611
g8
g23
sg10
(dp612
g25
(lp613
(dp614
g28
(lp615
g141
asg2
VReturn True if all cased characters in B are lowercase and there is\u000aat least one cased character in B, False otherwise.
p616
sg33
((dp617
g9
(lp618
g36
asg39
g40
stp619
sasg2
VB.islower() -> bool\u000a\u000aReturn True if all cased characters in B are lowercase and there is\u000aat least one cased character in B, False otherwise.
p620
sssV__iter__
p621
(dp622
g8
g23
sg10
(dp623
g25
(lp624
(dp625
g2
V==> iter(x)
p626
sg33
((dp627
g9
(lp628
g36
asg39
g40
stp629
sasg2
Vx.__iter__() <==> iter(x)
p630
sssV__imul__
p631
(dp632
g8
g23
sg10
(dp633
g25
(lp634
(dp635
g2
V==> x*=y
p636
sg33
((dp637
g9
(lp638
g36
asg39
g40
s(dp639
g39
Vy
stp640
sasg2
Vx.__imul__(y) <==> x*=y
p641
sssVzfill
p642
(dp643
g8
g23
sg10
(dp644
g25
(lp645
(dp646
g28
(lp647
g30
asg2
VPad a numeric string B with zeros on the left, to fill a field\u000aof the specified width.  B is never truncated.
p648
sg33
((dp649
g9
(lp650
g36
asg39
g40
s(dp651
g39
Vwidth
p652
stp653
sasg2
VB.zfill(width) -> copy of B\u000a\u000aPad a numeric string B with zeros on the left, to fill a field\u000aof the specified width.  B is never truncated.
p654
sssV__iadd__
p655
(dp656
g8
g23
sg10
(dp657
g25
(lp658
(dp659
g2
V==> x+=y
p660
sg33
((dp661
g9
(lp662
g36
asg39
g40
s(dp663
g39
Vy
stp664
sasg2
Vx.__iadd__(y) <==> x+=y
p665
sssV__add__
p666
(dp667
g8
g23
sg10
(dp668
g25
(lp669
(dp670
g2
V==> x+y
p671
sg33
((dp672
g9
(lp673
g36
asg39
g40
s(dp674
g39
Vy
stp675
sasg2
Vx.__add__(y) <==> x+y
p676
sssV__gt__
p677
(dp678
g8
g23
sg10
(dp679
g25
(lp680
(dp681
g2
V==> x>y
p682
sg33
((dp683
g9
(lp684
g36
asg39
g40
s(dp685
g39
Vy
stp686
sasg2
Vx.__gt__(y) <==> x>y
p687
sssVistitle
p688
(dp689
g8
g23
sg10
(dp690
g25
(lp691
(dp692
g28
(lp693
g141
asg2
VReturn True if B is a titlecased string and there is at least one\u000acharacter in B, i.e. uppercase characters may only follow uncased\u000acharacters and lowercase characters only cased ones. Return False\u000aotherwise.
p694
sg33
((dp695
g9
(lp696
g36
asg39
g40
stp697
sasg2
VB.istitle() -> bool\u000a\u000aReturn True if B is a titlecased string and there is at least one\u000acharacter in B, i.e. uppercase characters may only follow uncased\u000acharacters and lowercase characters only cased ones. Return False\u000aotherwise.
p698
sssVcopy
p699
(dp700
g8
g23
sg10
(dp701
g25
(lp702
(dp703
g28
(lp704
g60
asg2
VReturn a copy of B.
p705
sg33
((dp706
g9
(lp707
g36
asg39
g40
stp708
sasg2
VB.copy() -> bytearray\u000a\u000aReturn a copy of B.
p709
sssVrsplit
p710
(dp711
g8
g23
sg10
(dp712
g25
(lp713
(dp714
g28
(lp715
g172
asg2
VReturn a list of the sections in B, using sep as the delimiter,\u000astarting at the end of B and working to the front.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p716
sg33
((dp717
g9
(lp718
g36
asg39
g40
s(dp719
g67
VNone
p720
sg39
Vsep
p721
s(dp722
g67
V1
sg39
Vmaxsplit
p723
stp724
sasg2
VB.rsplit(sep=None, maxsplit=-1) -> list of bytearrays\u000a\u000aReturn a list of the sections in B, using sep as the delimiter,\u000astarting at the end of B and working to the front.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p725
sssV__sizeof__
p726
(dp727
g8
g23
sg10
(dp728
g25
(lp729
(dp730
g28
(lp731
g108
asg2
VReturns the size of B in memory, in bytes
p732
sg33
((dp733
g9
(lp734
g36
asg39
g40
stp735
sasg2
VB.__sizeof__() -> int\u000a \u000aReturns the size of B in memory, in bytes
p736
sssVcenter
p737
(dp738
g8
g23
sg10
(dp739
g25
(lp740
(dp741
g28
(lp742
g30
asg2
VReturn B centered in a string of length width.  Padding is\u000adone using the specified fill character (default is a space).
p743
sg33
((dp744
g9
(lp745
g36
asg39
g40
s(dp746
g39
Vwidth
p747
s(dp748
g67
g68
sg39
Vfillchar
p749
stp750
sasg2
VB.center(width[, fillchar]) -> copy of B\u000a\u000aReturn B centered in a string of length width.  Padding is\u000adone using the specified fill character (default is a space).
p751
sssVcount
p752
(dp753
g8
g23
sg10
(dp754
g25
(lp755
(dp756
g28
(lp757
g108
asg2
VReturn the number of non-overlapping occurrences of subsection sub in\u000abytes B[start:end].  Optional arguments start and end are interpreted\u000aas in slice notation.
p758
sg33
((dp759
g9
(lp760
g36
asg39
g40
s(dp761
g39
Vsub
p762
s(dp763
g67
g68
sg39
Vstart
p764
s(dp765
g67
g68
sg39
Vend
p766
stp767
sasg2
VB.count(sub[, start[, end]]) -> int\u000a\u000aReturn the number of non-overlapping occurrences of subsection sub in\u000abytes B[start:end].  Optional arguments start and end are interpreted\u000aas in slice notation.
p768
sssV__delitem__
p769
(dp770
g8
g23
sg10
(dp771
g25
(lp772
(dp773
g2
V==> del x[y]
p774
sg33
((dp775
g9
(lp776
g36
asg39
g40
s(dp777
g39
Vy
stp778
sasg2
Vx.__delitem__(y) <==> del x[y]
p779
sssVlower
p780
(dp781
g8
g23
sg10
(dp782
g25
(lp783
(dp784
g28
(lp785
g30
asg2
VReturn a copy of B with all ASCII characters converted to lowercase.
p786
sg33
((dp787
g9
(lp788
g36
asg39
g40
stp789
sasg2
VB.lower() -> copy of B\u000a\u000aReturn a copy of B with all ASCII characters converted to lowercase.
p790
sssVmaketrans
p791
(dp792
g8
Vdata
p793
sg10
(dp794
g9
(lp795
(dp796
g16
Vbuiltins
p797
sg18
Vstaticmethod
p798
sasssVjoin
p799
(dp800
g8
g23
sg10
(dp801
g25
(lp802
(dp803
g28
(lp804
g60
asg2
VConcatenate any number of bytes/bytearray objects, with B\u000ain between each pair, and return the result as a new bytearray.
p805
sg33
((dp806
g9
(lp807
g36
asg39
g40
s(dp808
g39
Viterable_of_bytes
p809
stp810
sasg2
VB.join(iterable_of_bytes) -> bytearray\u000a\u000aConcatenate any number of bytes/bytearray objects, with B\u000ain between each pair, and return the result as a new bytearray.
p811
sssVreverse
p812
(dp813
g8
g23
sg10
(dp814
g25
(lp815
(dp816
g28
(lp817
g92
asg2
VReverse the order of the values in B in place.
p818
sg33
((dp819
g9
(lp820
g36
asg39
g40
stp821
sasg2
VB.reverse() -> None\u000a\u000aReverse the order of the values in B in place.
p822
sssVclear
p823
(dp824
g8
g23
sg10
(dp825
g25
(lp826
(dp827
g28
(lp828
g92
asg2
VRemove all items from B.
p829
sg33
((dp830
g9
(lp831
g36
asg39
g40
stp832
sasg2
VB.clear() -> None\u000a\u000aRemove all items from B.
p833
sssVpartition
p834
(dp835
g8
g23
sg10
(dp836
g25
(lp837
(dp838
g28
(lp839
(dp840
g18
V
sasg2
V(head, sep, tail)\u000a\u000aSearch for the separator sep in B, and return the part before it,\u000athe separator itself, and the part after it.  If the separator is not\u000afound, returns B and two empty bytearray objects.
p841
sg33
((dp842
g9
(lp843
g36
asg39
g40
s(dp844
g39
Vsep
p845
stp846
sasg2
VB.partition(sep) -> (head, sep, tail)\u000a\u000aSearch for the separator sep in B, and return the part before it,\u000athe separator itself, and the part after it.  If the separator is not\u000afound, returns B and two empty bytearray objects.
p847
sssV__setitem__
p848
(dp849
g8
g23
sg10
(dp850
g25
(lp851
(dp852
g2
V==> x[i]=y
p853
sg33
((dp854
g9
(lp855
g36
asg39
g40
s(dp856
g39
Vi
s(dp857
g39
Vy
stp858
sasg2
Vx.__setitem__(i, y) <==> x[i]=y
p859
sssVexpandtabs
p860
(dp861
g8
g23
sg10
(dp862
g25
(lp863
(dp864
g28
(lp865
g30
asg2
VReturn a copy of B where all tab characters are expanded using spaces.\u000aIf tabsize is not given, a tab size of 8 characters is assumed.
p866
sg33
((dp867
g9
(lp868
g36
asg39
g40
s(dp869
g67
g68
sg39
Vtabsize
p870
stp871
sasg2
VB.expandtabs([tabsize]) -> copy of B\u000a\u000aReturn a copy of B where all tab characters are expanded using spaces.\u000aIf tabsize is not given, a tab size of 8 characters is assumed.
p872
sssV__doc__
p873
(dp874
g8
g793
sg10
(dp875
g9
(lp876
(dp877
g16
Vbuiltins
p878
sg18
Vstr
p879
sasssVrpartition
p880
(dp881
g8
g23
sg10
(dp882
g25
(lp883
(dp884
g28
(lp885
g840
asg2
V(head, sep, tail)\u000a\u000aSearch for the separator sep in B, starting at the end of B,\u000aand return the part before it, the separator itself, and the\u000apart after it.  If the separator is not found, returns two empty\u000abytearray objects and B.
p886
sg33
((dp887
g9
(lp888
g36
asg39
g40
s(dp889
g39
Vsep
p890
stp891
sasg2
VB.rpartition(sep) -> (head, sep, tail)\u000a\u000aSearch for the separator sep in B, starting at the end of B,\u000aand return the part before it, the separator itself, and the\u000apart after it.  If the separator is not found, returns two empty\u000abytearray objects and B.
p892
sssVinsert
p893
(dp894
g8
g23
sg10
(dp895
g25
(lp896
(dp897
g28
(lp898
g92
asg2
VInsert a single item into the bytearray before the given index.
p899
sg33
((dp900
g9
(lp901
g36
asg39
g40
s(dp902
g39
Vindex
p903
s(dp904
g39
Vint
p905
stp906
sasg2
VB.insert(index, int) -> None\u000a\u000aInsert a single item into the bytearray before the given index.
p907
sssV__le__
p908
(dp909
g8
g23
sg10
(dp910
g25
(lp911
(dp912
g2
V==> x<=y
p913
sg33
((dp914
g9
(lp915
g36
asg39
g40
s(dp916
g39
Vy
stp917
sasg2
Vx.__le__(y) <==> x<=y
p918
sssV__mul__
p919
(dp920
g8
g23
sg10
(dp921
g25
(lp922
(dp923
g2
V==> x*n
p924
sg33
((dp925
g9
(lp926
g36
asg39
g40
s(dp927
g39
Vn
stp928
sasg2
Vx.__mul__(n) <==> x*n
p929
sssV__hash__
p930
(dp931
g8
g793
sg10
(dp932
g9
(lp933
(dp934
g16
Vbuiltins
p935
sg18
VNoneType
p936
sasssVtitle
p937
(dp938
g8
g23
sg10
(dp939
g25
(lp940
(dp941
g28
(lp942
g30
asg2
VReturn a titlecased version of B, i.e. ASCII words start with uppercase\u000acharacters, all remaining cased characters have lowercase.
p943
sg33
((dp944
g9
(lp945
g36
asg39
g40
stp946
sasg2
VB.title() -> copy of B\u000a\u000aReturn a titlecased version of B, i.e. ASCII words start with uppercase\u000acharacters, all remaining cased characters have lowercase.
p947
sssVisupper
p948
(dp949
g8
g23
sg10
(dp950
g25
(lp951
(dp952
g28
(lp953
g141
asg2
VReturn True if all cased characters in B are uppercase and there is\u000aat least one cased character in B, False otherwise.
p954
sg33
((dp955
g9
(lp956
g36
asg39
g40
stp957
sasg2
VB.isupper() -> bool\u000a\u000aReturn True if all cased characters in B are uppercase and there is\u000aat least one cased character in B, False otherwise.
p958
sssV__ge__
p959
(dp960
g8
g23
sg10
(dp961
g25
(lp962
(dp963
g2
V==> x>=y
p964
sg33
((dp965
g9
(lp966
g36
asg39
g40
s(dp967
g39
Vy
stp968
sasg2
Vx.__ge__(y) <==> x>=y
p969
ssssVmro
p970
(lp971
(dp972
g16
Vbuiltins
p973
sg18
Vbytearray
p974
sag15
asssVall
p975
(dp976
g8
g321
sg10
(dp977
g25
(lp978
(dp979
g28
(lp980
g141
asg2
VReturn True if bool(x) is True for all values x in the iterable.
p981
sg33
((dp982
g39
Viterable
p983
stp984
sasg2
Vall(iterable) -> bool\u000a\u000aReturn True if bool(x) is True for all values x in the iterable.
p985
sssVhelp
p986
(dp987
g8
g793
sg10
(dp988
g9
(lp989
(dp990
g16
Vsite
p991
sg18
V_Helper
p992
sasssVvars
p993
(dp994
g8
g321
sg10
(dp995
g25
(lp996
(dp997
g28
(lp998
(dp999
g16
Vbuiltins
p1000
sg18
Vdict
p1001
sasg2
VWithout arguments, equivalent to locals().\u000aWith an argument, equivalent to object.__dict__.
p1002
sg33
((dp1003
g67
g68
sg39
Vobject
p1004
stp1005
sasg2
Vvars([object]) -> dictionary\u000a\u000aWithout arguments, equivalent to locals().\u000aWith an argument, equivalent to object.__dict__.
p1006
sssVSyntaxError
p1007
(dp1008
g8
g9
sg10
(dp1009
g2
VInvalid syntax.
p1010
sg13
(lp1011
(dp1012
g16
Vbuiltins
p1013
sg18
VException
p1014
sasg4
(dp1015
g319
(dp1016
g8
g321
sg10
(dp1017
g25
(lp1018
(dp1019
g2
VInvalid syntax.
p1020
sg33
(lp1021
(dp1022
g275
V*
sg39
g33
sasasg2
g1020
sssVtext
p1023
(dp1024
g8
Vproperty
p1025
sg10
(dp1026
g2
Vexception text
p1027
sg9
(lp1028
g15
asssVprint_file_and_line
p1029
(dp1030
g8
g1025
sg10
(dp1031
g2
Vexception print_file_and_line
p1032
sg9
(lp1033
g15
asssVfilename
p1034
(dp1035
g8
g1025
sg10
(dp1036
g2
Vexception filename
p1037
sg9
(lp1038
g15
asssg873
(dp1039
g8
g793
sg10
(dp1040
g9
(lp1041
g877
asssVoffset
p1042
(dp1043
g8
g1025
sg10
(dp1044
g2
Vexception offset
p1045
sg9
(lp1046
g15
asssVmsg
p1047
(dp1048
g8
g1025
sg10
(dp1049
g2
Vexception msg
p1050
sg9
(lp1051
g15
asssg72
(dp1052
g8
g23
sg10
(dp1053
g25
(lp1054
(dp1055
g2
V==> str(x)
p1056
sg33
((dp1057
g9
(lp1058
g36
asg39
g40
stp1059
sasg2
Vx.__str__() <==> str(x)
p1060
sssg266
(dp1061
g8
g23
sg10
(dp1062
g25
(lp1063
(dp1064
g2
Vinitializes x; see help(type(x)) for signature
p1065
sg33
((dp1066
g9
(lp1067
g36
asg39
g40
s(dp1068
g275
V*
sg39
g33
stp1069
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1070
sssVlineno
p1071
(dp1072
g8
g1025
sg10
(dp1073
g2
Vexception lineno
p1074
sg9
(lp1075
g15
assssg970
(lp1076
(dp1077
g16
Vbuiltins
p1078
sg18
VSyntaxError
p1079
sag1012
a(dp1080
g16
Vbuiltins
p1081
sg18
VBaseException
p1082
sag15
asssVBrokenPipeError
p1083
(dp1084
g8
g9
sg10
(dp1085
g2
VBroken pipe.
p1086
sg13
(lp1087
(dp1088
g16
Vbuiltins
p1089
sg18
VConnectionError
p1090
sasg4
(dp1091
g319
(dp1092
g8
g321
sg10
(dp1093
g25
(lp1094
(dp1095
g2
VBroken pipe.
p1096
sg33
(lp1097
(dp1098
g275
V*
sg39
g33
sasasg2
g1096
sssg266
(dp1099
g8
g23
sg10
(dp1100
g25
(lp1101
(dp1102
g2
Vinitializes x; see help(type(x)) for signature
p1103
sg33
((dp1104
g9
(lp1105
g36
asg39
g40
s(dp1106
g275
V*
sg39
g33
stp1107
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1108
sssg873
(dp1109
g8
g793
sg10
(dp1110
g9
(lp1111
g877
assssg970
(lp1112
(dp1113
g16
Vbuiltins
p1114
sg18
VBrokenPipeError
p1115
sag1088
a(dp1116
g16
Vbuiltins
p1117
sg18
VOSError
p1118
sag1012
ag1080
ag15
asssVsorted
p1119
(dp1120
g8
g321
sg10
(dp1121
g25
(lp1122
(dp1123
g28
(lp1124
(dp1125
g18
Vnew
p1126
sasg2
V
sg33
((dp1127
g39
Viterable
p1128
s(dp1129
g67
VNone
p1130
sg39
Vkey
p1131
s(dp1132
g67
VFalse
p1133
sg39
Vreverse
p1134
stp1135
sasg2
Vsorted(iterable, key=None, reverse=False) --> new sorted list
p1136
sssVmemoryview
p1137
(dp1138
g8
g9
sg10
(dp1139
g2
Vmemoryview(object)\u000a\u000aCreate a new memoryview object which references the given object.
p1140
sg13
(lp1141
g15
asg4
(dp1142
Vndim
p1143
(dp1144
g8
g1025
sg10
(dp1145
g9
(lp1146
g15
asssVtolist
p1147
(dp1148
g8
g23
sg10
(dp1149
g25
NsssVcontiguous
p1150
(dp1151
g8
g1025
sg10
(dp1152
g9
(lp1153
g15
asssg677
(dp1154
g8
g23
sg10
(dp1155
g25
(lp1156
(dp1157
g2
V==> x>y
p1158
sg33
((dp1159
g9
(lp1160
g36
asg39
g40
s(dp1161
g39
Vy
stp1162
sasg2
Vx.__gt__(y) <==> x>y
p1163
sssVshape
p1164
(dp1165
g8
g1025
sg10
(dp1166
g9
(lp1167
g15
asssg223
(dp1168
g8
g23
sg10
(dp1169
g25
(lp1170
(dp1171
g2
V==> x<y
p1172
sg33
((dp1173
g9
(lp1174
g36
asg39
g40
s(dp1175
g39
Vy
stp1176
sasg2
Vx.__lt__(y) <==> x<y
p1177
sssVitemsize
p1178
(dp1179
g8
g1025
sg10
(dp1180
g9
(lp1181
g15
asssg319
(dp1182
g8
g321
sg10
(dp1183
g25
(lp1184
(dp1185
g2
VCreate a new memoryview object which references the given object.
p1186
sg33
((dp1187
g9
(lp1188
g329
asg39
g332
s(dp1189
g39
Vobject
p1190
stp1191
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p1192
sssV__enter__
p1193
(dp1194
g8
g23
sg10
(dp1195
g25
NsssVreadonly
p1196
(dp1197
g8
g1025
sg10
(dp1198
g9
(lp1199
g15
asssVrelease
p1200
(dp1201
g8
g23
sg10
(dp1202
g25
NsssVc_contiguous
p1203
(dp1204
g8
g1025
sg10
(dp1205
g9
(lp1206
g15
asssVsuboffsets
p1207
(dp1208
g8
g1025
sg10
(dp1209
g9
(lp1210
g15
asssg873
(dp1211
g8
g793
sg10
(dp1212
g9
(lp1213
g877
asssg497
(dp1214
g8
g23
sg10
(dp1215
g25
(lp1216
(dp1217
g2
V==> len(x)
p1218
sg33
((dp1219
g9
(lp1220
g36
asg39
g40
stp1221
sasg2
Vx.__len__() <==> len(x)
p1222
sssVnbytes
p1223
(dp1224
g8
g1025
sg10
(dp1225
g9
(lp1226
g15
asssg43
(dp1227
g8
g23
sg10
(dp1228
g25
(lp1229
(dp1230
g2
V==> x!=y
p1231
sg33
((dp1232
g9
(lp1233
g36
asg39
g40
s(dp1234
g39
Vy
stp1235
sasg2
Vx.__ne__(y) <==> x!=y
p1236
sssV__exit__
p1237
(dp1238
g8
g23
sg10
(dp1239
g25
Nsssg308
(dp1240
g8
g23
sg10
(dp1241
g25
(lp1242
(dp1243
g2
V==> x[y]
p1244
sg33
((dp1245
g9
(lp1246
g36
asg39
g40
s(dp1247
g39
Vy
stp1248
sasg2
Vx.__getitem__(y) <==> x[y]
p1249
sssVformat
p1250
(dp1251
g8
g1025
sg10
(dp1252
g9
(lp1253
g15
asssVstrides
p1254
(dp1255
g8
g1025
sg10
(dp1256
g9
(lp1257
g15
asssg848
(dp1258
g8
g23
sg10
(dp1259
g25
(lp1260
(dp1261
g2
V==> x[i]=y
p1262
sg33
((dp1263
g9
(lp1264
g36
asg39
g40
s(dp1265
g39
Vi
s(dp1266
g39
Vy
stp1267
sasg2
Vx.__setitem__(i, y) <==> x[i]=y
p1268
sssVtobytes
p1269
(dp1270
g8
g23
sg10
(dp1271
g25
Nsssg460
(dp1272
g8
g23
sg10
(dp1273
g25
(lp1274
(dp1275
g2
V==> x==y
p1276
sg33
((dp1277
g9
(lp1278
g36
asg39
g40
s(dp1279
g39
Vy
stp1280
sasg2
Vx.__eq__(y) <==> x==y
p1281
sssg769
(dp1282
g8
g23
sg10
(dp1283
g25
(lp1284
(dp1285
g2
V==> del x[y]
p1286
sg33
((dp1287
g9
(lp1288
g36
asg39
g40
s(dp1289
g39
Vy
stp1290
sasg2
Vx.__delitem__(y) <==> del x[y]
p1291
sssVobj
p1292
(dp1293
g8
g1025
sg10
(dp1294
g9
(lp1295
g15
asssVf_contiguous
p1296
(dp1297
g8
g1025
sg10
(dp1298
g9
(lp1299
g15
asssVcast
p1300
(dp1301
g8
g23
sg10
(dp1302
g25
Nsssg908
(dp1303
g8
g23
sg10
(dp1304
g25
(lp1305
(dp1306
g2
V==> x<=y
p1307
sg33
((dp1308
g9
(lp1309
g36
asg39
g40
s(dp1310
g39
Vy
stp1311
sasg2
Vx.__le__(y) <==> x<=y
p1312
sssg507
(dp1313
g8
g23
sg10
(dp1314
g25
(lp1315
(dp1316
g2
V==> repr(x)
p1317
sg33
((dp1318
g9
(lp1319
g36
asg39
g40
stp1320
sasg2
Vx.__repr__() <==> repr(x)
p1321
sssg930
(dp1322
g8
g23
sg10
(dp1323
g25
(lp1324
(dp1325
g2
V==> hash(x)
p1326
sg33
((dp1327
g9
(lp1328
g36
asg39
g40
stp1329
sasg2
Vx.__hash__() <==> hash(x)
p1330
sssg959
(dp1331
g8
g23
sg10
(dp1332
g25
(lp1333
(dp1334
g2
V==> x>=y
p1335
sg33
((dp1336
g9
(lp1337
g36
asg39
g40
s(dp1338
g39
Vy
stp1339
sasg2
Vx.__ge__(y) <==> x>=y
p1340
ssssg970
(lp1341
(dp1342
g16
Vbuiltins
p1343
sg18
Vmemoryview
p1344
sag15
asssVisinstance
p1345
(dp1346
g8
g321
sg10
(dp1347
g25
(lp1348
(dp1349
g28
(lp1350
g141
asg2
VReturn whether an object is an instance of a class or of a subclass thereof.\u000aWith a type as second argument, return whether that is the object's type.\u000aThe form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for\u000aisinstance(x, A) or isinstance(x, B) or ... (etc.).
p1351
sg33
((dp1352
g39
Vobject
p1353
s(dp1354
g39
Vclass-or-type-or-tuple
p1355
stp1356
sasg2
Visinstance(object, class-or-type-or-tuple) -> bool\u000a\u000aReturn whether an object is an instance of a class or of a subclass thereof.\u000aWith a type as second argument, return whether that is the object's type.\u000aThe form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for\u000aisinstance(x, A) or isinstance(x, B) or ... (etc.).
p1357
sssVstr_iterator
p1358
(dp1359
g8
g9
sg10
(dp1360
g13
(lp1361
g15
asVis_hidden
p1362
I01
sg970
(lp1363
(dp1364
g16
Vbuiltins
p1365
sg18
Vstr_iterator
p1366
sag15
asg4
(dp1367
V__next__
p1368
(dp1369
g8
g23
sg10
(dp1370
g25
(lp1371
(dp1372
g2
V==> next(x)
p1373
sg33
((dp1374
g9
(lp1375
g36
asg39
g40
stp1376
sasg2
Vx.__next__() <==> next(x)
p1377
sssg319
(dp1378
g8
g321
sg10
(dp1379
g25
(lp1380
(dp1381
g2
V
sg33
(lp1382
(dp1383
g275
V*
sg39
g33
sasasg2
V
sssV__setstate__
p1384
(dp1385
g8
g23
sg10
(dp1386
g25
Nsg2
VSet state information for unpickling.
p1387
sssV__length_hint__
p1388
(dp1389
g8
g23
sg10
(dp1390
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p1391
sssg82
(dp1392
g8
g23
sg10
(dp1393
g25
Nsg2
VReturn state information for pickling.
p1394
sssg621
(dp1395
g8
g23
sg10
(dp1396
g25
(lp1397
(dp1398
g2
V==> iter(x)
p1399
sg33
((dp1400
g9
(lp1401
g36
asg39
g40
stp1402
sasg2
Vx.__iter__() <==> iter(x)
p1403
sssg873
(dp1404
g8
g793
sg10
(dp1405
g9
(lp1406
g934
assssssV__build_class__
p1407
(dp1408
g8
g321
sg10
(dp1409
g25
(lp1410
(dp1411
g28
(lp1412
(dp1413
g18
Vclass
p1414
sasg2
VInternal helper function used by the class statement.
p1415
sg33
((dp1416
g39
Vfunc
p1417
s(dp1418
g39
Vname
p1419
s(dp1420
g275
V*
sg39
Vbases
p1421
s(dp1422
g67
VNone
p1423
sg39
Vmetaclass
p1424
s(dp1425
g275
V**
p1426
sg39
Vkwds
p1427
stp1428
sasg2
V__build_class__(func, name, *bases, metaclass=None, **kwds) -> class\u000a\u000aInternal helper function used by the class statement.
p1429
sssVset_iterator
p1430
(dp1431
g8
g9
sg10
(dp1432
g13
(lp1433
g15
asg1362
I01
sg970
(lp1434
(dp1435
g16
Vbuiltins
p1436
sg18
Vset_iterator
p1437
sag15
asg4
(dp1438
g1368
(dp1439
g8
g23
sg10
(dp1440
g25
(lp1441
(dp1442
g2
V==> next(x)
p1443
sg33
((dp1444
g9
(lp1445
g36
asg39
g40
stp1446
sasg2
Vx.__next__() <==> next(x)
p1447
sssg319
(dp1448
g8
g321
sg10
(dp1449
g25
(lp1450
(dp1451
g2
V
sg33
(lp1452
(dp1453
g275
V*
sg39
g33
sasasg2
V
sssg1388
(dp1454
g8
g23
sg10
(dp1455
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p1456
sssg82
(dp1457
g8
g23
sg10
(dp1458
g25
Nsg2
VReturn state information for pickling.
p1459
sssg621
(dp1460
g8
g23
sg10
(dp1461
g25
(lp1462
(dp1463
g2
V==> iter(x)
p1464
sg33
((dp1465
g9
(lp1466
g36
asg39
g40
stp1467
sasg2
Vx.__iter__() <==> iter(x)
p1468
sssg873
(dp1469
g8
g793
sg10
(dp1470
g9
(lp1471
g934
assssssVcopyright
p1472
(dp1473
g8
g793
sg10
(dp1474
g9
(lp1475
(dp1476
g16
g991
sg18
V_Printer
p1477
sasssVdict_items
p1478
(dp1479
g8
g9
sg10
(dp1480
g13
(lp1481
g15
asg1362
I01
sg970
(lp1482
(dp1483
g16
Vbuiltins
p1484
sg18
Vdict_items
p1485
sag15
asg4
(dp1486
V__ror__
p1487
(dp1488
g8
g23
sg10
(dp1489
g25
(lp1490
(dp1491
g2
V==> y|x
p1492
sg33
((dp1493
g9
(lp1494
g36
asg39
g40
s(dp1495
g39
Vy
stp1496
sasg2
Vx.__ror__(y) <==> y|x
p1497
sssV__rsub__
p1498
(dp1499
g8
g23
sg10
(dp1500
g25
(lp1501
(dp1502
g2
V==> y-x
p1503
sg33
((dp1504
g9
(lp1505
g36
asg39
g40
s(dp1506
g39
Vy
stp1507
sasg2
Vx.__rsub__(y) <==> y-x
p1508
sssV__and__
p1509
(dp1510
g8
g23
sg10
(dp1511
g25
(lp1512
(dp1513
g2
V==> x&y
p1514
sg33
((dp1515
g9
(lp1516
g36
asg39
g40
s(dp1517
g39
Vy
stp1518
sasg2
Vx.__and__(y) <==> x&y
p1519
sssg223
(dp1520
g8
g23
sg10
(dp1521
g25
(lp1522
(dp1523
g2
V==> x<y
p1524
sg33
((dp1525
g9
(lp1526
g36
asg39
g40
s(dp1527
g39
Vy
stp1528
sasg2
Vx.__lt__(y) <==> x<y
p1529
sssV__rand__
p1530
(dp1531
g8
g23
sg10
(dp1532
g25
(lp1533
(dp1534
g2
V==> y&x
p1535
sg33
((dp1536
g9
(lp1537
g36
asg39
g40
s(dp1538
g39
Vy
stp1539
sasg2
Vx.__rand__(y) <==> y&x
p1540
sssg319
(dp1541
g8
g321
sg10
(dp1542
g25
(lp1543
(dp1544
g2
V
sg33
(lp1545
(dp1546
g275
V*
sg39
g33
sasasg2
V
sssg361
(dp1547
g8
g23
sg10
(dp1548
g25
(lp1549
(dp1550
g2
V==> y in x
p1551
sg33
((dp1552
g9
(lp1553
g36
asg39
g40
s(dp1554
g39
Vy
stp1555
sasg2
Vx.__contains__(y) <==> y in x
p1556
sssg873
(dp1557
g8
g793
sg10
(dp1558
g9
(lp1559
g934
asssg497
(dp1560
g8
g23
sg10
(dp1561
g25
(lp1562
(dp1563
g2
V==> len(x)
p1564
sg33
((dp1565
g9
(lp1566
g36
asg39
g40
stp1567
sasg2
Vx.__len__() <==> len(x)
p1568
sssg43
(dp1569
g8
g23
sg10
(dp1570
g25
(lp1571
(dp1572
g2
V==> x!=y
p1573
sg33
((dp1574
g9
(lp1575
g36
asg39
g40
s(dp1576
g39
Vy
stp1577
sasg2
Vx.__ne__(y) <==> x!=y
p1578
sssg621
(dp1579
g8
g23
sg10
(dp1580
g25
(lp1581
(dp1582
g2
V==> iter(x)
p1583
sg33
((dp1584
g9
(lp1585
g36
asg39
g40
stp1586
sasg2
Vx.__iter__() <==> iter(x)
p1587
sssV__or__
p1588
(dp1589
g8
g23
sg10
(dp1590
g25
(lp1591
(dp1592
g2
V==> x|y
p1593
sg33
((dp1594
g9
(lp1595
g36
asg39
g40
s(dp1596
g39
Vy
stp1597
sasg2
Vx.__or__(y) <==> x|y
p1598
sssg677
(dp1599
g8
g23
sg10
(dp1600
g25
(lp1601
(dp1602
g2
V==> x>y
p1603
sg33
((dp1604
g9
(lp1605
g36
asg39
g40
s(dp1606
g39
Vy
stp1607
sasg2
Vx.__gt__(y) <==> x>y
p1608
sssg460
(dp1609
g8
g23
sg10
(dp1610
g25
(lp1611
(dp1612
g2
V==> x==y
p1613
sg33
((dp1614
g9
(lp1615
g36
asg39
g40
s(dp1616
g39
Vy
stp1617
sasg2
Vx.__eq__(y) <==> x==y
p1618
sssV__rxor__
p1619
(dp1620
g8
g23
sg10
(dp1621
g25
(lp1622
(dp1623
g2
V==> y^x
p1624
sg33
((dp1625
g9
(lp1626
g36
asg39
g40
s(dp1627
g39
Vy
stp1628
sasg2
Vx.__rxor__(y) <==> y^x
p1629
sssVisdisjoint
p1630
(dp1631
g8
g23
sg10
(dp1632
g25
Nsg2
VReturn True if the view and the given iterable have a null intersection.
p1633
sssV__xor__
p1634
(dp1635
g8
g23
sg10
(dp1636
g25
(lp1637
(dp1638
g2
V==> x^y
p1639
sg33
((dp1640
g9
(lp1641
g36
asg39
g40
s(dp1642
g39
Vy
stp1643
sasg2
Vx.__xor__(y) <==> x^y
p1644
sssg908
(dp1645
g8
g23
sg10
(dp1646
g25
(lp1647
(dp1648
g2
V==> x<=y
p1649
sg33
((dp1650
g9
(lp1651
g36
asg39
g40
s(dp1652
g39
Vy
stp1653
sasg2
Vx.__le__(y) <==> x<=y
p1654
sssg507
(dp1655
g8
g23
sg10
(dp1656
g25
(lp1657
(dp1658
g2
V==> repr(x)
p1659
sg33
((dp1660
g9
(lp1661
g36
asg39
g40
stp1662
sasg2
Vx.__repr__() <==> repr(x)
p1663
sssg930
(dp1664
g8
g793
sg10
(dp1665
g9
(lp1666
g934
asssV__sub__
p1667
(dp1668
g8
g23
sg10
(dp1669
g25
(lp1670
(dp1671
g2
V==> x-y
p1672
sg33
((dp1673
g9
(lp1674
g36
asg39
g40
s(dp1675
g39
Vy
stp1676
sasg2
Vx.__sub__(y) <==> x-y
p1677
sssg959
(dp1678
g8
g23
sg10
(dp1679
g25
(lp1680
(dp1681
g2
V==> x>=y
p1682
sg33
((dp1683
g9
(lp1684
g36
asg39
g40
s(dp1685
g39
Vy
stp1686
sasg2
Vx.__ge__(y) <==> x>=y
p1687
ssssssVNameError
p1688
(dp1689
g8
g9
sg10
(dp1690
g2
VName not found globally.
p1691
sg13
(lp1692
g1012
asg4
(dp1693
g319
(dp1694
g8
g321
sg10
(dp1695
g25
(lp1696
(dp1697
g2
VName not found globally.
p1698
sg33
(lp1699
(dp1700
g275
V*
sg39
g33
sasasg2
g1698
sssg266
(dp1701
g8
g23
sg10
(dp1702
g25
(lp1703
(dp1704
g2
Vinitializes x; see help(type(x)) for signature
p1705
sg33
((dp1706
g9
(lp1707
g36
asg39
g40
s(dp1708
g275
V*
sg39
g33
stp1709
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1710
sssg873
(dp1711
g8
g793
sg10
(dp1712
g9
(lp1713
g877
assssg970
(lp1714
(dp1715
g16
Vbuiltins
p1716
sg18
VNameError
p1717
sag1012
ag1080
ag15
asssVBlockingIOError
p1718
(dp1719
g8
g9
sg10
(dp1720
g2
VI/O operation would block.
p1721
sg13
(lp1722
g1116
asg4
(dp1723
g319
(dp1724
g8
g321
sg10
(dp1725
g25
(lp1726
(dp1727
g2
VI/O operation would block.
p1728
sg33
(lp1729
(dp1730
g275
V*
sg39
g33
sasasg2
g1728
sssg266
(dp1731
g8
g23
sg10
(dp1732
g25
(lp1733
(dp1734
g2
Vinitializes x; see help(type(x)) for signature
p1735
sg33
((dp1736
g9
(lp1737
g36
asg39
g40
s(dp1738
g275
V*
sg39
g33
stp1739
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1740
sssg873
(dp1741
g8
g793
sg10
(dp1742
g9
(lp1743
g877
assssg970
(lp1744
(dp1745
g16
Vbuiltins
p1746
sg18
VBlockingIOError
p1747
sag1116
ag1012
ag1080
ag15
asssVBytesWarning
p1748
(dp1749
g8
g9
sg10
(dp1750
g2
VBase class for warnings about bytes and buffer related problems, mostly\u000arelated to conversion from str or comparing to str.
p1751
sg13
(lp1752
(dp1753
g16
Vbuiltins
p1754
sg18
VWarning
p1755
sasg4
(dp1756
g319
(dp1757
g8
g321
sg10
(dp1758
g25
(lp1759
(dp1760
g2
VBase class for warnings about bytes and buffer related problems, mostly\u000arelated to conversion from str or comparing to str.
p1761
sg33
(lp1762
(dp1763
g275
V*
sg39
g33
sasasg2
g1761
sssg266
(dp1764
g8
g23
sg10
(dp1765
g25
(lp1766
(dp1767
g2
Vinitializes x; see help(type(x)) for signature
p1768
sg33
((dp1769
g9
(lp1770
g36
asg39
g40
s(dp1771
g275
V*
sg39
g33
stp1772
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1773
sssg873
(dp1774
g8
g793
sg10
(dp1775
g9
(lp1776
g877
assssg970
(lp1777
(dp1778
g16
Vbuiltins
p1779
sg18
VBytesWarning
p1780
sag1753
ag1012
ag1080
ag15
asssVdict
p1781
(dp1782
g8
g9
sg10
(dp1783
g2
Vdict() -> new empty dictionary\u000adict(mapping) -> new dictionary initialized from a mapping object's\u000a    (key, value) pairs\u000adict(iterable) -> new dictionary initialized as if via:\u000a    d = {}\u000a    for k, v in iterable:\u000a        d[k] = v\u000adict(**kwargs) -> new dictionary initialized with the name=value pairs\u000a    in the keyword argument list.  For example:  dict(one=1, two=2)
p1784
sg13
(lp1785
g15
asg4
(dp1786
Vpopitem
p1787
(dp1788
g8
g23
sg10
(dp1789
g25
(lp1790
(dp1791
g28
(lp1792
g840
asg2
V(k, v), remove and return some (key, value) pair as a\u000a2-tuple; but raise KeyError if D is empty.
p1793
sg33
((dp1794
g9
(lp1795
g36
asg39
g40
stp1796
sasg2
VD.popitem() -> (k, v), remove and return some (key, value) pair as a\u000a2-tuple; but raise KeyError if D is empty.
p1797
sssg102
(dp1798
g8
g23
sg10
(dp1799
g25
(lp1800
(dp1801
g28
(lp1802
g840
asg2
Vv, remove specified key and return the corresponding value.\u000aIf key is not found, d is returned if given, otherwise KeyError is raised
p1803
sg33
((dp1804
g9
(lp1805
g36
asg39
g40
s(dp1806
g39
Vk
s(dp1807
g67
g68
sg39
Vd
stp1808
sasg2
VD.pop(k[,d]) -> v, remove specified key and return the corresponding value.\u000aIf key is not found, d is returned if given, otherwise KeyError is raised
p1809
sssg223
(dp1810
g8
g23
sg10
(dp1811
g25
(lp1812
(dp1813
g2
V==> x<y
p1814
sg33
((dp1815
g9
(lp1816
g36
asg39
g40
s(dp1817
g39
Vy
stp1818
sasg2
Vx.__lt__(y) <==> x<y
p1819
sssg726
(dp1820
g8
g23
sg10
(dp1821
g25
(lp1822
(dp1823
g28
(lp1824
g840
asg2
Vsize of D in memory, in bytes
p1825
sg33
((dp1826
g9
(lp1827
g36
asg39
g40
stp1828
sasg2
VD.__sizeof__() -> size of D in memory, in bytes
p1829
sssg266
(dp1830
g8
g23
sg10
(dp1831
g25
(lp1832
(dp1833
g2
Vinitializes x; see help(type(x)) for signature
p1834
sg33
((dp1835
g9
(lp1836
g36
asg39
g40
s(dp1837
g275
V*
sg39
g33
stp1838
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p1839
sssg319
(dp1840
g8
g321
sg10
(dp1841
g25
(lp1842
(dp1843
g28
(lp1844
g1125
asg2
V(key, value) pairs\u000adict(iterable) -> new dictionary initialized as if via:\u000a    d = {}\u000a    for k, v in iterable:\u000a        d[k] = v\u000adict(**kwargs) -> new dictionary initialized with the name=value pairs\u000a    in the keyword argument list.  For example:  dict(one=1, two=2)
p1845
sg33
((dp1846
g9
(lp1847
g329
asg39
g332
stp1848
sa(dp1849
g28
(lp1850
g1125
asg2
g1845
sg33
(g1846
(dp1851
g39
Vmapping
p1852
stp1853
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p1854
sssg361
(dp1855
g8
g23
sg10
(dp1856
g25
(lp1857
(dp1858
g28
(lp1859
g840
asg2
VTrue if D has a key k, else False
p1860
sg33
((dp1861
g9
(lp1862
g36
asg39
g40
s(dp1863
g39
Vk
stp1864
sasg2
VD.__contains__(k) -> True if D has a key k, else False
p1865
sssg873
(dp1866
g8
g793
sg10
(dp1867
g9
(lp1868
g877
asssg497
(dp1869
g8
g23
sg10
(dp1870
g25
(lp1871
(dp1872
g2
V==> len(x)
p1873
sg33
((dp1874
g9
(lp1875
g36
asg39
g40
stp1876
sasg2
Vx.__len__() <==> len(x)
p1877
sssg43
(dp1878
g8
g23
sg10
(dp1879
g25
(lp1880
(dp1881
g2
V==> x!=y
p1882
sg33
((dp1883
g9
(lp1884
g36
asg39
g40
s(dp1885
g39
Vy
stp1886
sasg2
Vx.__ne__(y) <==> x!=y
p1887
sssg308
(dp1888
g8
g23
sg10
(dp1889
g25
(lp1890
(dp1891
g2
V==> x[y]
p1892
sg33
((dp1893
g9
(lp1894
g36
asg39
g40
s(dp1895
g39
Vy
stp1896
sasg2
Vx.__getitem__(y) <==> x[y]
p1897
sssVget
p1898
(dp1899
g8
g23
sg10
(dp1900
g25
(lp1901
(dp1902
g28
(lp1903
(dp1904
g18
VD
sasg2
V[k] if k in D, else d.  d defaults to None.
p1905
sg33
((dp1906
g9
(lp1907
g36
asg39
g40
s(dp1908
g39
Vk
s(dp1909
g67
g68
sg39
Vd
stp1910
sasg2
VD.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
p1911
sssVkeys
p1912
(dp1913
g8
g23
sg10
(dp1914
g25
(lp1915
(dp1916
g28
(lp1917
(dp1918
g18
Va
sasg2
V
sg33
((dp1919
g9
(lp1920
g36
asg39
g40
stp1921
sasg2
VD.keys() -> a set-like object providing a view on D's keys
p1922
sssVupdate
p1923
(dp1924
g8
g23
sg10
(dp1925
g25
(lp1926
(dp1927
g28
(lp1928
g92
asg2
V.  Update D from dict/iterable E and F.\u000aIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\u000aIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\u000aIn either case, this is followed by: for k in F: D[k] = F[k]
p1929
sg33
((dp1930
g9
(lp1931
g36
asg39
g40
s(dp1932
g67
g68
sg39
VE
s(dp1933
g39
V]
s(dp1934
g275
g1426
sg39
VF
stp1935
sasg2
VD.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\u000aIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\u000aIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\u000aIn either case, this is followed by: for k in F: D[k] = F[k]
p1936
sssg848
(dp1937
g8
g23
sg10
(dp1938
g25
(lp1939
(dp1940
g2
V==> x[i]=y
p1941
sg33
((dp1942
g9
(lp1943
g36
asg39
g40
s(dp1944
g39
Vi
s(dp1945
g39
Vy
stp1946
sasg2
Vx.__setitem__(i, y) <==> x[i]=y
p1947
sssg677
(dp1948
g8
g23
sg10
(dp1949
g25
(lp1950
(dp1951
g2
V==> x>y
p1952
sg33
((dp1953
g9
(lp1954
g36
asg39
g40
s(dp1955
g39
Vy
stp1956
sasg2
Vx.__gt__(y) <==> x>y
p1957
sssg699
(dp1958
g8
g23
sg10
(dp1959
g25
(lp1960
(dp1961
g28
(lp1962
g1918
asg2
V
sg33
((dp1963
g9
(lp1964
g36
asg39
g40
stp1965
sasg2
VD.copy() -> a shallow copy of D
p1966
sssg460
(dp1967
g8
g23
sg10
(dp1968
g25
(lp1969
(dp1970
g2
V==> x==y
p1971
sg33
((dp1972
g9
(lp1973
g36
asg39
g40
s(dp1974
g39
Vy
stp1975
sasg2
Vx.__eq__(y) <==> x==y
p1976
sssg769
(dp1977
g8
g23
sg10
(dp1978
g25
(lp1979
(dp1980
g2
V==> del x[y]
p1981
sg33
((dp1982
g9
(lp1983
g36
asg39
g40
s(dp1984
g39
Vy
stp1985
sasg2
Vx.__delitem__(y) <==> del x[y]
p1986
sssVfromkeys
p1987
(dp1988
g8
g321
sg10
(dp1989
g25
(lp1990
(dp1991
g28
(lp1992
(dp1993
g18
VNew
p1994
sasg2
V.\u000av defaults to None.
p1995
sg33
((dp1996
g39
VS
s(dp1997
g67
g68
sg39
Vv
stp1998
sasg2
Vdict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.\u000av defaults to None.
p1999
sssVsetdefault
p2000
(dp2001
g8
g23
sg10
(dp2002
g25
(lp2003
(dp2004
g28
(lp2005
g1904
asg2
V.get(k,d), also set D[k]=d if k not in D
p2006
sg33
((dp2007
g9
(lp2008
g36
asg39
g40
s(dp2009
g39
Vk
s(dp2010
g67
g68
sg39
Vd
stp2011
sasg2
VD.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
p2012
sssVitems
p2013
(dp2014
g8
g23
sg10
(dp2015
g25
(lp2016
(dp2017
g28
(lp2018
g1918
asg2
V
sg33
((dp2019
g9
(lp2020
g36
asg39
g40
stp2021
sasg2
VD.items() -> a set-like object providing a view on D's items
p2022
sssg823
(dp2023
g8
g23
sg10
(dp2024
g25
(lp2025
(dp2026
g28
(lp2027
g92
asg2
V.  Remove all items from D.
p2028
sg33
((dp2029
g9
(lp2030
g36
asg39
g40
stp2031
sasg2
VD.clear() -> None.  Remove all items from D.
p2032
sssg621
(dp2033
g8
g23
sg10
(dp2034
g25
(lp2035
(dp2036
g2
V==> iter(x)
p2037
sg33
((dp2038
g9
(lp2039
g36
asg39
g40
stp2040
sasg2
Vx.__iter__() <==> iter(x)
p2041
sssg908
(dp2042
g8
g23
sg10
(dp2043
g25
(lp2044
(dp2045
g2
V==> x<=y
p2046
sg33
((dp2047
g9
(lp2048
g36
asg39
g40
s(dp2049
g39
Vy
stp2050
sasg2
Vx.__le__(y) <==> x<=y
p2051
sssVvalues
p2052
(dp2053
g8
g23
sg10
(dp2054
g25
(lp2055
(dp2056
g28
(lp2057
(dp2058
g18
Van
p2059
sasg2
V
sg33
((dp2060
g9
(lp2061
g36
asg39
g40
stp2062
sasg2
VD.values() -> an object providing a view on D's values
p2063
sssg507
(dp2064
g8
g23
sg10
(dp2065
g25
(lp2066
(dp2067
g2
V==> repr(x)
p2068
sg33
((dp2069
g9
(lp2070
g36
asg39
g40
stp2071
sasg2
Vx.__repr__() <==> repr(x)
p2072
sssg930
(dp2073
g8
g793
sg10
(dp2074
g9
(lp2075
g934
asssg959
(dp2076
g8
g23
sg10
(dp2077
g25
(lp2078
(dp2079
g2
V==> x>=y
p2080
sg33
((dp2081
g9
(lp2082
g36
asg39
g40
s(dp2083
g39
Vy
stp2084
sasg2
Vx.__ge__(y) <==> x>=y
p2085
ssssg970
(lp2086
(dp2087
g16
Vbuiltins
p2088
sg18
Vdict
p2089
sag15
asssVConnectionResetError
p2090
(dp2091
g8
g9
sg10
(dp2092
g2
VConnection reset.
p2093
sg13
(lp2094
g1088
asg4
(dp2095
g319
(dp2096
g8
g321
sg10
(dp2097
g25
(lp2098
(dp2099
g2
VConnection reset.
p2100
sg33
(lp2101
(dp2102
g275
V*
sg39
g33
sasasg2
g2100
sssg266
(dp2103
g8
g23
sg10
(dp2104
g25
(lp2105
(dp2106
g2
Vinitializes x; see help(type(x)) for signature
p2107
sg33
((dp2108
g9
(lp2109
g36
asg39
g40
s(dp2110
g275
V*
sg39
g33
stp2111
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2112
sssg873
(dp2113
g8
g793
sg10
(dp2114
g9
(lp2115
g877
assssg970
(lp2116
(dp2117
g16
Vbuiltins
p2118
sg18
VConnectionResetError
p2119
sag1088
ag1116
ag1012
ag1080
ag15
asssVIOError
p2120
(dp2121
g8
g9
sg10
(dp2122
g2
VBase class for I/O related errors.
p2123
sg13
(lp2124
g1012
asg4
(dp2125
Vwinerror
p2126
(dp2127
g8
g1025
sg10
(dp2128
g2
VWin32 exception code
p2129
sg9
(lp2130
g15
asssg319
(dp2131
g8
g321
sg10
(dp2132
g25
(lp2133
(dp2134
g2
VBase class for I/O related errors.
p2135
sg33
(lp2136
(dp2137
g275
V*
sg39
g33
sasasg2
g2135
sssVcharacters_written
p2138
(dp2139
g8
g1025
sg10
(dp2140
g9
(lp2141
g15
asssVerrno
p2142
(dp2143
g8
g1025
sg10
(dp2144
g2
VPOSIX exception code
p2145
sg9
(lp2146
g15
asssg72
(dp2147
g8
g23
sg10
(dp2148
g25
(lp2149
(dp2150
g2
V==> str(x)
p2151
sg33
((dp2152
g9
(lp2153
g36
asg39
g40
stp2154
sasg2
Vx.__str__() <==> str(x)
p2155
sssg82
(dp2156
g8
g23
sg10
(dp2157
g25
NsssVstrerror
p2158
(dp2159
g8
g1025
sg10
(dp2160
g2
Vexception strerror
p2161
sg9
(lp2162
g15
asssg1034
(dp2163
g8
g1025
sg10
(dp2164
g2
Vexception filename
p2165
sg9
(lp2166
g15
asssg873
(dp2167
g8
g793
sg10
(dp2168
g9
(lp2169
g877
asssg266
(dp2170
g8
g23
sg10
(dp2171
g25
(lp2172
(dp2173
g2
Vinitializes x; see help(type(x)) for signature
p2174
sg33
((dp2175
g9
(lp2176
g36
asg39
g40
s(dp2177
g275
V*
sg39
g33
stp2178
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2179
ssssg970
(lp2180
g1116
ag1012
ag1080
ag15
asssVoct
p2181
(dp2182
g8
g321
sg10
(dp2183
g25
(lp2184
(dp2185
g28
(lp2186
g406
asg2
VReturn the octal representation of an integer.
p2187
sg33
((dp2188
g39
Vnumber
p2189
stp2190
sasg2
Voct(number) -> string\u000a\u000aReturn the octal representation of an integer.
p2191
sssVbin
p2192
(dp2193
g8
g321
sg10
(dp2194
g25
(lp2195
(dp2196
g28
(lp2197
g406
asg2
VReturn the binary representation of an integer.
p2198
sg33
((dp2199
g39
Vnumber
p2200
stp2201
sasg2
Vbin(number) -> string\u000a\u000aReturn the binary representation of an integer.
p2202
sssVSystemExit
p2203
(dp2204
g8
g9
sg10
(dp2205
g2
VRequest to exit from the interpreter.
p2206
sg13
(lp2207
g1080
asg4
(dp2208
Vcode
p2209
(dp2210
g8
g1025
sg10
(dp2211
g2
Vexception code
p2212
sg9
(lp2213
g15
asssg873
(dp2214
g8
g793
sg10
(dp2215
g9
(lp2216
g877
asssg266
(dp2217
g8
g23
sg10
(dp2218
g25
(lp2219
(dp2220
g2
Vinitializes x; see help(type(x)) for signature
p2221
sg33
((dp2222
g9
(lp2223
g36
asg39
g40
s(dp2224
g275
V*
sg39
g33
stp2225
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2226
sssg319
(dp2227
g8
g321
sg10
(dp2228
g25
(lp2229
(dp2230
g2
VRequest to exit from the interpreter.
p2231
sg33
(lp2232
(dp2233
g275
V*
sg39
g33
sasasg2
g2231
ssssg970
(lp2234
(dp2235
g16
Vbuiltins
p2236
sg18
VSystemExit
p2237
sag1080
ag15
asssg1250
(dp2238
g8
g321
sg10
(dp2239
g25
(lp2240
(dp2241
g28
(lp2242
g406
asg2
VReturns value.__format__(format_spec)\u000aformat_spec defaults to ""
p2243
sg33
((dp2244
g39
Vvalue
p2245
s(dp2246
g67
g68
sg39
Vformat_spec
p2247
stp2248
sasg2
Vformat(value[, format_spec]) -> string\u000a\u000aReturns value.__format__(format_spec)\u000aformat_spec defaults to ""
p2249
sssVTabError
p2250
(dp2251
g8
g9
sg10
(dp2252
g2
VImproper mixture of spaces and tabs.
p2253
sg13
(lp2254
(dp2255
g16
Vbuiltins
p2256
sg18
VIndentationError
p2257
sasg4
(dp2258
g319
(dp2259
g8
g321
sg10
(dp2260
g25
(lp2261
(dp2262
g2
VImproper mixture of spaces and tabs.
p2263
sg33
(lp2264
(dp2265
g275
V*
sg39
g33
sasasg2
g2263
sssg266
(dp2266
g8
g23
sg10
(dp2267
g25
(lp2268
(dp2269
g2
Vinitializes x; see help(type(x)) for signature
p2270
sg33
((dp2271
g9
(lp2272
g36
asg39
g40
s(dp2273
g275
V*
sg39
g33
stp2274
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2275
sssg873
(dp2276
g8
g793
sg10
(dp2277
g9
(lp2278
g877
assssg970
(lp2279
(dp2280
g16
Vbuiltins
p2281
sg18
VTabError
p2282
sag2255
ag1077
ag1012
ag1080
ag15
asssVnext
p2283
(dp2284
g8
g321
sg10
(dp2285
g25
(lp2286
(dp2287
g2
VReturn the next item from the iterator. If default is given and the iterator\u000ais exhausted, it is returned instead of raising StopIteration.
p2288
sg33
((dp2289
g39
Viterator
p2290
s(dp2291
g67
g68
sg39
Vdefault
p2292
stp2293
sasg2
Vnext(iterator[, default])\u000a\u000aReturn the next item from the iterator. If default is given and the iterator\u000ais exhausted, it is returned instead of raising StopIteration.
p2294
sssVcallable_iterator
p2295
(dp2296
g8
g9
sg10
(dp2297
g13
(lp2298
g15
asg1362
I01
sg970
(lp2299
(dp2300
g16
Vbuiltins
p2301
sg18
Vcallable_iterator
p2302
sag15
asg4
(dp2303
g621
(dp2304
g8
g23
sg10
(dp2305
g25
(lp2306
(dp2307
g2
V==> iter(x)
p2308
sg33
((dp2309
g9
(lp2310
g36
asg39
g40
stp2311
sasg2
Vx.__iter__() <==> iter(x)
p2312
sssg1368
(dp2313
g8
g23
sg10
(dp2314
g25
(lp2315
(dp2316
g2
V==> next(x)
p2317
sg33
((dp2318
g9
(lp2319
g36
asg39
g40
stp2320
sasg2
Vx.__next__() <==> next(x)
p2321
sssg82
(dp2322
g8
g23
sg10
(dp2323
g25
Nsg2
VReturn state information for pickling.
p2324
sssg873
(dp2325
g8
g793
sg10
(dp2326
g9
(lp2327
g934
asssg319
(dp2328
g8
g321
sg10
(dp2329
g25
(lp2330
(dp2331
g2
V
sg33
(lp2332
(dp2333
g275
V*
sg39
g33
sasasg2
V
ssssssVbuiltin_function
p2334
(dp2335
g8
g9
sg10
(dp2336
g13
(lp2337
g15
asg1362
I01
sg970
(lp2338
(dp2339
g16
Vbuiltins
p2340
sg18
Vbuiltin_function_or_method
p2341
sag15
asg4
(dp2342
g43
(dp2343
g8
g23
sg10
(dp2344
g25
(lp2345
(dp2346
g2
V==> x!=y
p2347
sg33
((dp2348
g9
(lp2349
g36
asg39
g40
s(dp2350
g39
Vy
stp2351
sasg2
Vx.__ne__(y) <==> x!=y
p2352
sssV__module__
p2353
(dp2354
g8
g1025
sg10
(dp2355
g9
(lp2356
g15
asssg319
(dp2357
g8
g321
sg10
(dp2358
g25
(lp2359
(dp2360
g2
V
sg33
(lp2361
(dp2362
g275
V*
sg39
g33
sasasg2
V
sssV__self__
p2363
(dp2364
g8
g1025
sg10
(dp2365
g9
(lp2366
g15
asssV__qualname__
p2367
(dp2368
g8
g1025
sg10
(dp2369
g9
(lp2370
g15
asssV__call__
p2371
(dp2372
g8
g23
sg10
(dp2373
g25
(lp2374
(dp2375
g2
V==> x(...)
p2376
sg33
((dp2377
g9
(lp2378
g36
asg39
g40
s(dp2379
g275
V*
sg39
g33
stp2380
sasg2
Vx.__call__(...) <==> x(...)
p2381
sssg908
(dp2382
g8
g23
sg10
(dp2383
g25
(lp2384
(dp2385
g2
V==> x<=y
p2386
sg33
((dp2387
g9
(lp2388
g36
asg39
g40
s(dp2389
g39
Vy
stp2390
sasg2
Vx.__le__(y) <==> x<=y
p2391
sssg507
(dp2392
g8
g23
sg10
(dp2393
g25
(lp2394
(dp2395
g2
V==> repr(x)
p2396
sg33
((dp2397
g9
(lp2398
g36
asg39
g40
stp2399
sasg2
Vx.__repr__() <==> repr(x)
p2400
sssg677
(dp2401
g8
g23
sg10
(dp2402
g25
(lp2403
(dp2404
g2
V==> x>y
p2405
sg33
((dp2406
g9
(lp2407
g36
asg39
g40
s(dp2408
g39
Vy
stp2409
sasg2
Vx.__gt__(y) <==> x>y
p2410
sssg930
(dp2411
g8
g23
sg10
(dp2412
g25
(lp2413
(dp2414
g2
V==> hash(x)
p2415
sg33
((dp2416
g9
(lp2417
g36
asg39
g40
stp2418
sasg2
Vx.__hash__() <==> hash(x)
p2419
sssV__name__
p2420
(dp2421
g8
g1025
sg10
(dp2422
g9
(lp2423
g15
asssg223
(dp2424
g8
g23
sg10
(dp2425
g25
(lp2426
(dp2427
g2
V==> x<y
p2428
sg33
((dp2429
g9
(lp2430
g36
asg39
g40
s(dp2431
g39
Vy
stp2432
sasg2
Vx.__lt__(y) <==> x<y
p2433
sssg460
(dp2434
g8
g23
sg10
(dp2435
g25
(lp2436
(dp2437
g2
V==> x==y
p2438
sg33
((dp2439
g9
(lp2440
g36
asg39
g40
s(dp2441
g39
Vy
stp2442
sasg2
Vx.__eq__(y) <==> x==y
p2443
sssg873
(dp2444
g8
g1025
sg10
(dp2445
g9
(lp2446
g15
asssg959
(dp2447
g8
g23
sg10
(dp2448
g25
(lp2449
(dp2450
g2
V==> x>=y
p2451
sg33
((dp2452
g9
(lp2453
g36
asg39
g40
s(dp2454
g39
Vy
stp2455
sasg2
Vx.__ge__(y) <==> x>=y
p2456
ssssssVFalse
p2457
(dp2458
g8
g793
sg10
(dp2459
g9
(lp2460
(dp2461
g16
Vbuiltins
p2462
sg18
Vbool
p2463
sasssVStopIteration
p2464
(dp2465
g8
g9
sg10
(dp2466
g2
VSignal the end from iterator.__next__().
p2467
sg13
(lp2468
g1012
asg4
(dp2469
g10
(dp2470
g8
g1025
sg10
(dp2471
g2
Vgenerator return value
p2472
sg9
(lp2473
g15
asssg319
(dp2474
g8
g321
sg10
(dp2475
g25
(lp2476
(dp2477
g2
VSignal the end from iterator.__next__().
p2478
sg33
(lp2479
(dp2480
g275
V*
sg39
g33
sasasg2
g2478
sssg266
(dp2481
g8
g23
sg10
(dp2482
g25
(lp2483
(dp2484
g2
Vinitializes x; see help(type(x)) for signature
p2485
sg33
((dp2486
g9
(lp2487
g36
asg39
g40
s(dp2488
g275
V*
sg39
g33
stp2489
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2490
sssg873
(dp2491
g8
g793
sg10
(dp2492
g9
(lp2493
g877
assssg970
(lp2494
(dp2495
g16
Vbuiltins
p2496
sg18
VStopIteration
p2497
sag1012
ag1080
ag15
asssVIndexError
p2498
(dp2499
g8
g9
sg10
(dp2500
g2
VSequence index out of range.
p2501
sg13
(lp2502
(dp2503
g16
Vbuiltins
p2504
sg18
VLookupError
p2505
sasg4
(dp2506
g319
(dp2507
g8
g321
sg10
(dp2508
g25
(lp2509
(dp2510
g2
VSequence index out of range.
p2511
sg33
(lp2512
(dp2513
g275
V*
sg39
g33
sasasg2
g2511
sssg266
(dp2514
g8
g23
sg10
(dp2515
g25
(lp2516
(dp2517
g2
Vinitializes x; see help(type(x)) for signature
p2518
sg33
((dp2519
g9
(lp2520
g36
asg39
g40
s(dp2521
g275
V*
sg39
g33
stp2522
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2523
sssg873
(dp2524
g8
g793
sg10
(dp2525
g9
(lp2526
g877
assssg970
(lp2527
(dp2528
g16
Vbuiltins
p2529
sg18
VIndexError
p2530
sag2503
ag1012
ag1080
ag15
asssVRuntimeWarning
p2531
(dp2532
g8
g9
sg10
(dp2533
g2
VBase class for warnings about dubious runtime behavior.
p2534
sg13
(lp2535
g1753
asg4
(dp2536
g319
(dp2537
g8
g321
sg10
(dp2538
g25
(lp2539
(dp2540
g2
VBase class for warnings about dubious runtime behavior.
p2541
sg33
(lp2542
(dp2543
g275
V*
sg39
g33
sasasg2
g2541
sssg266
(dp2544
g8
g23
sg10
(dp2545
g25
(lp2546
(dp2547
g2
Vinitializes x; see help(type(x)) for signature
p2548
sg33
((dp2549
g9
(lp2550
g36
asg39
g40
s(dp2551
g275
V*
sg39
g33
stp2552
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p2553
sssg873
(dp2554
g8
g793
sg10
(dp2555
g9
(lp2556
g877
assssg970
(lp2557
(dp2558
g16
Vbuiltins
p2559
sg18
VRuntimeWarning
p2560
sag1753
ag1012
ag1080
ag15
asssVbytes
p2561
(dp2562
g8
g9
sg10
(dp2563
g2
Vbytes(iterable_of_ints) -> bytes\u000abytes(string, encoding[, errors]) -> bytes\u000abytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\u000abytes(int) -> bytes object of size given by the parameter initialized with null bytes\u000abytes() -> empty bytes object\u000a\u000aConstruct an immutable array of bytes from:\u000a  - an iterable yielding integers in range(256)\u000a  - a text string encoded using the specified encoding\u000a  - any object implementing the buffer API.\u000a  - an integer
p2564
sg13
(lp2565
g15
asg4
(dp2566
g21
(dp2567
g8
g23
sg10
(dp2568
g25
(lp2569
(dp2570
g28
(lp2571
g30
asg2
VReturn a copy of B with all ASCII characters converted to uppercase.
p2572
sg33
((dp2573
g9
(lp2574
g36
asg39
g40
stp2575
sasg2
VB.upper() -> copy of B\u000a\u000aReturn a copy of B with all ASCII characters converted to uppercase.
p2576
sssg43
(dp2577
g8
g23
sg10
(dp2578
g25
(lp2579
(dp2580
g2
V==> x!=y
p2581
sg33
((dp2582
g9
(lp2583
g36
asg39
g40
s(dp2584
g39
Vy
stp2585
sasg2
Vx.__ne__(y) <==> x!=y
p2586
sssg54
(dp2587
g8
g23
sg10
(dp2588
g25
(lp2589
(dp2590
g28
(lp2591
g354
asg2
VStrip leading bytes contained in the argument.\u000aIf the argument is omitted, strip leading ASCII whitespace.
p2592
sg33
((dp2593
g9
(lp2594
g36
asg39
g40
s(dp2595
g67
g68
sg39
Vbytes
p2596
stp2597
sasg2
VB.lstrip([bytes]) -> bytes\u000a\u000aStrip leading bytes contained in the argument.\u000aIf the argument is omitted, strip leading ASCII whitespace.
p2598
sssg919
(dp2599
g8
g23
sg10
(dp2600
g25
(lp2601
(dp2602
g2
V==> x*n
p2603
sg33
((dp2604
g9
(lp2605
g36
asg39
g40
s(dp2606
g39
Vn
stp2607
sasg2
Vx.__mul__(n) <==> x*n
p2608
sssg72
(dp2609
g8
g23
sg10
(dp2610
g25
(lp2611
(dp2612
g2
V==> str(x)
p2613
sg33
((dp2614
g9
(lp2615
g36
asg39
g40
stp2616
sasg2
Vx.__str__() <==> str(x)
p2617
sssg880
(dp2618
g8
g23
sg10
(dp2619
g25
(lp2620
(dp2621
g28
(lp2622
g840
asg2
V(head, sep, tail)\u000a\u000aSearch for the separator sep in B, starting at the end of B,\u000aand return the part before it, the separator itself, and the\u000apart after it.  If the separator is not found, returns two empty\u000abytes objects and B.
p2623
sg33
((dp2624
g9
(lp2625
g36
asg39
g40
s(dp2626
g39
Vsep
p2627
stp2628
sasg2
VB.rpartition(sep) -> (head, sep, tail)\u000a\u000aSearch for the separator sep in B, starting at the end of B,\u000aand return the part before it, the separator itself, and the\u000apart after it.  If the separator is not found, returns two empty\u000abytes objects and B.
p2629
sssg118
(dp2630
g8
g23
sg10
(dp2631
g25
(lp2632
(dp2633
g28
(lp2634
g354
asg2
VReturn a copy of B with all occurrences of subsection\u000aold replaced by new.  If the optional argument count is\u000agiven, only first count occurances are replaced.
p2635
sg33
((dp2636
g9
(lp2637
g36
asg39
g40
s(dp2638
g39
Vold
p2639
s(dp2640
g39
Vnew
p2641
s(dp2642
g67
g68
sg39
Vcount
p2643
stp2644
sasg2
VB.replace(old, new[, count]) -> bytes\u000a\u000aReturn a copy of B with all occurrences of subsection\u000aold replaced by new.  If the optional argument count is\u000agiven, only first count occurances are replaced.
p2645
sssg135
(dp2646
g8
g23
sg10
(dp2647
g25
(lp2648
(dp2649
g28
(lp2650
g141
asg2
VReturn True if all characters in B are digits\u000aand there is at least one character in B, False otherwise.
p2651
sg33
((dp2652
g9
(lp2653
g36
asg39
g40
stp2654
sasg2
VB.isdigit() -> bool\u000a\u000aReturn True if all characters in B are digits\u000aand there is at least one character in B, False otherwise.
p2655
sssg149
(dp2656
g8
g23
sg10
(dp2657
g25
(lp2658
(dp2659
g28
(lp2660
g141
asg2
VReturn True if B ends with the specified suffix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000asuffix can also be a tuple of bytes to try.
p2661
sg33
((dp2662
g9
(lp2663
g36
asg39
g40
s(dp2664
g39
Vsuffix
p2665
s(dp2666
g67
g68
sg39
Vstart
p2667
s(dp2668
g67
g68
sg39
Vend
p2669
stp2670
sasg2
VB.endswith(suffix[, start[, end]]) -> bool\u000a\u000aReturn True if B ends with the specified suffix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000asuffix can also be a tuple of bytes to try.
p2671
sssg166
(dp2672
g8
g23
sg10
(dp2673
g25
(lp2674
(dp2675
g28
(lp2676
g172
asg2
VReturn a list of the lines in B, breaking at line boundaries.\u000aLine breaks are not included in the resulting list unless keepends\u000ais given and true.
p2677
sg33
((dp2678
g9
(lp2679
g36
asg39
g40
s(dp2680
g67
g68
sg39
Vkeepends
p2681
stp2682
sasg2
VB.splitlines([keepends]) -> list of lines\u000a\u000aReturn a list of the lines in B, breaking at line boundaries.\u000aLine breaks are not included in the resulting list unless keepends\u000ais given and true.
p2683
sssg182
(dp2684
g8
g23
sg10
(dp2685
g25
(lp2686
(dp2687
g28
(lp2688
g108
asg2
VReturn the highest index in B where substring sub is found,\u000asuch that sub is contained within B[start:end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p2689
sg33
((dp2690
g9
(lp2691
g36
asg39
g40
s(dp2692
g39
Vsub
p2693
s(dp2694
g67
g68
sg39
Vstart
p2695
s(dp2696
g67
g68
sg39
Vend
p2697
stp2698
sasg2
VB.rfind(sub[, start[, end]]) -> int\u000a\u000aReturn the highest index in B where substring sub is found,\u000asuch that sub is contained within B[start:end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p2699
sssg199
(dp2700
g8
g23
sg10
(dp2701
g25
(lp2702
(dp2703
g28
(lp2704
g354
asg2
VStrip leading and trailing bytes contained in the argument.\u000aIf the argument is omitted, strip leading and trailing ASCII whitespace.
p2705
sg33
((dp2706
g9
(lp2707
g36
asg39
g40
s(dp2708
g67
g68
sg39
Vbytes
p2709
stp2710
sasg2
VB.strip([bytes]) -> bytes\u000a\u000aStrip leading and trailing bytes contained in the argument.\u000aIf the argument is omitted, strip leading and trailing ASCII whitespace.
p2711
sssg212
(dp2712
g8
g23
sg10
(dp2713
g25
(lp2714
(dp2715
g2
V==> n*x
p2716
sg33
((dp2717
g9
(lp2718
g36
asg39
g40
s(dp2719
g39
Vn
stp2720
sasg2
Vx.__rmul__(n) <==> n*x
p2721
sssg223
(dp2722
g8
g23
sg10
(dp2723
g25
(lp2724
(dp2725
g2
V==> x<y
p2726
sg33
((dp2727
g9
(lp2728
g36
asg39
g40
s(dp2729
g39
Vy
stp2730
sasg2
Vx.__lt__(y) <==> x<y
p2731
sssV__getnewargs__
p2732
(dp2733
g8
g23
sg10
(dp2734
g25
Nsssg726
(dp2735
g8
g23
sg10
(dp2736
g25
(lp2737
(dp2738
g28
(lp2739
g840
asg2
Vsize of B in memory, in bytes
p2740
sg33
((dp2741
g9
(lp2742
g36
asg39
g40
stp2743
sasg2
VB.__sizeof__() -> size of B in memory, in bytes
p2744
sssg278
(dp2745
g8
g23
sg10
(dp2746
g25
(lp2747
(dp2748
g28
(lp2749
g30
asg2
VReturn B right justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space)
p2750
sg33
((dp2751
g9
(lp2752
g36
asg39
g40
s(dp2753
g39
Vwidth
p2754
s(dp2755
g67
g68
sg39
Vfillchar
p2756
stp2757
sasg2
VB.rjust(width[, fillchar]) -> copy of B\u000a\u000aReturn B right justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space)
p2758
sssg234
(dp2759
g8
g23
sg10
(dp2760
g25
(lp2761
(dp2762
g28
(lp2763
g30
asg2
VReturn B left justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space).
p2764
sg33
((dp2765
g9
(lp2766
g36
asg39
g40
s(dp2767
g39
Vwidth
p2768
s(dp2769
g67
g68
sg39
Vfillchar
p2770
stp2771
sasg2
VB.ljust(width[, fillchar]) -> copy of B\u000a\u000aReturn B left justified in a string of length width. Padding is\u000adone using the specified fill character (default is a space).
p2772
sssg319
(dp2773
g8
g321
sg10
(dp2774
g25
(lp2775
(dp2776
g28
(lp2777
g354
asg2
Vbytes() -> empty bytes object\u000a\u000aConstruct an immutable array of bytes from:\u000a  - an iterable yielding integers in range(256)\u000a  - a text string encoded using the specified encoding\u000a  - any object implementing the buffer API.\u000a  - an integer
p2778
sg33
((dp2779
g9
(lp2780
g329
asg39
g332
s(dp2781
g39
Viterable_of_ints
p2782
stp2783
sa(dp2784
g28
(lp2785
g354
asg2
g2778
sg33
(g2779
(dp2786
g39
Vstring
p2787
s(dp2788
g39
Vencoding
p2789
s(dp2790
g67
g68
sg39
Verrors
p2791
stp2792
sa(dp2793
g28
(lp2794
(dp2795
g18
Vimmutable
p2796
sasg2
g2778
sg33
(g2779
(dp2797
g39
Vbytes_or_buffer
p2798
stp2799
sa(dp2800
g28
(lp2801
g354
asg2
g2778
sg33
(g2779
(dp2802
g39
Vint
p2803
stp2804
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p2805
sssg517
(dp2806
g8
g23
sg10
(dp2807
g25
(lp2808
(dp2809
g28
(lp2810
g141
asg2
VReturn True if all characters in B are alphanumeric\u000aand there is at least one character in B, False otherwise.
p2811
sg33
((dp2812
g9
(lp2813
g36
asg39
g40
stp2814
sasg2
VB.isalnum() -> bool\u000a\u000aReturn True if all characters in B are alphanumeric\u000aand there is at least one character in B, False otherwise.
p2815
sssg361
(dp2816
g8
g23
sg10
(dp2817
g25
(lp2818
(dp2819
g2
V==> y in x
p2820
sg33
((dp2821
g9
(lp2822
g36
asg39
g40
s(dp2823
g39
Vy
stp2824
sasg2
Vx.__contains__(y) <==> y in x
p2825
sssg372
(dp2826
g8
g23
sg10
(dp2827
g25
(lp2828
(dp2829
g28
(lp2830
g108
asg2
VLike B.rfind() but raise ValueError when the substring is not found.
p2831
sg33
((dp2832
g9
(lp2833
g36
asg39
g40
s(dp2834
g39
Vsub
p2835
s(dp2836
g67
g68
sg39
Vstart
p2837
s(dp2838
g67
g68
sg39
Vend
p2839
stp2840
sasg2
VB.rindex(sub[, start[, end]]) -> int\u000a\u000aLike B.rfind() but raise ValueError when the substring is not found.
p2841
sssg389
(dp2842
g8
g23
sg10
(dp2843
g25
(lp2844
(dp2845
g28
(lp2846
g30
asg2
VReturn a copy of B with only its first character capitalized (ASCII)\u000aand the rest lower-cased.
p2847
sg33
((dp2848
g9
(lp2849
g36
asg39
g40
stp2850
sasg2
VB.capitalize() -> copy of B\u000a\u000aReturn a copy of B with only its first character capitalized (ASCII)\u000aand the rest lower-cased.
p2851
sssg249
(dp2852
g8
g23
sg10
(dp2853
g25
(lp2854
(dp2855
g28
(lp2856
g108
asg2
VReturn the lowest index in B where substring sub is found,\u000asuch that sub is contained within B[start:end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p2857
sg33
((dp2858
g9
(lp2859
g36
asg39
g40
s(dp2860
g39
Vsub
p2861
s(dp2862
g67
g68
sg39
Vstart
p2863
s(dp2864
g67
g68
sg39
Vend
p2865
stp2866
sasg2
VB.find(sub[, start[, end]]) -> int\u000a\u000aReturn the lowest index in B where substring sub is found,\u000asuch that sub is contained within B[start:end].  Optional\u000aarguments start and end are interpreted as in slice notation.\u000a\u000aReturn -1 on failure.
p2867
sssg400
(dp2868
g8
g23
sg10
(dp2869
g25
(lp2870
(dp2871
g28
(lp2872
g406
asg2
VDecode B using the codec registered for encoding. Default encoding\u000ais 'utf-8'. errors may be given to set a different error\u000ahandling scheme.  Default is 'strict' meaning that encoding errors raise\u000aa UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\u000aas well as any other name registerd with codecs.register_error that is\u000aable to handle UnicodeDecodeErrors.
p2873
sg33
((dp2874
g9
(lp2875
g36
asg39
g40
s(dp2876
g67
Vutf-8
p2877
sg39
Vencoding
p2878
s(dp2879
g67
Vstrict
p2880
sg39
Verrors
p2881
stp2882
sasg2
VB.decode(encoding='utf-8', errors='strict') -> str\u000a\u000aDecode B using the codec registered for encoding. Default encoding\u000ais 'utf-8'. errors may be given to set a different error\u000ahandling scheme.  Default is 'strict' meaning that encoding errors raise\u000aa UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\u000aas well as any other name registerd with codecs.register_error that is\u000aable to handle UnicodeDecodeErrors.
p2883
sssg420
(dp2884
g8
g23
sg10
(dp2885
g25
(lp2886
(dp2887
g28
(lp2888
g141
asg2
VReturn True if all characters in B are alphabetic\u000aand there is at least one character in B, False otherwise.
p2889
sg33
((dp2890
g9
(lp2891
g36
asg39
g40
stp2892
sasg2
VB.isalpha() -> bool\u000a\u000aReturn True if all characters in B are alphabetic\u000aand there is at least one character in B, False otherwise.
p2893
sssg431
(dp2894
g8
g23
sg10
(dp2895
g25
(lp2896
(dp2897
g28
(lp2898
g172
asg2
VReturn a list of the sections in B, using sep as the delimiter.\u000aIf sep is not specified or is None, B is split on ASCII whitespace\u000acharacters (space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p2899
sg33
((dp2900
g9
(lp2901
g36
asg39
g40
s(dp2902
g67
VNone
p2903
sg39
Vsep
p2904
s(dp2905
g67
V1
sg39
Vmaxsplit
p2906
stp2907
sasg2
VB.split(sep=None, maxsplit=-1) -> list of bytes\u000a\u000aReturn a list of the sections in B, using sep as the delimiter.\u000aIf sep is not specified or is None, B is split on ASCII whitespace\u000acharacters (space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p2908
sssg447
(dp2909
g8
g23
sg10
(dp2910
g25
(lp2911
(dp2912
g28
(lp2913
g354
asg2
VStrip trailing bytes contained in the argument.\u000aIf the argument is omitted, strip trailing ASCII whitespace.
p2914
sg33
((dp2915
g9
(lp2916
g36
asg39
g40
s(dp2917
g67
g68
sg39
Vbytes
p2918
stp2919
sasg2
VB.rstrip([bytes]) -> bytes\u000a\u000aStrip trailing bytes contained in the argument.\u000aIf the argument is omitted, strip trailing ASCII whitespace.
p2920
sssg460
(dp2921
g8
g23
sg10
(dp2922
g25
(lp2923
(dp2924
g2
V==> x==y
p2925
sg33
((dp2926
g9
(lp2927
g36
asg39
g40
s(dp2928
g39
Vy
stp2929
sasg2
Vx.__eq__(y) <==> x==y
p2930
sssg471
(dp2931
g8
g23
sg10
(dp2932
g25
(lp2933
(dp2934
g28
(lp2935
g354
asg2
VReturn a copy of B, where all characters occurring in the\u000aoptional argument deletechars are removed, and the remaining\u000acharacters have been mapped through the given translation\u000atable, which must be a bytes object of length 256.
p2936
sg33
((dp2937
g9
(lp2938
g36
asg39
g40
s(dp2939
g39
Vtable
p2940
s(dp2941
g67
g68
sg39
Vdeletechars
p2942
stp2943
sasg2
VB.translate(table[, deletechars]) -> bytes\u000a\u000aReturn a copy of B, where all characters occurring in the\u000aoptional argument deletechars are removed, and the remaining\u000acharacters have been mapped through the given translation\u000atable, which must be a bytes object of length 256.
p2944
sssg873
(dp2945
g8
g793
sg10
(dp2946
g9
(lp2947
g877
asssg497
(dp2948
g8
g23
sg10
(dp2949
g25
(lp2950
(dp2951
g2
V==> len(x)
p2952
sg33
((dp2953
g9
(lp2954
g36
asg39
g40
stp2955
sasg2
Vx.__len__() <==> len(x)
p2956
sssg791
(dp2957
g8
g793
sg10
(dp2958
g9
(lp2959
g796
asssg528
(dp2960
g8
g23
sg10
(dp2961
g25
(lp2962
(dp2963
g28
(lp2964
g141
asg2
VReturn True if B starts with the specified prefix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000aprefix can also be a tuple of bytes to try.
p2965
sg33
((dp2966
g9
(lp2967
g36
asg39
g40
s(dp2968
g39
Vprefix
p2969
s(dp2970
g67
g68
sg39
Vstart
p2971
s(dp2972
g67
g68
sg39
Vend
p2973
stp2974
sasg2
VB.startswith(prefix[, start[, end]]) -> bool\u000a\u000aReturn True if B starts with the specified prefix, False otherwise.\u000aWith optional start, test B beginning at that position.\u000aWith optional end, stop comparing B at that position.\u000aprefix can also be a tuple of bytes to try.
p2975
sssg308
(dp2976
g8
g23
sg10
(dp2977
g25
(lp2978
(dp2979
g2
V==> x[y]
p2980
sg33
((dp2981
g9
(lp2982
g36
asg39
g40
s(dp2983
g39
Vy
stp2984
sasg2
Vx.__getitem__(y) <==> x[y]
p2985
sssg558
(dp2986
g8
g23
sg10
(dp2987
g25
(lp2988
(dp2989
g28
(lp2990
g108
asg2
VLike B.find() but raise ValueError when the substring is not found.
p2991
sg33
((dp2992
g9
(lp2993
g36
asg39
g40
s(dp2994
g39
Vsub
p2995
s(dp2996
g67
g68
sg39
Vstart
p2997
s(dp2998
g67
g68
sg39
Vend
p2999
stp3000
sasg2
VB.index(sub[, start[, end]]) -> int\u000a\u000aLike B.find() but raise ValueError when the substring is not found.
p3001
sssg575
(dp3002
g8
g321
sg10
(dp3003
g25
(lp3004
(dp3005
g28
(lp3006
g354
asg2
VCreate a bytes object from a string of hexadecimal numbers.\u000aSpaces between two numbers are accepted.\u000aExample: bytes.fromhex('B9 01EF') -> b'\u005cxb9\u005cx01\u005cxef'.
p3007
sg33
((dp3008
g39
Vstring
p3009
stp3010
sasg2
Vbytes.fromhex(string) -> bytes\u000a\u000aCreate a bytes object from a string of hexadecimal numbers.\u000aSpaces between two numbers are accepted.\u000aExample: bytes.fromhex('B9 01EF') -> b'\u005cxb9\u005cx01\u005cxef'.
p3011
sssg586
(dp3012
g8
g23
sg10
(dp3013
g25
(lp3014
(dp3015
g28
(lp3016
g30
asg2
VReturn a copy of B with uppercase ASCII characters converted\u000ato lowercase ASCII and vice versa.
p3017
sg33
((dp3018
g9
(lp3019
g36
asg39
g40
stp3020
sasg2
VB.swapcase() -> copy of B\u000a\u000aReturn a copy of B with uppercase ASCII characters converted\u000ato lowercase ASCII and vice versa.
p3021
sssg610
(dp3022
g8
g23
sg10
(dp3023
g25
(lp3024
(dp3025
g28
(lp3026
g141
asg2
VReturn True if all cased characters in B are lowercase and there is\u000aat least one cased character in B, False otherwise.
p3027
sg33
((dp3028
g9
(lp3029
g36
asg39
g40
stp3030
sasg2
VB.islower() -> bool\u000a\u000aReturn True if all cased characters in B are lowercase and there is\u000aat least one cased character in B, False otherwise.
p3031
sssg621
(dp3032
g8
g23
sg10
(dp3033
g25
(lp3034
(dp3035
g2
V==> iter(x)
p3036
sg33
((dp3037
g9
(lp3038
g36
asg39
g40
stp3039
sasg2
Vx.__iter__() <==> iter(x)
p3040
sssg642
(dp3041
g8
g23
sg10
(dp3042
g25
(lp3043
(dp3044
g28
(lp3045
g30
asg2
VPad a numeric string B with zeros on the left, to fill a field\u000aof the specified width.  B is never truncated.
p3046
sg33
((dp3047
g9
(lp3048
g36
asg39
g40
s(dp3049
g39
Vwidth
p3050
stp3051
sasg2
VB.zfill(width) -> copy of B\u000a\u000aPad a numeric string B with zeros on the left, to fill a field\u000aof the specified width.  B is never truncated.
p3052
sssg666
(dp3053
g8
g23
sg10
(dp3054
g25
(lp3055
(dp3056
g2
V==> x+y
p3057
sg33
((dp3058
g9
(lp3059
g36
asg39
g40
s(dp3060
g39
Vy
stp3061
sasg2
Vx.__add__(y) <==> x+y
p3062
sssg677
(dp3063
g8
g23
sg10
(dp3064
g25
(lp3065
(dp3066
g2
V==> x>y
p3067
sg33
((dp3068
g9
(lp3069
g36
asg39
g40
s(dp3070
g39
Vy
stp3071
sasg2
Vx.__gt__(y) <==> x>y
p3072
sssg710
(dp3073
g8
g23
sg10
(dp3074
g25
(lp3075
(dp3076
g28
(lp3077
g172
asg2
VReturn a list of the sections in B, using sep as the delimiter,\u000astarting at the end of B and working to the front.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p3078
sg33
((dp3079
g9
(lp3080
g36
asg39
g40
s(dp3081
g67
VNone
p3082
sg39
Vsep
p3083
s(dp3084
g67
V1
sg39
Vmaxsplit
p3085
stp3086
sasg2
VB.rsplit(sep=None, maxsplit=-1) -> list of bytes\u000a\u000aReturn a list of the sections in B, using sep as the delimiter,\u000astarting at the end of B and working to the front.\u000aIf sep is not given, B is split on ASCII whitespace characters\u000a(space, tab, return, newline, formfeed, vertical tab).\u000aIf maxsplit is given, at most maxsplit splits are done.
p3087
sssg752
(dp3088
g8
g23
sg10
(dp3089
g25
(lp3090
(dp3091
g28
(lp3092
g108
asg2
VReturn the number of non-overlapping occurrences of substring sub in\u000astring B[start:end].  Optional arguments start and end are interpreted\u000aas in slice notation.
p3093
sg33
((dp3094
g9
(lp3095
g36
asg39
g40
s(dp3096
g39
Vsub
p3097
s(dp3098
g67
g68
sg39
Vstart
p3099
s(dp3100
g67
g68
sg39
Vend
p3101
stp3102
sasg2
VB.count(sub[, start[, end]]) -> int\u000a\u000aReturn the number of non-overlapping occurrences of substring sub in\u000astring B[start:end].  Optional arguments start and end are interpreted\u000aas in slice notation.
p3103
sssg780
(dp3104
g8
g23
sg10
(dp3105
g25
(lp3106
(dp3107
g28
(lp3108
g30
asg2
VReturn a copy of B with all ASCII characters converted to lowercase.
p3109
sg33
((dp3110
g9
(lp3111
g36
asg39
g40
stp3112
sasg2
VB.lower() -> copy of B\u000a\u000aReturn a copy of B with all ASCII characters converted to lowercase.
p3113
sssg799
(dp3114
g8
g23
sg10
(dp3115
g25
(lp3116
(dp3117
g28
(lp3118
g354
asg2
VConcatenate any number of bytes objects, with B in between each pair.\u000aExample: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
p3119
sg33
((dp3120
g9
(lp3121
g36
asg39
g40
s(dp3122
g39
Viterable_of_bytes
p3123
stp3124
sasg2
VB.join(iterable_of_bytes) -> bytes\u000a\u000aConcatenate any number of bytes objects, with B in between each pair.\u000aExample: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
p3125
sssg737
(dp3126
g8
g23
sg10
(dp3127
g25
(lp3128
(dp3129
g28
(lp3130
g30
asg2
VReturn B centered in a string of length width.  Padding is\u000adone using the specified fill character (default is a space).
p3131
sg33
((dp3132
g9
(lp3133
g36
asg39
g40
s(dp3134
g39
Vwidth
p3135
s(dp3136
g67
g68
sg39
Vfillchar
p3137
stp3138
sasg2
VB.center(width[, fillchar]) -> copy of B\u000a\u000aReturn B centered in a string of length width.  Padding is\u000adone using the specified fill character (default is a space).
p3139
sssg834
(dp3140
g8
g23
sg10
(dp3141
g25
(lp3142
(dp3143
g28
(lp3144
g840
asg2
V(head, sep, tail)\u000a\u000aSearch for the separator sep in B, and return the part before it,\u000athe separator itself, and the part after it.  If the separator is not\u000afound, returns B and two empty bytes objects.
p3145
sg33
((dp3146
g9
(lp3147
g36
asg39
g40
s(dp3148
g39
Vsep
p3149
stp3150
sasg2
VB.partition(sep) -> (head, sep, tail)\u000a\u000aSearch for the separator sep in B, and return the part before it,\u000athe separator itself, and the part after it.  If the separator is not\u000afound, returns B and two empty bytes objects.
p3151
sssg860
(dp3152
g8
g23
sg10
(dp3153
g25
(lp3154
(dp3155
g28
(lp3156
g30
asg2
VReturn a copy of B where all tab characters are expanded using spaces.\u000aIf tabsize is not given, a tab size of 8 characters is assumed.
p3157
sg33
((dp3158
g9
(lp3159
g36
asg39
g40
s(dp3160
g67
g68
sg39
Vtabsize
p3161
stp3162
sasg2
VB.expandtabs([tabsize]) -> copy of B\u000a\u000aReturn a copy of B where all tab characters are expanded using spaces.\u000aIf tabsize is not given, a tab size of 8 characters is assumed.
p3163
sssg486
(dp3164
g8
g23
sg10
(dp3165
g25
(lp3166
(dp3167
g28
(lp3168
g141
asg2
VReturn True if all characters in B are whitespace\u000aand there is at least one character in B, False otherwise.
p3169
sg33
((dp3170
g9
(lp3171
g36
asg39
g40
stp3172
sasg2
VB.isspace() -> bool\u000a\u000aReturn True if all characters in B are whitespace\u000aand there is at least one character in B, False otherwise.
p3173
sssg688
(dp3174
g8
g23
sg10
(dp3175
g25
(lp3176
(dp3177
g28
(lp3178
g141
asg2
VReturn True if B is a titlecased string and there is at least one\u000acharacter in B, i.e. uppercase characters may only follow uncased\u000acharacters and lowercase characters only cased ones. Return False\u000aotherwise.
p3179
sg33
((dp3180
g9
(lp3181
g36
asg39
g40
stp3182
sasg2
VB.istitle() -> bool\u000a\u000aReturn True if B is a titlecased string and there is at least one\u000acharacter in B, i.e. uppercase characters may only follow uncased\u000acharacters and lowercase characters only cased ones. Return False\u000aotherwise.
p3183
sssg908
(dp3184
g8
g23
sg10
(dp3185
g25
(lp3186
(dp3187
g2
V==> x<=y
p3188
sg33
((dp3189
g9
(lp3190
g36
asg39
g40
s(dp3191
g39
Vy
stp3192
sasg2
Vx.__le__(y) <==> x<=y
p3193
sssg507
(dp3194
g8
g23
sg10
(dp3195
g25
(lp3196
(dp3197
g2
V==> repr(x)
p3198
sg33
((dp3199
g9
(lp3200
g36
asg39
g40
stp3201
sasg2
Vx.__repr__() <==> repr(x)
p3202
sssg930
(dp3203
g8
g23
sg10
(dp3204
g25
(lp3205
(dp3206
g2
V==> hash(x)
p3207
sg33
((dp3208
g9
(lp3209
g36
asg39
g40
stp3210
sasg2
Vx.__hash__() <==> hash(x)
p3211
sssg937
(dp3212
g8
g23
sg10
(dp3213
g25
(lp3214
(dp3215
g28
(lp3216
g30
asg2
VReturn a titlecased version of B, i.e. ASCII words start with uppercase\u000acharacters, all remaining cased characters have lowercase.
p3217
sg33
((dp3218
g9
(lp3219
g36
asg39
g40
stp3220
sasg2
VB.title() -> copy of B\u000a\u000aReturn a titlecased version of B, i.e. ASCII words start with uppercase\u000acharacters, all remaining cased characters have lowercase.
p3221
sssg948
(dp3222
g8
g23
sg10
(dp3223
g25
(lp3224
(dp3225
g28
(lp3226
g141
asg2
VReturn True if all cased characters in B are uppercase and there is\u000aat least one cased character in B, False otherwise.
p3227
sg33
((dp3228
g9
(lp3229
g36
asg39
g40
stp3230
sasg2
VB.isupper() -> bool\u000a\u000aReturn True if all cased characters in B are uppercase and there is\u000aat least one cased character in B, False otherwise.
p3231
sssg959
(dp3232
g8
g23
sg10
(dp3233
g25
(lp3234
(dp3235
g2
V==> x>=y
p3236
sg33
((dp3237
g9
(lp3238
g36
asg39
g40
s(dp3239
g39
Vy
stp3240
sasg2
Vx.__ge__(y) <==> x>=y
p3241
ssssg970
(lp3242
(dp3243
g16
Vbuiltins
p3244
sg18
Vbytes
p3245
sag15
asssViter
p3246
(dp3247
g8
g321
sg10
(dp3248
g25
(lp3249
(dp3250
g28
(lp3251
(dp3252
g18
Viterator
p3253
sasg2
VGet an iterator from an object.  In the first form, the argument must\u000asupply its own iterator, or be a sequence.\u000aIn the second form, the callable is called until it returns the sentinel.
p3254
sg33
((dp3255
g39
Viterable
p3256
stp3257
sa(dp3258
g28
(lp3259
g3252
asg2
g3254
sg33
((dp3260
g39
Vcallable
p3261
s(dp3262
g39
Vsentinel
p3263
stp3264
sasg2
Viter(iterable) -> iterator\u000aiter(callable, sentinel) -> iterator\u000a\u000aGet an iterator from an object.  In the first form, the argument must\u000asupply its own iterator, or be a sequence.\u000aIn the second form, the callable is called until it returns the sentinel.
p3265
sssVWarning
p3266
(dp3267
g8
g9
sg10
(dp3268
g2
VBase class for warning categories.
p3269
sg13
(lp3270
g1012
asg4
(dp3271
g319
(dp3272
g8
g321
sg10
(dp3273
g25
(lp3274
(dp3275
g2
VBase class for warning categories.
p3276
sg33
(lp3277
(dp3278
g275
V*
sg39
g33
sasasg2
g3276
sssg266
(dp3279
g8
g23
sg10
(dp3280
g25
(lp3281
(dp3282
g2
Vinitializes x; see help(type(x)) for signature
p3283
sg33
((dp3284
g9
(lp3285
g36
asg39
g40
s(dp3286
g275
V*
sg39
g33
stp3287
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p3288
sssg873
(dp3289
g8
g793
sg10
(dp3290
g9
(lp3291
g877
assssg970
(lp3292
g1753
ag1012
ag1080
ag15
asssVround
p3293
(dp3294
g8
g321
sg10
(dp3295
g25
(lp3296
(dp3297
g28
(lp3298
g108
asg2
VRound a number to a given precision in decimal digits (default 0 digits).\u000aThis returns an int when called with one argument, otherwise the\u000asame type as the number. ndigits may be negative.
p3299
sg33
((dp3300
g39
Vnumber
p3301
s(dp3302
g67
g68
sg39
Vndigits
p3303
stp3304
sasg2
Vround(number[, ndigits]) -> number\u000a\u000aRound a number to a given precision in decimal digits (default 0 digits).\u000aThis returns an int when called with one argument, otherwise the\u000asame type as the number. ndigits may be negative.
p3305
sssVdir
p3306
(dp3307
g8
g321
sg10
(dp3308
g25
(lp3309
(dp3310
g28
(lp3311
g172
asg2
VIf called without an argument, return the names in the current scope.\u000aElse, return an alphabetized list of names comprising (some of) the attributes\u000aof the given object, and of attributes reachable from it.\u000aIf the object supplies a method named __dir__, it will be used; otherwise\u000athe default dir() logic is used and returns:\u000a  for a module object: the module's attributes.\u000a  for a class object:  its attributes, and recursively the attributes\u000a    of its bases.\u000a  for any other object: its attributes, its class's attributes, and\u000a    recursively the attributes of its class's base classes.
p3312
sg33
((dp3313
g67
g68
sg39
Vobject
p3314
stp3315
sasg2
Vdir([object]) -> list of strings\u000a\u000aIf called without an argument, return the names in the current scope.\u000aElse, return an alphabetized list of names comprising (some of) the attributes\u000aof the given object, and of attributes reachable from it.\u000aIf the object supplies a method named __dir__, it will be used; otherwise\u000athe default dir() logic is used and returns:\u000a  for a module object: the module's attributes.\u000a  for a class object:  its attributes, and recursively the attributes\u000a    of its bases.\u000a  for any other object: its attributes, its class's attributes, and\u000a    recursively the attributes of its class's base classes.
p3316
sssVset
p3317
(dp3318
g8
g9
sg10
(dp3319
g2
Vset() -> new empty set object\u000aset(iterable) -> new set object\u000a\u000aBuild an unordered collection of unique elements.
p3320
sg13
(lp3321
g15
asg4
(dp3322
g1487
(dp3323
g8
g23
sg10
(dp3324
g25
(lp3325
(dp3326
g2
V==> y|x
p3327
sg33
((dp3328
g9
(lp3329
g36
asg39
g40
s(dp3330
g39
Vy
stp3331
sasg2
Vx.__ror__(y) <==> y|x
p3332
sssVdifference_update
p3333
(dp3334
g8
g23
sg10
(dp3335
g25
Nsg2
VRemove all elements of another set from this set.
p3336
sssV__isub__
p3337
(dp3338
g8
g23
sg10
(dp3339
g25
(lp3340
(dp3341
g2
V==> x-=y
p3342
sg33
((dp3343
g9
(lp3344
g36
asg39
g40
s(dp3345
g39
Vy
stp3346
sasg2
Vx.__isub__(y) <==> x-=y
p3347
sssVsymmetric_difference
p3348
(dp3349
g8
g23
sg10
(dp3350
g25
Nsg2
VReturn the symmetric difference of two sets as a new set.\u000a\u000a(i.e. all elements that are in exactly one of the sets.)
p3351
sssg82
(dp3352
g8
g23
sg10
(dp3353
g25
Nsg2
VReturn state information for pickling.
p3354
sssg102
(dp3355
g8
g23
sg10
(dp3356
g25
Nsg2
VRemove and return an arbitrary set element.\u000aRaises KeyError if the set is empty.
p3357
sssVissuperset
p3358
(dp3359
g8
g23
sg10
(dp3360
g25
Nsg2
VReport whether this set contains another set.
p3361
sssVissubset
p3362
(dp3363
g8
g23
sg10
(dp3364
g25
Nsg2
VReport whether another set contains this set.
p3365
sssg1498
(dp3366
g8
g23
sg10
(dp3367
g25
(lp3368
(dp3369
g2
V==> y-x
p3370
sg33
((dp3371
g9
(lp3372
g36
asg39
g40
s(dp3373
g39
Vy
stp3374
sasg2
Vx.__rsub__(y) <==> y-x
p3375
sssg86
(dp3376
g8
g23
sg10
(dp3377
g25
Nsg2
VRemove an element from a set; it must be a member.\u000a\u000aIf the element is not a member, raise a KeyError.
p3378
sssg1509
(dp3379
g8
g23
sg10
(dp3380
g25
(lp3381
(dp3382
g2
V==> x&y
p3383
sg33
((dp3384
g9
(lp3385
g36
asg39
g40
s(dp3386
g39
Vy
stp3387
sasg2
Vx.__and__(y) <==> x&y
p3388
sssg223
(dp3389
g8
g23
sg10
(dp3390
g25
(lp3391
(dp3392
g2
V==> x<y
p3393
sg33
((dp3394
g9
(lp3395
g36
asg39
g40
s(dp3396
g39
Vy
stp3397
sasg2
Vx.__lt__(y) <==> x<y
p3398
sssg726
(dp3399
g8
g23
sg10
(dp3400
g25
(lp3401
(dp3402
g28
(lp3403
g840
asg2
Vsize of S in memory, in bytes
p3404
sg33
((dp3405
g9
(lp3406
g36
asg39
g40
stp3407
sasg2
VS.__sizeof__() -> size of S in memory, in bytes
p3408
sssg266
(dp3409
g8
g23
sg10
(dp3410
g25
(lp3411
(dp3412
g2
Vinitializes x; see help(type(x)) for signature
p3413
sg33
((dp3414
g9
(lp3415
g36
asg39
g40
s(dp3416
g275
V*
sg39
g33
stp3417
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p3418
sssg1530
(dp3419
g8
g23
sg10
(dp3420
g25
(lp3421
(dp3422
g2
V==> y&x
p3423
sg33
((dp3424
g9
(lp3425
g36
asg39
g40
s(dp3426
g39
Vy
stp3427
sasg2
Vx.__rand__(y) <==> y&x
p3428
sssg699
(dp3429
g8
g23
sg10
(dp3430
g25
Nsg2
VReturn a shallow copy of a set.
p3431
sssV__iand__
p3432
(dp3433
g8
g23
sg10
(dp3434
g25
(lp3435
(dp3436
g2
V==> x&=y
p3437
sg33
((dp3438
g9
(lp3439
g36
asg39
g40
s(dp3440
g39
Vy
stp3441
sasg2
Vx.__iand__(y) <==> x&=y
p3442
sssg319
(dp3443
g8
g321
sg10
(dp3444
g25
(lp3445
(dp3446
g28
(lp3447
g1125
asg2
VBuild an unordered collection of unique elements.
p3448
sg33
((dp3449
g9
(lp3450
g329
asg39
g332
stp3451
sa(dp3452
g28
(lp3453
g1125
asg2
g3448
sg33
(g3449
(dp3454
g39
Viterable
p3455
stp3456
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p3457
sssg361
(dp3458
g8
g23
sg10
(dp3459
g25
(lp3460
(dp3461
g2
V==> y in x.
p3462
sg33
((dp3463
g9
(lp3464
g36
asg39
g40
s(dp3465
g39
Vy
stp3466
sasg2
Vx.__contains__(y) <==> y in x.
p3467
sssVunion
p3468
(dp3469
g8
g23
sg10
(dp3470
g25
Nsg2
VReturn the union of sets as a new set.\u000a\u000a(i.e. all elements that are in either set.)
p3471
sssVdiscard
p3472
(dp3473
g8
g23
sg10
(dp3474
g25
Nsg2
VRemove an element from a set if it is a member.\u000a\u000aIf the element is not a member, do nothing.
p3475
sssVadd
p3476
(dp3477
g8
g23
sg10
(dp3478
g25
Nsg2
VAdd an element to a set.\u000a\u000aThis has no effect if the element is already present.
p3479
sssVdifference
p3480
(dp3481
g8
g23
sg10
(dp3482
g25
Nsg2
VReturn the difference of two or more sets as a new set.\u000a\u000a(i.e. all elements that are in this set but not the others.)
p3483
sssV__ixor__
p3484
(dp3485
g8
g23
sg10
(dp3486
g25
(lp3487
(dp3488
g2
V==> x^=y
p3489
sg33
((dp3490
g9
(lp3491
g36
asg39
g40
s(dp3492
g39
Vy
stp3493
sasg2
Vx.__ixor__(y) <==> x^=y
p3494
sssg873
(dp3495
g8
g793
sg10
(dp3496
g9
(lp3497
g877
asssg497
(dp3498
g8
g23
sg10
(dp3499
g25
(lp3500
(dp3501
g2
V==> len(x)
p3502
sg33
((dp3503
g9
(lp3504
g36
asg39
g40
stp3505
sasg2
Vx.__len__() <==> len(x)
p3506
sssg43
(dp3507
g8
g23
sg10
(dp3508
g25
(lp3509
(dp3510
g2
V==> x!=y
p3511
sg33
((dp3512
g9
(lp3513
g36
asg39
g40
s(dp3514
g39
Vy
stp3515
sasg2
Vx.__ne__(y) <==> x!=y
p3516
sssVsymmetric_difference_update
p3517
(dp3518
g8
g23
sg10
(dp3519
g25
Nsg2
VUpdate a set with the symmetric difference of itself and another.
p3520
sssg1923
(dp3521
g8
g23
sg10
(dp3522
g25
Nsg2
VUpdate a set with the union of itself and others.
p3523
sssg621
(dp3524
g8
g23
sg10
(dp3525
g25
(lp3526
(dp3527
g2
V==> iter(x)
p3528
sg33
((dp3529
g9
(lp3530
g36
asg39
g40
stp3531
sasg2
Vx.__iter__() <==> iter(x)
p3532
sssg1588
(dp3533
g8
g23
sg10
(dp3534
g25
(lp3535
(dp3536
g2
V==> x|y
p3537
sg33
((dp3538
g9
(lp3539
g36
asg39
g40
s(dp3540
g39
Vy
stp3541
sasg2
Vx.__or__(y) <==> x|y
p3542
sssg677
(dp3543
g8
g23
sg10
(dp3544
g25
(lp3545
(dp3546
g2
V==> x>y
p3547
sg33
((dp3548
g9
(lp3549
g36
asg39
g40
s(dp3550
g39
Vy
stp3551
sasg2
Vx.__gt__(y) <==> x>y
p3552
sssVintersection
p3553
(dp3554
g8
g23
sg10
(dp3555
g25
Nsg2
VReturn the intersection of two sets as a new set.\u000a\u000a(i.e. all elements that are in both sets.)
p3556
sssg460
(dp3557
g8
g23
sg10
(dp3558
g25
(lp3559
(dp3560
g2
V==> x==y
p3561
sg33
((dp3562
g9
(lp3563
g36
asg39
g40
s(dp3564
g39
Vy
stp3565
sasg2
Vx.__eq__(y) <==> x==y
p3566
sssg1619
(dp3567
g8
g23
sg10
(dp3568
g25
(lp3569
(dp3570
g2
V==> y^x
p3571
sg33
((dp3572
g9
(lp3573
g36
asg39
g40
s(dp3574
g39
Vy
stp3575
sasg2
Vx.__rxor__(y) <==> y^x
p3576
sssg1630
(dp3577
g8
g23
sg10
(dp3578
g25
Nsg2
VReturn True if two sets have a null intersection.
p3579
sssg823
(dp3580
g8
g23
sg10
(dp3581
g25
Nsg2
VRemove all elements from this set.
p3582
sssVintersection_update
p3583
(dp3584
g8
g23
sg10
(dp3585
g25
Nsg2
VUpdate a set with the intersection of itself and another.
p3586
sssg1634
(dp3587
g8
g23
sg10
(dp3588
g25
(lp3589
(dp3590
g2
V==> x^y
p3591
sg33
((dp3592
g9
(lp3593
g36
asg39
g40
s(dp3594
g39
Vy
stp3595
sasg2
Vx.__xor__(y) <==> x^y
p3596
sssV__ior__
p3597
(dp3598
g8
g23
sg10
(dp3599
g25
(lp3600
(dp3601
g2
V==> x|=y
p3602
sg33
((dp3603
g9
(lp3604
g36
asg39
g40
s(dp3605
g39
Vy
stp3606
sasg2
Vx.__ior__(y) <==> x|=y
p3607
sssg908
(dp3608
g8
g23
sg10
(dp3609
g25
(lp3610
(dp3611
g2
V==> x<=y
p3612
sg33
((dp3613
g9
(lp3614
g36
asg39
g40
s(dp3615
g39
Vy
stp3616
sasg2
Vx.__le__(y) <==> x<=y
p3617
sssg507
(dp3618
g8
g23
sg10
(dp3619
g25
(lp3620
(dp3621
g2
V==> repr(x)
p3622
sg33
((dp3623
g9
(lp3624
g36
asg39
g40
stp3625
sasg2
Vx.__repr__() <==> repr(x)
p3626
sssg930
(dp3627
g8
g793
sg10
(dp3628
g9
(lp3629
g934
asssg1667
(dp3630
g8
g23
sg10
(dp3631
g25
(lp3632
(dp3633
g2
V==> x-y
p3634
sg33
((dp3635
g9
(lp3636
g36
asg39
g40
s(dp3637
g39
Vy
stp3638
sasg2
Vx.__sub__(y) <==> x-y
p3639
sssg959
(dp3640
g8
g23
sg10
(dp3641
g25
(lp3642
(dp3643
g2
V==> x>=y
p3644
sg33
((dp3645
g9
(lp3646
g36
asg39
g40
s(dp3647
g39
Vy
stp3648
sasg2
Vx.__ge__(y) <==> x>=y
p3649
ssssg970
(lp3650
(dp3651
g16
Vbuiltins
p3652
sg18
Vset
p3653
sag15
asssVIsADirectoryError
p3654
(dp3655
g8
g9
sg10
(dp3656
g2
VOperation doesn't work on directories.
p3657
sg13
(lp3658
g1116
asg4
(dp3659
g319
(dp3660
g8
g321
sg10
(dp3661
g25
(lp3662
(dp3663
g2
VOperation doesn't work on directories.
p3664
sg33
(lp3665
(dp3666
g275
V*
sg39
g33
sasasg2
g3664
sssg266
(dp3667
g8
g23
sg10
(dp3668
g25
(lp3669
(dp3670
g2
Vinitializes x; see help(type(x)) for signature
p3671
sg33
((dp3672
g9
(lp3673
g36
asg39
g40
s(dp3674
g275
V*
sg39
g33
stp3675
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p3676
sssg873
(dp3677
g8
g793
sg10
(dp3678
g9
(lp3679
g877
assssg970
(lp3680
(dp3681
g16
Vbuiltins
p3682
sg18
VIsADirectoryError
p3683
sag1116
ag1012
ag1080
ag15
asssVhex
p3684
(dp3685
g8
g321
sg10
(dp3686
g25
(lp3687
(dp3688
g28
(lp3689
g406
asg2
VReturn the hexadecimal representation of an integer.
p3690
sg33
((dp3691
g39
Vnumber
p3692
stp3693
sasg2
Vhex(number) -> string\u000a\u000aReturn the hexadecimal representation of an integer.
p3694
sssVlist
p3695
(dp3696
g8
g9
sg10
(dp3697
g2
Vlist() -> new empty list\u000alist(iterable) -> new list initialized from iterable's items
p3698
sg13
(lp3699
g15
asg4
(dp3700
g102
(dp3701
g8
g23
sg10
(dp3702
g25
(lp3703
(dp3704
g28
(lp3705
(dp3706
g18
Vitem
p3707
sasg2
V(default last).\u000aRaises IndexError if list is empty or index is out of range.
p3708
sg33
((dp3709
g9
(lp3710
g36
asg39
g40
s(dp3711
g67
g68
sg39
Vindex
p3712
stp3713
sasg2
VL.pop([index]) -> item -- remove and return item at index (default last).\u000aRaises IndexError if list is empty or index is out of range.
p3714
sssg86
(dp3715
g8
g23
sg10
(dp3716
g25
(lp3717
(dp3718
g28
(lp3719
g92
asg2
V.\u000aRaises ValueError if the value is not present.
p3720
sg33
((dp3721
g9
(lp3722
g36
asg39
g40
s(dp3723
g39
Vvalue
p3724
stp3725
sasg2
VL.remove(value) -> None -- remove first occurrence of value.\u000aRaises ValueError if the value is not present.
p3726
sssg212
(dp3727
g8
g23
sg10
(dp3728
g25
(lp3729
(dp3730
g2
V==> n*x
p3731
sg33
((dp3732
g9
(lp3733
g36
asg39
g40
s(dp3734
g39
Vn
stp3735
sasg2
Vx.__rmul__(n) <==> n*x
p3736
sssg223
(dp3737
g8
g23
sg10
(dp3738
g25
(lp3739
(dp3740
g2
V==> x<y
p3741
sg33
((dp3742
g9
(lp3743
g36
asg39
g40
s(dp3744
g39
Vy
stp3745
sasg2
Vx.__lt__(y) <==> x<y
p3746
sssg726
(dp3747
g8
g23
sg10
(dp3748
g25
(lp3749
(dp3750
g2
Vsize of L in memory, in bytes
p3751
sg33
((dp3752
g9
(lp3753
g36
asg39
g40
stp3754
sasg2
VL.__sizeof__() -- size of L in memory, in bytes
p3755
sssg266
(dp3756
g8
g23
sg10
(dp3757
g25
(lp3758
(dp3759
g2
Vinitializes x; see help(type(x)) for signature
p3760
sg33
((dp3761
g9
(lp3762
g36
asg39
g40
s(dp3763
g275
V*
sg39
g33
stp3764
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p3765
sssg558
(dp3766
g8
g23
sg10
(dp3767
g25
(lp3768
(dp3769
g28
(lp3770
g108
asg2
V.\u000aRaises ValueError if the value is not present.
p3771
sg33
((dp3772
g9
(lp3773
g36
asg39
g40
s(dp3774
g39
Vvalue
p3775
s(dp3776
g67
g68
sg39
Vstart
p3777
s(dp3778
g67
g68
sg39
Vstop
p3779
stp3780
sasg2
VL.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p3781
sssg308
(dp3782
g8
g23
sg10
(dp3783
g25
(lp3784
(dp3785
g2
V==> x[y]
p3786
sg33
((dp3787
g9
(lp3788
g36
asg39
g40
s(dp3789
g39
Vy
stp3790
sasg2
Vx.__getitem__(y) <==> x[y]
p3791
sssg361
(dp3792
g8
g23
sg10
(dp3793
g25
(lp3794
(dp3795
g2
V==> y in x
p3796
sg33
((dp3797
g9
(lp3798
g36
asg39
g40
s(dp3799
g39
Vy
stp3800
sasg2
Vx.__contains__(y) <==> y in x
p3801
sssg597
(dp3802
g8
g23
sg10
(dp3803
g25
(lp3804
(dp3805
g28
(lp3806
g92
asg2
V
sg33
((dp3807
g9
(lp3808
g36
asg39
g40
s(dp3809
g39
Vobject
p3810
stp3811
sasg2
VL.append(object) -> None -- append object to end
p3812
sssg873
(dp3813
g8
g793
sg10
(dp3814
g9
(lp3815
g877
asssg497
(dp3816
g8
g23
sg10
(dp3817
g25
(lp3818
(dp3819
g2
V==> len(x)
p3820
sg33
((dp3821
g9
(lp3822
g36
asg39
g40
stp3823
sasg2
Vx.__len__() <==> len(x)
p3824
sssg919
(dp3825
g8
g23
sg10
(dp3826
g25
(lp3827
(dp3828
g2
V==> x*n
p3829
sg33
((dp3830
g9
(lp3831
g36
asg39
g40
s(dp3832
g39
Vn
stp3833
sasg2
Vx.__mul__(n) <==> x*n
p3834
sssVsort
p3835
(dp3836
g8
g23
sg10
(dp3837
g25
(lp3838
(dp3839
g28
(lp3840
g92
asg2
V*IN PLACE*
p3841
sg33
((dp3842
g9
(lp3843
g36
asg39
g40
s(dp3844
g67
VNone
p3845
sg39
Vkey
p3846
s(dp3847
g67
VFalse
p3848
sg39
Vreverse
p3849
stp3850
sasg2
VL.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
p3851
sssg43
(dp3852
g8
g23
sg10
(dp3853
g25
(lp3854
(dp3855
g2
V==> x!=y
p3856
sg33
((dp3857
g9
(lp3858
g36
asg39
g40
s(dp3859
g39
Vy
stp3860
sasg2
Vx.__ne__(y) <==> x!=y
p3861
sssg545
(dp3862
g8
g23
sg10
(dp3863
g25
(lp3864
(dp3865
g28
(lp3866
g92
asg2
V
sg33
((dp3867
g9
(lp3868
g36
asg39
g40
s(dp3869
g39
Viterable
p3870
stp3871
sasg2
VL.extend(iterable) -> None -- extend list by appending elements from the iterable
p3872
sssg893
(dp3873
g8
g23
sg10
(dp3874
g25
(lp3875
(dp3876
g2
Vinsert object before index
p3877
sg33
((dp3878
g9
(lp3879
g36
asg39
g40
s(dp3880
g39
Vindex
p3881
s(dp3882
g39
Vobject
p3883
stp3884
sasg2
VL.insert(index, object) -- insert object before index
p3885
sssg848
(dp3886
g8
g23
sg10
(dp3887
g25
(lp3888
(dp3889
g2
V==> x[i]=y
p3890
sg33
((dp3891
g9
(lp3892
g36
asg39
g40
s(dp3893
g39
Vi
s(dp3894
g39
Vy
stp3895
sasg2
Vx.__setitem__(i, y) <==> x[i]=y
p3896
sssg631
(dp3897
g8
g23
sg10
(dp3898
g25
(lp3899
(dp3900
g2
V==> x*=y
p3901
sg33
((dp3902
g9
(lp3903
g36
asg39
g40
s(dp3904
g39
Vy
stp3905
sasg2
Vx.__imul__(y) <==> x*=y
p3906
sssg666
(dp3907
g8
g23
sg10
(dp3908
g25
(lp3909
(dp3910
g2
V==> x+y
p3911
sg33
((dp3912
g9
(lp3913
g36
asg39
g40
s(dp3914
g39
Vy
stp3915
sasg2
Vx.__add__(y) <==> x+y
p3916
sssg677
(dp3917
g8
g23
sg10
(dp3918
g25
(lp3919
(dp3920
g2
V==> x>y
p3921
sg33
((dp3922
g9
(lp3923
g36
asg39
g40
s(dp3924
g39
Vy
stp3925
sasg2
Vx.__gt__(y) <==> x>y
p3926
sssg699
(dp3927
g8
g23
sg10
(dp3928
g25
(lp3929
(dp3930
g28
(lp3931
g172
asg2
V
sg33
((dp3932
g9
(lp3933
g36
asg39
g40
stp3934
sasg2
VL.copy() -> list -- a shallow copy of L
p3935
sssg460
(dp3936
g8
g23
sg10
(dp3937
g25
(lp3938
(dp3939
g2
V==> x==y
p3940
sg33
((dp3941
g9
(lp3942
g36
asg39
g40
s(dp3943
g39
Vy
stp3944
sasg2
Vx.__eq__(y) <==> x==y
p3945
sssg319
(dp3946
g8
g321
sg10
(dp3947
g25
(lp3948
(dp3949
g28
(lp3950
g1125
asg2
V
sg33
((dp3951
g9
(lp3952
g329
asg39
g332
stp3953
sa(dp3954
g28
(lp3955
g1125
asg2
V
sg33
(g3951
(dp3956
g39
Viterable
p3957
stp3958
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p3959
sssg752
(dp3960
g8
g23
sg10
(dp3961
g25
(lp3962
(dp3963
g28
(lp3964
g108
asg2
V
sg33
((dp3965
g9
(lp3966
g36
asg39
g40
s(dp3967
g39
Vvalue
p3968
stp3969
sasg2
VL.count(value) -> integer -- return number of occurrences of value
p3970
sssg769
(dp3971
g8
g23
sg10
(dp3972
g25
(lp3973
(dp3974
g2
V==> del x[y]
p3975
sg33
((dp3976
g9
(lp3977
g36
asg39
g40
s(dp3978
g39
Vy
stp3979
sasg2
Vx.__delitem__(y) <==> del x[y]
p3980
sssV__reversed__
p3981
(dp3982
g8
g23
sg10
(dp3983
g25
(lp3984
(dp3985
g28
(lp3986
g1918
asg2
V
sg33
((dp3987
g9
(lp3988
g36
asg39
g40
stp3989
sasg2
VL.__reversed__() -- return a reverse iterator over the list
p3990
sssg812
(dp3991
g8
g23
sg10
(dp3992
g25
(lp3993
(dp3994
g2
Vreverse *IN PLACE*
p3995
sg33
((dp3996
g9
(lp3997
g36
asg39
g40
stp3998
sasg2
VL.reverse() -- reverse *IN PLACE*
p3999
sssg823
(dp4000
g8
g23
sg10
(dp4001
g25
(lp4002
(dp4003
g28
(lp4004
g92
asg2
V
sg33
((dp4005
g9
(lp4006
g36
asg39
g40
stp4007
sasg2
VL.clear() -> None -- remove all items from L
p4008
sssg621
(dp4009
g8
g23
sg10
(dp4010
g25
(lp4011
(dp4012
g2
V==> iter(x)
p4013
sg33
((dp4014
g9
(lp4015
g36
asg39
g40
stp4016
sasg2
Vx.__iter__() <==> iter(x)
p4017
sssg655
(dp4018
g8
g23
sg10
(dp4019
g25
(lp4020
(dp4021
g2
V==> x+=y
p4022
sg33
((dp4023
g9
(lp4024
g36
asg39
g40
s(dp4025
g39
Vy
stp4026
sasg2
Vx.__iadd__(y) <==> x+=y
p4027
sssg908
(dp4028
g8
g23
sg10
(dp4029
g25
(lp4030
(dp4031
g2
V==> x<=y
p4032
sg33
((dp4033
g9
(lp4034
g36
asg39
g40
s(dp4035
g39
Vy
stp4036
sasg2
Vx.__le__(y) <==> x<=y
p4037
sssg507
(dp4038
g8
g23
sg10
(dp4039
g25
(lp4040
(dp4041
g2
V==> repr(x)
p4042
sg33
((dp4043
g9
(lp4044
g36
asg39
g40
stp4045
sasg2
Vx.__repr__() <==> repr(x)
p4046
sssg930
(dp4047
g8
g793
sg10
(dp4048
g9
(lp4049
g934
asssg959
(dp4050
g8
g23
sg10
(dp4051
g25
(lp4052
(dp4053
g2
V==> x>=y
p4054
sg33
((dp4055
g9
(lp4056
g36
asg39
g40
s(dp4057
g39
Vy
stp4058
sasg2
Vx.__ge__(y) <==> x>=y
p4059
ssssg970
(lp4060
(dp4061
g16
Vbuiltins
p4062
sg18
Vlist
p4063
sag15
asssVdict_values
p4064
(dp4065
g8
g9
sg10
(dp4066
g13
(lp4067
g15
asg1362
I01
sg970
(lp4068
(dp4069
g16
Vbuiltins
p4070
sg18
Vdict_values
p4071
sag15
asg4
(dp4072
g621
(dp4073
g8
g23
sg10
(dp4074
g25
(lp4075
(dp4076
g2
V==> iter(x)
p4077
sg33
((dp4078
g9
(lp4079
g36
asg39
g40
stp4080
sasg2
Vx.__iter__() <==> iter(x)
p4081
sssg873
(dp4082
g8
g793
sg10
(dp4083
g9
(lp4084
g934
asssg507
(dp4085
g8
g23
sg10
(dp4086
g25
(lp4087
(dp4088
g2
V==> repr(x)
p4089
sg33
((dp4090
g9
(lp4091
g36
asg39
g40
stp4092
sasg2
Vx.__repr__() <==> repr(x)
p4093
sssg497
(dp4094
g8
g23
sg10
(dp4095
g25
(lp4096
(dp4097
g2
V==> len(x)
p4098
sg33
((dp4099
g9
(lp4100
g36
asg39
g40
stp4101
sasg2
Vx.__len__() <==> len(x)
p4102
sssg319
(dp4103
g8
g321
sg10
(dp4104
g25
(lp4105
(dp4106
g2
V
sg33
(lp4107
(dp4108
g275
V*
sg39
g33
sasasg2
V
ssssssVUnicodeTranslateError
p4109
(dp4110
g8
g9
sg10
(dp4111
g2
VUnicode translation error.
p4112
sg13
(lp4113
(dp4114
g16
Vbuiltins
p4115
sg18
VUnicodeError
p4116
sasg4
(dp4117
Vend
p4118
(dp4119
g8
g1025
sg10
(dp4120
g2
Vexception end
p4121
sg9
(lp4122
g15
asssg319
(dp4123
g8
g321
sg10
(dp4124
g25
(lp4125
(dp4126
g2
VUnicode translation error.
p4127
sg33
(lp4128
(dp4129
g275
V*
sg39
g33
sasasg2
g4127
sssVencoding
p4130
(dp4131
g8
g1025
sg10
(dp4132
g2
Vexception encoding
p4133
sg9
(lp4134
g15
asssg72
(dp4135
g8
g23
sg10
(dp4136
g25
(lp4137
(dp4138
g2
V==> str(x)
p4139
sg33
((dp4140
g9
(lp4141
g36
asg39
g40
stp4142
sasg2
Vx.__str__() <==> str(x)
p4143
sssVobject
p4144
(dp4145
g8
g1025
sg10
(dp4146
g2
Vexception object
p4147
sg9
(lp4148
g15
asssVstart
p4149
(dp4150
g8
g1025
sg10
(dp4151
g2
Vexception start
p4152
sg9
(lp4153
g15
asssVreason
p4154
(dp4155
g8
g1025
sg10
(dp4156
g2
Vexception reason
p4157
sg9
(lp4158
g15
asssg873
(dp4159
g8
g793
sg10
(dp4160
g9
(lp4161
g877
asssg266
(dp4162
g8
g23
sg10
(dp4163
g25
(lp4164
(dp4165
g2
Vinitializes x; see help(type(x)) for signature
p4166
sg33
((dp4167
g9
(lp4168
g36
asg39
g40
s(dp4169
g275
V*
sg39
g33
stp4170
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4171
ssssg970
(lp4172
(dp4173
g16
Vbuiltins
p4174
sg18
VUnicodeTranslateError
p4175
sag4114
a(dp4176
g16
Vbuiltins
p4177
sg18
VValueError
p4178
sag1012
ag1080
ag15
asssVPermissionError
p4179
(dp4180
g8
g9
sg10
(dp4181
g2
VNot enough permissions.
p4182
sg13
(lp4183
g1116
asg4
(dp4184
g319
(dp4185
g8
g321
sg10
(dp4186
g25
(lp4187
(dp4188
g2
VNot enough permissions.
p4189
sg33
(lp4190
(dp4191
g275
V*
sg39
g33
sasasg2
g4189
sssg266
(dp4192
g8
g23
sg10
(dp4193
g25
(lp4194
(dp4195
g2
Vinitializes x; see help(type(x)) for signature
p4196
sg33
((dp4197
g9
(lp4198
g36
asg39
g40
s(dp4199
g275
V*
sg39
g33
stp4200
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4201
sssg873
(dp4202
g8
g793
sg10
(dp4203
g9
(lp4204
g877
assssg970
(lp4205
(dp4206
g16
Vbuiltins
p4207
sg18
VPermissionError
p4208
sag1116
ag1012
ag1080
ag15
asssVissubclass
p4209
(dp4210
g8
g321
sg10
(dp4211
g25
(lp4212
(dp4213
g28
(lp4214
g141
asg2
VReturn whether class C is a subclass (i.e., a derived class) of class B.\u000aWhen using a tuple as the second argument issubclass(X, (A, B, ...)),\u000ais a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
p4215
sg33
((dp4216
g39
VC
s(dp4217
g39
VB
stp4218
sasg2
Vissubclass(C, B) -> bool\u000a\u000aReturn whether class C is a subclass (i.e., a derived class) of class B.\u000aWhen using a tuple as the second argument issubclass(X, (A, B, ...)),\u000ais a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
p4219
sssVid
p4220
(dp4221
g8
g321
sg10
(dp4222
g25
(lp4223
(dp4224
g28
(lp4225
g108
asg2
VReturn the identity of an object.  This is guaranteed to be unique among\u000asimultaneously existing objects.  (Hint: it's the object's memory address.)
p4226
sg33
((dp4227
g39
Vobject
p4228
stp4229
sasg2
Vid(object) -> integer\u000a\u000aReturn the identity of an object.  This is guaranteed to be unique among\u000asimultaneously existing objects.  (Hint: it's the object's memory address.)
p4230
sssVEOFError
p4231
(dp4232
g8
g9
sg10
(dp4233
g2
VRead beyond end of file.
p4234
sg13
(lp4235
g1012
asg4
(dp4236
g319
(dp4237
g8
g321
sg10
(dp4238
g25
(lp4239
(dp4240
g2
VRead beyond end of file.
p4241
sg33
(lp4242
(dp4243
g275
V*
sg39
g33
sasasg2
g4241
sssg266
(dp4244
g8
g23
sg10
(dp4245
g25
(lp4246
(dp4247
g2
Vinitializes x; see help(type(x)) for signature
p4248
sg33
((dp4249
g9
(lp4250
g36
asg39
g40
s(dp4251
g275
V*
sg39
g33
stp4252
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4253
sssg873
(dp4254
g8
g793
sg10
(dp4255
g9
(lp4256
g877
assssg970
(lp4257
(dp4258
g16
Vbuiltins
p4259
sg18
VEOFError
p4260
sag1012
ag1080
ag15
asssVlocals
p4261
(dp4262
g8
g321
sg10
(dp4263
g25
(lp4264
(dp4265
g28
(lp4266
g999
asg2
VUpdate and return a dictionary containing the current scope's local variables.
p4267
sg33
(tsasg2
Vlocals() -> dictionary\u000a\u000aUpdate and return a dictionary containing the current scope's local variables.
p4268
sssVBufferError
p4269
(dp4270
g8
g9
sg10
(dp4271
g2
VBuffer error.
p4272
sg13
(lp4273
g1012
asg4
(dp4274
g319
(dp4275
g8
g321
sg10
(dp4276
g25
(lp4277
(dp4278
g2
VBuffer error.
p4279
sg33
(lp4280
(dp4281
g275
V*
sg39
g33
sasasg2
g4279
sssg266
(dp4282
g8
g23
sg10
(dp4283
g25
(lp4284
(dp4285
g2
Vinitializes x; see help(type(x)) for signature
p4286
sg33
((dp4287
g9
(lp4288
g36
asg39
g40
s(dp4289
g275
V*
sg39
g33
stp4290
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4291
sssg873
(dp4292
g8
g793
sg10
(dp4293
g9
(lp4294
g877
assssg970
(lp4295
(dp4296
g16
Vbuiltins
p4297
sg18
VBufferError
p4298
sag1012
ag1080
ag15
asssVProcessLookupError
p4299
(dp4300
g8
g9
sg10
(dp4301
g2
VProcess not found.
p4302
sg13
(lp4303
g1116
asg4
(dp4304
g319
(dp4305
g8
g321
sg10
(dp4306
g25
(lp4307
(dp4308
g2
VProcess not found.
p4309
sg33
(lp4310
(dp4311
g275
V*
sg39
g33
sasasg2
g4309
sssg266
(dp4312
g8
g23
sg10
(dp4313
g25
(lp4314
(dp4315
g2
Vinitializes x; see help(type(x)) for signature
p4316
sg33
((dp4317
g9
(lp4318
g36
asg39
g40
s(dp4319
g275
V*
sg39
g33
stp4320
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4321
sssg873
(dp4322
g8
g793
sg10
(dp4323
g9
(lp4324
g877
assssg970
(lp4325
(dp4326
g16
Vbuiltins
p4327
sg18
VProcessLookupError
p4328
sag1116
ag1012
ag1080
ag15
asssVConnectionError
p4329
(dp4330
g8
g9
sg10
(dp4331
g2
VConnection error.
p4332
sg13
(lp4333
g1116
asg4
(dp4334
g319
(dp4335
g8
g321
sg10
(dp4336
g25
(lp4337
(dp4338
g2
VConnection error.
p4339
sg33
(lp4340
(dp4341
g275
V*
sg39
g33
sasasg2
g4339
sssg266
(dp4342
g8
g23
sg10
(dp4343
g25
(lp4344
(dp4345
g2
Vinitializes x; see help(type(x)) for signature
p4346
sg33
((dp4347
g9
(lp4348
g36
asg39
g40
s(dp4349
g275
V*
sg39
g33
stp4350
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4351
sssg873
(dp4352
g8
g793
sg10
(dp4353
g9
(lp4354
g877
assssg970
(lp4355
g1088
ag1116
ag1012
ag1080
ag15
asssVFloatingPointError
p4356
(dp4357
g8
g9
sg10
(dp4358
g2
VFloating point operation failed.
p4359
sg13
(lp4360
(dp4361
g16
Vbuiltins
p4362
sg18
VArithmeticError
p4363
sasg4
(dp4364
g319
(dp4365
g8
g321
sg10
(dp4366
g25
(lp4367
(dp4368
g2
VFloating point operation failed.
p4369
sg33
(lp4370
(dp4371
g275
V*
sg39
g33
sasasg2
g4369
sssg266
(dp4372
g8
g23
sg10
(dp4373
g25
(lp4374
(dp4375
g2
Vinitializes x; see help(type(x)) for signature
p4376
sg33
((dp4377
g9
(lp4378
g36
asg39
g40
s(dp4379
g275
V*
sg39
g33
stp4380
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4381
sssg873
(dp4382
g8
g793
sg10
(dp4383
g9
(lp4384
g877
assssg970
(lp4385
(dp4386
g16
Vbuiltins
p4387
sg18
VFloatingPointError
p4388
sag4361
ag1012
ag1080
ag15
asssVsum
p4389
(dp4390
g8
g321
sg10
(dp4391
g25
(lp4392
(dp4393
g28
(lp4394
(dp4395
g18
Vvalue
p4396
sasg2
VReturns the sum of an iterable of numbers (NOT strings) plus the value\u000aof parameter 'start' (which defaults to 0).  When the iterable is\u000aempty, returns start.
p4397
sg33
((dp4398
g39
Viterable
p4399
s(dp4400
g67
g68
sg39
Vstart
p4401
stp4402
sasg2
Vsum(iterable[, start]) -> value\u000a\u000aReturns the sum of an iterable of numbers (NOT strings) plus the value\u000aof parameter 'start' (which defaults to 0).  When the iterable is\u000aempty, returns start.
p4403
sssVgetattr
p4404
(dp4405
g8
g321
sg10
(dp4406
g25
(lp4407
(dp4408
g28
(lp4409
g4395
asg2
VGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\u000aWhen a default argument is given, it is returned when the attribute doesn't\u000aexist; without it, an exception is raised in that case.
p4410
sg33
((dp4411
g39
Vobject
p4412
s(dp4413
g39
Vname
p4414
s(dp4415
g67
g68
sg39
Vdefault
p4416
stp4417
sasg2
Vgetattr(object, name[, default]) -> value\u000a\u000aGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\u000aWhen a default argument is given, it is returned when the attribute doesn't\u000aexist; without it, an exception is raised in that case.
p4418
sssVabs
p4419
(dp4420
g8
g321
sg10
(dp4421
g25
(lp4422
(dp4423
g28
(lp4424
g108
asg2
VReturn the absolute value of the argument.
p4425
sg33
((dp4426
g39
Vnumber
p4427
stp4428
sasg2
Vabs(number) -> number\u000a\u000aReturn the absolute value of the argument.
p4429
sssVConnectionRefusedError
p4430
(dp4431
g8
g9
sg10
(dp4432
g2
VConnection refused.
p4433
sg13
(lp4434
g1088
asg4
(dp4435
g319
(dp4436
g8
g321
sg10
(dp4437
g25
(lp4438
(dp4439
g2
VConnection refused.
p4440
sg33
(lp4441
(dp4442
g275
V*
sg39
g33
sasasg2
g4440
sssg266
(dp4443
g8
g23
sg10
(dp4444
g25
(lp4445
(dp4446
g2
Vinitializes x; see help(type(x)) for signature
p4447
sg33
((dp4448
g9
(lp4449
g36
asg39
g40
s(dp4450
g275
V*
sg39
g33
stp4451
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4452
sssg873
(dp4453
g8
g793
sg10
(dp4454
g9
(lp4455
g877
assssg970
(lp4456
(dp4457
g16
Vbuiltins
p4458
sg18
VConnectionRefusedError
p4459
sag1088
ag1116
ag1012
ag1080
ag15
asssVprint
p4460
(dp4461
g8
g321
sg10
(dp4462
g25
(lp4463
(dp4464
g2
VPrints the values to a stream, or to sys.stdout by default.\u000aOptional keyword arguments:\u000afile:  a file-like object (stream); defaults to the current sys.stdout.\u000asep:   string inserted between values, default a space.\u000aend:   string appended after the last value, default a newline.\u000aflush: whether to forcibly flush the stream.
p4465
sg33
((dp4466
g39
Vvalue
p4467
s(dp4468
g275
V*
sg39
g33
s(dp4469
g67
V,
sg39
Vsep
p4470
s(dp4471
g67
Vn
sg39
Vend
p4472
s(dp4473
g67
Vsys
p4474
sg39
Vfile
p4475
s(dp4476
g9
(lp4477
(dp4478
g18
V.
sasg39
Vstdout
p4479
s(dp4480
g67
VFalse
p4481
sg9
(lp4482
g4478
asg39
Vflush
p4483
stp4484
sasg2
Vprint(value, ..., sep=' ', end='\u005cn', file=sys.stdout, flush=False)\u000a\u000aPrints the values to a stream, or to sys.stdout by default.\u000aOptional keyword arguments:\u000afile:  a file-like object (stream); defaults to the current sys.stdout.\u000asep:   string inserted between values, default a space.\u000aend:   string appended after the last value, default a newline.\u000aflush: whether to forcibly flush the stream.
p4485
sssVellipsis
p4486
(dp4487
g8
g9
sg10
(dp4488
g13
(lp4489
g15
asg1362
I01
sg970
(lp4490
(dp4491
g16
Vbuiltins
p4492
sg18
Vellipsis
p4493
sag15
asg4
(dp4494
g873
(dp4495
g8
g793
sg10
(dp4496
g9
(lp4497
g934
asssg507
(dp4498
g8
g23
sg10
(dp4499
g25
(lp4500
(dp4501
g2
V==> repr(x)
p4502
sg33
((dp4503
g9
(lp4504
g36
asg39
g40
stp4505
sasg2
Vx.__repr__() <==> repr(x)
p4506
sssg319
(dp4507
g8
g321
sg10
(dp4508
g25
(lp4509
(dp4510
g2
V
sg33
(lp4511
(dp4512
g275
V*
sg39
g33
sasasg2
V
ssssssVTrue
p4513
(dp4514
g8
g793
sg10
(dp4515
g9
(lp4516
g2461
asssVFutureWarning
p4517
(dp4518
g8
g9
sg10
(dp4519
g2
VBase class for warnings about constructs that will change semantically\u000ain the future.
p4520
sg13
(lp4521
g1753
asg4
(dp4522
g319
(dp4523
g8
g321
sg10
(dp4524
g25
(lp4525
(dp4526
g2
VBase class for warnings about constructs that will change semantically\u000ain the future.
p4527
sg33
(lp4528
(dp4529
g275
V*
sg39
g33
sasasg2
g4527
sssg266
(dp4530
g8
g23
sg10
(dp4531
g25
(lp4532
(dp4533
g2
Vinitializes x; see help(type(x)) for signature
p4534
sg33
((dp4535
g9
(lp4536
g36
asg39
g40
s(dp4537
g275
V*
sg39
g33
stp4538
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4539
sssg873
(dp4540
g8
g793
sg10
(dp4541
g9
(lp4542
g877
assssg970
(lp4543
(dp4544
g16
Vbuiltins
p4545
sg18
VFutureWarning
p4546
sag1753
ag1012
ag1080
ag15
asssVImportWarning
p4547
(dp4548
g8
g9
sg10
(dp4549
g2
VBase class for warnings about probable mistakes in module imports
p4550
sg13
(lp4551
g1753
asg4
(dp4552
g319
(dp4553
g8
g321
sg10
(dp4554
g25
(lp4555
(dp4556
g2
VBase class for warnings about probable mistakes in module imports
p4557
sg33
(lp4558
(dp4559
g275
V*
sg39
g33
sasasg2
g4557
sssg266
(dp4560
g8
g23
sg10
(dp4561
g25
(lp4562
(dp4563
g2
Vinitializes x; see help(type(x)) for signature
p4564
sg33
((dp4565
g9
(lp4566
g36
asg39
g40
s(dp4567
g275
V*
sg39
g33
stp4568
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4569
sssg873
(dp4570
g8
g793
sg10
(dp4571
g9
(lp4572
g877
assssg970
(lp4573
(dp4574
g16
Vbuiltins
p4575
sg18
VImportWarning
p4576
sag1753
ag1012
ag1080
ag15
asssg68
(dp4577
g8
g793
sg10
(dp4578
g9
(lp4579
g934
asssVhash
p4580
(dp4581
g8
g321
sg10
(dp4582
g25
(lp4583
(dp4584
g28
(lp4585
g108
asg2
VReturn a hash value for the object.  Two objects with the same value have\u000athe same hash value.  The reverse is not necessarily true, but likely.
p4586
sg33
((dp4587
g39
Vobject
p4588
stp4589
sasg2
Vhash(object) -> integer\u000a\u000aReturn a hash value for the object.  Two objects with the same value have\u000athe same hash value.  The reverse is not necessarily true, but likely.
p4590
sssVUnicodeDecodeError
p4591
(dp4592
g8
g9
sg10
(dp4593
g2
VUnicode decoding error.
p4594
sg13
(lp4595
g4114
asg4
(dp4596
g4118
(dp4597
g8
g1025
sg10
(dp4598
g2
Vexception end
p4599
sg9
(lp4600
g15
asssg319
(dp4601
g8
g321
sg10
(dp4602
g25
(lp4603
(dp4604
g2
VUnicode decoding error.
p4605
sg33
(lp4606
(dp4607
g275
V*
sg39
g33
sasasg2
g4605
sssg4130
(dp4608
g8
g1025
sg10
(dp4609
g2
Vexception encoding
p4610
sg9
(lp4611
g15
asssg72
(dp4612
g8
g23
sg10
(dp4613
g25
(lp4614
(dp4615
g2
V==> str(x)
p4616
sg33
((dp4617
g9
(lp4618
g36
asg39
g40
stp4619
sasg2
Vx.__str__() <==> str(x)
p4620
sssg4144
(dp4621
g8
g1025
sg10
(dp4622
g2
Vexception object
p4623
sg9
(lp4624
g15
asssg4149
(dp4625
g8
g1025
sg10
(dp4626
g2
Vexception start
p4627
sg9
(lp4628
g15
asssg4154
(dp4629
g8
g1025
sg10
(dp4630
g2
Vexception reason
p4631
sg9
(lp4632
g15
asssg873
(dp4633
g8
g793
sg10
(dp4634
g9
(lp4635
g877
asssg266
(dp4636
g8
g23
sg10
(dp4637
g25
(lp4638
(dp4639
g2
Vinitializes x; see help(type(x)) for signature
p4640
sg33
((dp4641
g9
(lp4642
g36
asg39
g40
s(dp4643
g275
V*
sg39
g33
stp4644
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p4645
ssssg970
(lp4646
(dp4647
g16
Vbuiltins
p4648
sg18
VUnicodeDecodeError
p4649
sag4114
ag4176
ag1012
ag1080
ag15
asssVbytes_iterator
p4650
(dp4651
g8
g9
sg10
(dp4652
g13
(lp4653
g15
asg1362
I01
sg970
(lp4654
(dp4655
g16
Vbuiltins
p4656
sg18
Vbytes_iterator
p4657
sag15
asg4
(dp4658
g1368
(dp4659
g8
g23
sg10
(dp4660
g25
(lp4661
(dp4662
g2
V==> next(x)
p4663
sg33
((dp4664
g9
(lp4665
g36
asg39
g40
stp4666
sasg2
Vx.__next__() <==> next(x)
p4667
sssg319
(dp4668
g8
g321
sg10
(dp4669
g25
(lp4670
(dp4671
g2
V
sg33
(lp4672
(dp4673
g275
V*
sg39
g33
sasasg2
V
sssg1384
(dp4674
g8
g23
sg10
(dp4675
g25
Nsg2
VSet state information for unpickling.
p4676
sssg1388
(dp4677
g8
g23
sg10
(dp4678
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p4679
sssg82
(dp4680
g8
g23
sg10
(dp4681
g25
Nsg2
VReturn state information for pickling.
p4682
sssg621
(dp4683
g8
g23
sg10
(dp4684
g25
(lp4685
(dp4686
g2
V==> iter(x)
p4687
sg33
((dp4688
g9
(lp4689
g36
asg39
g40
stp4690
sasg2
Vx.__iter__() <==> iter(x)
p4691
sssg873
(dp4692
g8
g793
sg10
(dp4693
g9
(lp4694
g934
assssssVlen
p4695
(dp4696
g8
g321
sg10
(dp4697
g25
(lp4698
(dp4699
g28
(lp4700
g108
asg2
VReturn the number of items of a sequence or mapping.
p4701
sg33
((dp4702
g39
Vobject
p4703
stp4704
sasg2
Vlen(object) -> integer\u000a\u000aReturn the number of items of a sequence or mapping.
p4705
sssVcredits
p4706
(dp4707
g8
g793
sg10
(dp4708
g9
(lp4709
g1476
asssVfrozenset
p4710
(dp4711
g8
g9
sg10
(dp4712
g2
Vfrozenset() -> empty frozenset object\u000afrozenset(iterable) -> frozenset object\u000a\u000aBuild an immutable unordered collection of unique elements.
p4713
sg13
(lp4714
g15
asg4
(dp4715
g1487
(dp4716
g8
g23
sg10
(dp4717
g25
(lp4718
(dp4719
g2
V==> y|x
p4720
sg33
((dp4721
g9
(lp4722
g36
asg39
g40
s(dp4723
g39
Vy
stp4724
sasg2
Vx.__ror__(y) <==> y|x
p4725
sssg3362
(dp4726
g8
g23
sg10
(dp4727
g25
Nsg2
VReport whether another set contains this set.
p4728
sssg3348
(dp4729
g8
g23
sg10
(dp4730
g25
Nsg2
VReturn the symmetric difference of two sets as a new set.\u000a\u000a(i.e. all elements that are in exactly one of the sets.)
p4731
sssg699
(dp4732
g8
g23
sg10
(dp4733
g25
Nsg2
VReturn a shallow copy of a set.
p4734
sssg82
(dp4735
g8
g23
sg10
(dp4736
g25
Nsg2
VReturn state information for pickling.
p4737
sssg3358
(dp4738
g8
g23
sg10
(dp4739
g25
Nsg2
VReport whether this set contains another set.
p4740
sssg1498
(dp4741
g8
g23
sg10
(dp4742
g25
(lp4743
(dp4744
g2
V==> y-x
p4745
sg33
((dp4746
g9
(lp4747
g36
asg39
g40
s(dp4748
g39
Vy
stp4749
sasg2
Vx.__rsub__(y) <==> y-x
p4750
sssg1509
(dp4751
g8
g23
sg10
(dp4752
g25
(lp4753
(dp4754
g2
V==> x&y
p4755
sg33
((dp4756
g9
(lp4757
g36
asg39
g40
s(dp4758
g39
Vy
stp4759
sasg2
Vx.__and__(y) <==> x&y
p4760
sssg223
(dp4761
g8
g23
sg10
(dp4762
g25
(lp4763
(dp4764
g2
V==> x<y
p4765
sg33
((dp4766
g9
(lp4767
g36
asg39
g40
s(dp4768
g39
Vy
stp4769
sasg2
Vx.__lt__(y) <==> x<y
p4770
sssg726
(dp4771
g8
g23
sg10
(dp4772
g25
(lp4773
(dp4774
g28
(lp4775
g840
asg2
Vsize of S in memory, in bytes
p4776
sg33
((dp4777
g9
(lp4778
g36
asg39
g40
stp4779
sasg2
VS.__sizeof__() -> size of S in memory, in bytes
p4780
sssg1530
(dp4781
g8
g23
sg10
(dp4782
g25
(lp4783
(dp4784
g2
V==> y&x
p4785
sg33
((dp4786
g9
(lp4787
g36
asg39
g40
s(dp4788
g39
Vy
stp4789
sasg2
Vx.__rand__(y) <==> y&x
p4790
sssg3480
(dp4791
g8
g23
sg10
(dp4792
g25
Nsg2
VReturn the difference of two or more sets as a new set.\u000a\u000a(i.e. all elements that are in this set but not the others.)
p4793
sssg319
(dp4794
g8
g321
sg10
(dp4795
g25
(lp4796
(dp4797
g28
(lp4798
(dp4799
g18
Vempty
p4800
sasg2
VBuild an immutable unordered collection of unique elements.
p4801
sg33
((dp4802
g9
(lp4803
g329
asg39
g332
stp4804
sa(dp4805
g28
(lp4806
(dp4807
g16
Vbuiltins
p4808
sg18
Vfrozenset
p4809
sasg2
g4801
sg33
(g4802
(dp4810
g39
Viterable
p4811
stp4812
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p4813
sssg361
(dp4814
g8
g23
sg10
(dp4815
g25
(lp4816
(dp4817
g2
V==> y in x.
p4818
sg33
((dp4819
g9
(lp4820
g36
asg39
g40
s(dp4821
g39
Vy
stp4822
sasg2
Vx.__contains__(y) <==> y in x.
p4823
sssg3468
(dp4824
g8
g23
sg10
(dp4825
g25
Nsg2
VReturn the union of sets as a new set.\u000a\u000a(i.e. all elements that are in either set.)
p4826
sssg873
(dp4827
g8
g793
sg10
(dp4828
g9
(lp4829
g877
asssg497
(dp4830
g8
g23
sg10
(dp4831
g25
(lp4832
(dp4833
g2
V==> len(x)
p4834
sg33
((dp4835
g9
(lp4836
g36
asg39
g40
stp4837
sasg2
Vx.__len__() <==> len(x)
p4838
sssg43
(dp4839
g8
g23
sg10
(dp4840
g25
(lp4841
(dp4842
g2
V==> x!=y
p4843
sg33
((dp4844
g9
(lp4845
g36
asg39
g40
s(dp4846
g39
Vy
stp4847
sasg2
Vx.__ne__(y) <==> x!=y
p4848
sssg621
(dp4849
g8
g23
sg10
(dp4850
g25
(lp4851
(dp4852
g2
V==> iter(x)
p4853
sg33
((dp4854
g9
(lp4855
g36
asg39
g40
stp4856
sasg2
Vx.__iter__() <==> iter(x)
p4857
sssg1588
(dp4858
g8
g23
sg10
(dp4859
g25
(lp4860
(dp4861
g2
V==> x|y
p4862
sg33
((dp4863
g9
(lp4864
g36
asg39
g40
s(dp4865
g39
Vy
stp4866
sasg2
Vx.__or__(y) <==> x|y
p4867
sssg677
(dp4868
g8
g23
sg10
(dp4869
g25
(lp4870
(dp4871
g2
V==> x>y
p4872
sg33
((dp4873
g9
(lp4874
g36
asg39
g40
s(dp4875
g39
Vy
stp4876
sasg2
Vx.__gt__(y) <==> x>y
p4877
sssg3553
(dp4878
g8
g23
sg10
(dp4879
g25
Nsg2
VReturn the intersection of two sets as a new set.\u000a\u000a(i.e. all elements that are in both sets.)
p4880
sssg460
(dp4881
g8
g23
sg10
(dp4882
g25
(lp4883
(dp4884
g2
V==> x==y
p4885
sg33
((dp4886
g9
(lp4887
g36
asg39
g40
s(dp4888
g39
Vy
stp4889
sasg2
Vx.__eq__(y) <==> x==y
p4890
sssg1619
(dp4891
g8
g23
sg10
(dp4892
g25
(lp4893
(dp4894
g2
V==> y^x
p4895
sg33
((dp4896
g9
(lp4897
g36
asg39
g40
s(dp4898
g39
Vy
stp4899
sasg2
Vx.__rxor__(y) <==> y^x
p4900
sssg1630
(dp4901
g8
g23
sg10
(dp4902
g25
Nsg2
VReturn True if two sets have a null intersection.
p4903
sssg1634
(dp4904
g8
g23
sg10
(dp4905
g25
(lp4906
(dp4907
g2
V==> x^y
p4908
sg33
((dp4909
g9
(lp4910
g36
asg39
g40
s(dp4911
g39
Vy
stp4912
sasg2
Vx.__xor__(y) <==> x^y
p4913
sssg908
(dp4914
g8
g23
sg10
(dp4915
g25
(lp4916
(dp4917
g2
V==> x<=y
p4918
sg33
((dp4919
g9
(lp4920
g36
asg39
g40
s(dp4921
g39
Vy
stp4922
sasg2
Vx.__le__(y) <==> x<=y
p4923
sssg507
(dp4924
g8
g23
sg10
(dp4925
g25
(lp4926
(dp4927
g2
V==> repr(x)
p4928
sg33
((dp4929
g9
(lp4930
g36
asg39
g40
stp4931
sasg2
Vx.__repr__() <==> repr(x)
p4932
sssg930
(dp4933
g8
g23
sg10
(dp4934
g25
(lp4935
(dp4936
g2
V==> hash(x)
p4937
sg33
((dp4938
g9
(lp4939
g36
asg39
g40
stp4940
sasg2
Vx.__hash__() <==> hash(x)
p4941
sssg1667
(dp4942
g8
g23
sg10
(dp4943
g25
(lp4944
(dp4945
g2
V==> x-y
p4946
sg33
((dp4947
g9
(lp4948
g36
asg39
g40
s(dp4949
g39
Vy
stp4950
sasg2
Vx.__sub__(y) <==> x-y
p4951
sssg959
(dp4952
g8
g23
sg10
(dp4953
g25
(lp4954
(dp4955
g2
V==> x>=y
p4956
sg33
((dp4957
g9
(lp4958
g36
asg39
g40
s(dp4959
g39
Vy
stp4960
sasg2
Vx.__ge__(y) <==> x>=y
p4961
ssssg970
(lp4962
(dp4963
g16
Vbuiltins
p4964
sg18
Vfrozenset
p4965
sag15
asssVlist_iterator
p4966
(dp4967
g8
g9
sg10
(dp4968
g13
(lp4969
g15
asg1362
I01
sg970
(lp4970
(dp4971
g16
Vbuiltins
p4972
sg18
Vlist_iterator
p4973
sag15
asg4
(dp4974
g1368
(dp4975
g8
g23
sg10
(dp4976
g25
(lp4977
(dp4978
g2
V==> next(x)
p4979
sg33
((dp4980
g9
(lp4981
g36
asg39
g40
stp4982
sasg2
Vx.__next__() <==> next(x)
p4983
sssg319
(dp4984
g8
g321
sg10
(dp4985
g25
(lp4986
(dp4987
g2
V
sg33
(lp4988
(dp4989
g275
V*
sg39
g33
sasasg2
V
sssg1384
(dp4990
g8
g23
sg10
(dp4991
g25
Nsg2
VSet state information for unpickling.
p4992
sssg1388
(dp4993
g8
g23
sg10
(dp4994
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p4995
sssg82
(dp4996
g8
g23
sg10
(dp4997
g25
Nsg2
VReturn state information for pickling.
p4998
sssg621
(dp4999
g8
g23
sg10
(dp5000
g25
(lp5001
(dp5002
g2
V==> iter(x)
p5003
sg33
((dp5004
g9
(lp5005
g36
asg39
g40
stp5006
sasg2
Vx.__iter__() <==> iter(x)
p5007
sssg873
(dp5008
g8
g793
sg10
(dp5009
g9
(lp5010
g934
assssssg2420
(dp5011
g8
g793
sg10
(dp5012
g9
(lp5013
g877
asssVord
p5014
(dp5015
g8
g321
sg10
(dp5016
g25
(lp5017
(dp5018
g28
(lp5019
g108
asg2
VReturn the integer ordinal of a one-character string.
p5020
sg33
((dp5021
g39
Vc
stp5022
sasg2
Vord(c) -> integer\u000a\u000aReturn the integer ordinal of a one-character string.
p5023
sssVsuper
p5024
(dp5025
g8
g9
sg10
(dp5026
g2
Vsuper() -> same as super(__class__, <first argument>)\u000asuper(type) -> unbound super object\u000asuper(type, obj) -> bound super object; requires isinstance(obj, type)\u000asuper(type, type2) -> bound super object; requires issubclass(type2, type)\u000aTypical use to call a cooperative superclass method:\u000aclass C(B):\u000a    def meth(self, arg):\u000a        super().meth(arg)\u000aThis works for class methods too:\u000aclass C(B):\u000a    @classmethod\u000a    def cmeth(cls, arg):\u000a        super().cmeth(arg)\u000a
p5027
sg13
(lp5028
g15
asg4
(dp5029
V__thisclass__
p5030
(dp5031
g8
g1025
sg10
(dp5032
g2
Vthe class invoking super()
p5033
sg9
(lp5034
g15
asssg319
(dp5035
g8
g321
sg10
(dp5036
g25
(lp5037
(dp5038
g28
(lp5039
(dp5040
g18
Vsame
p5041
sasg2
V(__class__, <first argument>)\u000asuper(type) -> unbound super object\u000asuper(type, obj) -> bound super object; requires isinstance(obj, type)\u000asuper(type, type2) -> bound super object; requires issubclass(type2, type)\u000aTypical use to call a cooperative superclass method:\u000aclass C(B):\u000a    def meth(self, arg):\u000a        super().meth(arg)\u000aThis works for class methods too:\u000aclass C(B):\u000a    @classmethod\u000a    def cmeth(cls, arg):\u000a        super().cmeth(arg)\u000a
p5042
sg33
((dp5043
g9
(lp5044
g329
asg39
g332
stp5045
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p5046
sssV__self_class__
p5047
(dp5048
g8
g1025
sg10
(dp5049
g2
Vthe type of the instance invoking super(); may be None
p5050
sg9
(lp5051
g15
asssg2363
(dp5052
g8
g1025
sg10
(dp5053
g2
Vthe instance invoking super(); may be None
p5054
sg9
(lp5055
g15
asssg507
(dp5056
g8
g23
sg10
(dp5057
g25
(lp5058
(dp5059
g2
V==> repr(x)
p5060
sg33
((dp5061
g9
(lp5062
g36
asg39
g40
stp5063
sasg2
Vx.__repr__() <==> repr(x)
p5064
sssg873
(dp5065
g8
g793
sg10
(dp5066
g9
(lp5067
g877
asssg266
(dp5068
g8
g23
sg10
(dp5069
g25
(lp5070
(dp5071
g2
Vinitializes x; see help(type(x)) for signature
p5072
sg33
((dp5073
g9
(lp5074
g36
asg39
g40
s(dp5075
g275
V*
sg39
g33
stp5076
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5077
sssV__get__
p5078
(dp5079
g8
g23
sg10
(dp5080
g25
(lp5081
(dp5082
g28
(lp5083
g4395
asg2
V
sg33
((dp5084
g9
(lp5085
g36
asg39
g40
s(dp5086
g39
Vobj
p5087
s(dp5088
g67
g68
sg39
Vtype
p5089
stp5090
sasg2
Vdescr.__get__(obj[, type]) -> value
p5091
ssssg970
(lp5092
(dp5093
g16
Vbuiltins
p5094
sg18
Vsuper
p5095
sag15
asssVUnicodeError
p5096
(dp5097
g8
g9
sg10
(dp5098
g2
VUnicode related error.
p5099
sg13
(lp5100
g4176
asg4
(dp5101
g319
(dp5102
g8
g321
sg10
(dp5103
g25
(lp5104
(dp5105
g2
VUnicode related error.
p5106
sg33
(lp5107
(dp5108
g275
V*
sg39
g33
sasasg2
g5106
sssg266
(dp5109
g8
g23
sg10
(dp5110
g25
(lp5111
(dp5112
g2
Vinitializes x; see help(type(x)) for signature
p5113
sg33
((dp5114
g9
(lp5115
g36
asg39
g40
s(dp5116
g275
V*
sg39
g33
stp5117
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5118
sssg873
(dp5119
g8
g793
sg10
(dp5120
g9
(lp5121
g877
assssg970
(lp5122
g4114
ag4176
ag1012
ag1080
ag15
asssVTypeError
p5123
(dp5124
g8
g9
sg10
(dp5125
g2
VInappropriate argument type.
p5126
sg13
(lp5127
g1012
asg4
(dp5128
g319
(dp5129
g8
g321
sg10
(dp5130
g25
(lp5131
(dp5132
g2
VInappropriate argument type.
p5133
sg33
(lp5134
(dp5135
g275
V*
sg39
g33
sasasg2
g5133
sssg266
(dp5136
g8
g23
sg10
(dp5137
g25
(lp5138
(dp5139
g2
Vinitializes x; see help(type(x)) for signature
p5140
sg33
((dp5141
g9
(lp5142
g36
asg39
g40
s(dp5143
g275
V*
sg39
g33
stp5144
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5145
sssg873
(dp5146
g8
g793
sg10
(dp5147
g9
(lp5148
g877
assssg970
(lp5149
(dp5150
g16
Vbuiltins
p5151
sg18
VTypeError
p5152
sag1012
ag1080
ag15
asssVgenerator
p5153
(dp5154
g8
g9
sg10
(dp5155
g13
(lp5156
g15
asg1362
I01
sg970
(lp5157
(dp5158
g16
Vbuiltins
p5159
sg18
Vgenerator
p5160
sag15
asg4
(dp5161
Vgi_running
p5162
(dp5163
g8
g1025
sg10
(dp5164
g9
(lp5165
g15
asssg319
(dp5166
g8
g321
sg10
(dp5167
g25
(lp5168
(dp5169
g2
V
sg33
(lp5170
(dp5171
g275
V*
sg39
g33
sasasg2
V
sssg1368
(dp5172
g8
g23
sg10
(dp5173
g25
(lp5174
(dp5175
g2
V==> next(x)
p5176
sg33
((dp5177
g9
(lp5178
g36
asg39
g40
stp5179
sasg2
Vx.__next__() <==> next(x)
p5180
sssVsend
p5181
(dp5182
g8
g23
sg10
(dp5183
g25
(lp5184
(dp5185
g28
(lp5186
g840
asg2
Vsend 'arg' into generator,\u000areturn next yielded value or raise StopIteration.
p5187
sg33
((dp5188
g9
(lp5189
g36
asg39
g40
s(dp5190
g39
Varg
p5191
stp5192
sasg2
Vsend(arg) -> send 'arg' into generator,\u000areturn next yielded value or raise StopIteration.
p5193
sssg873
(dp5194
g8
g793
sg10
(dp5195
g9
(lp5196
g934
asssg621
(dp5197
g8
g23
sg10
(dp5198
g25
(lp5199
(dp5200
g2
V==> iter(x)
p5201
sg33
((dp5202
g9
(lp5203
g36
asg39
g40
stp5204
sasg2
Vx.__iter__() <==> iter(x)
p5205
sssg507
(dp5206
g8
g23
sg10
(dp5207
g25
(lp5208
(dp5209
g2
V==> repr(x)
p5210
sg33
((dp5211
g9
(lp5212
g36
asg39
g40
stp5213
sasg2
Vx.__repr__() <==> repr(x)
p5214
sssVclose
p5215
(dp5216
g8
g23
sg10
(dp5217
g25
(lp5218
(dp5219
g28
(lp5220
(dp5221
g18
Vraise
p5222
sasg2
V.
sg33
((dp5223
g9
(lp5224
g36
asg39
g40
stp5225
sasg2
Vclose() -> raise GeneratorExit inside generator.
p5226
sssg2420
(dp5227
g8
g1025
sg10
(dp5228
g2
VReturn the name of the generator's associated code object.
p5229
sg9
(lp5230
g15
asssVthrow
p5231
(dp5232
g8
g23
sg10
(dp5233
g25
(lp5234
(dp5235
g28
(lp5236
g840
asg2
Vraise exception in generator,\u000areturn next yielded value or raise StopIteration.
p5237
sg33
((dp5238
g9
(lp5239
g36
asg39
g40
s(dp5240
g39
Vtyp
p5241
s(dp5242
g67
g68
sg39
Vval
p5243
s(dp5244
g67
g68
sg39
Vtb
p5245
stp5246
sasg2
Vthrow(typ[,val[,tb]]) -> raise exception in generator,\u000areturn next yielded value or raise StopIteration.
p5247
sssVgi_frame
p5248
(dp5249
g8
g1025
sg10
(dp5250
g9
(lp5251
g15
asssVgi_code
p5252
(dp5253
g8
g1025
sg10
(dp5254
g9
(lp5255
g15
assssssVlicense
p5256
(dp5257
g8
g793
sg10
(dp5258
g9
(lp5259
g1476
asssVKeyboardInterrupt
p5260
(dp5261
g8
g9
sg10
(dp5262
g2
VProgram interrupted by user.
p5263
sg13
(lp5264
g1080
asg4
(dp5265
g319
(dp5266
g8
g321
sg10
(dp5267
g25
(lp5268
(dp5269
g2
VProgram interrupted by user.
p5270
sg33
(lp5271
(dp5272
g275
V*
sg39
g33
sasasg2
g5270
sssg266
(dp5273
g8
g23
sg10
(dp5274
g25
(lp5275
(dp5276
g2
Vinitializes x; see help(type(x)) for signature
p5277
sg33
((dp5278
g9
(lp5279
g36
asg39
g40
s(dp5280
g275
V*
sg39
g33
stp5281
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5282
sssg873
(dp5283
g8
g793
sg10
(dp5284
g9
(lp5285
g877
assssg970
(lp5286
(dp5287
g16
Vbuiltins
p5288
sg18
VKeyboardInterrupt
p5289
sag1080
ag15
asssVUserWarning
p5290
(dp5291
g8
g9
sg10
(dp5292
g2
VBase class for warnings generated by user code.
p5293
sg13
(lp5294
g1753
asg4
(dp5295
g319
(dp5296
g8
g321
sg10
(dp5297
g25
(lp5298
(dp5299
g2
VBase class for warnings generated by user code.
p5300
sg33
(lp5301
(dp5302
g275
V*
sg39
g33
sasasg2
g5300
sssg266
(dp5303
g8
g23
sg10
(dp5304
g25
(lp5305
(dp5306
g2
Vinitializes x; see help(type(x)) for signature
p5307
sg33
((dp5308
g9
(lp5309
g36
asg39
g40
s(dp5310
g275
V*
sg39
g33
stp5311
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5312
sssg873
(dp5313
g8
g793
sg10
(dp5314
g9
(lp5315
g877
assssg970
(lp5316
(dp5317
g16
Vbuiltins
p5318
sg18
VUserWarning
p5319
sag1753
ag1012
ag1080
ag15
asssVfilter
p5320
(dp5321
g8
g9
sg10
(dp5322
g2
Vfilter(function or None, iterable) --> filter object\u000a\u000aReturn an iterator yielding those items of iterable for which function(item)\u000ais true. If function is None, return the items that are true.
p5323
sg13
(lp5324
g15
asg4
(dp5325
g621
(dp5326
g8
g23
sg10
(dp5327
g25
(lp5328
(dp5329
g2
V==> iter(x)
p5330
sg33
((dp5331
g9
(lp5332
g36
asg39
g40
stp5333
sasg2
Vx.__iter__() <==> iter(x)
p5334
sssg1368
(dp5335
g8
g23
sg10
(dp5336
g25
(lp5337
(dp5338
g2
V==> next(x)
p5339
sg33
((dp5340
g9
(lp5341
g36
asg39
g40
stp5342
sasg2
Vx.__next__() <==> next(x)
p5343
sssg82
(dp5344
g8
g23
sg10
(dp5345
g25
Nsg2
VReturn state information for pickling.
p5346
sssg319
(dp5347
g8
g321
sg10
(dp5348
g25
(lp5349
(dp5350
g28
(lp5351
(dp5352
g16
Vbuiltins
p5353
sg18
Vfilter
p5354
sasg2
VReturn an iterator yielding those items of iterable for which function(item)\u000ais true. If function is None, return the items that are true.
p5355
sg33
((dp5356
g9
(lp5357
g329
asg39
g332
s(dp5358
g9
(lp5359
(dp5360
g18
Vfunction
p5361
sasg39
Vor
p5362
s(dp5363
g9
(lp5364
g5360
asg39
VNone
p5365
s(dp5366
g9
(lp5367
g5360
asg39
Viterable
p5368
stp5369
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p5370
sssg873
(dp5371
g8
g793
sg10
(dp5372
g9
(lp5373
g877
assssg970
(lp5374
(dp5375
g16
Vbuiltins
p5376
sg18
Vfilter
p5377
sag15
asssVrange
p5378
(dp5379
g8
g9
sg10
(dp5380
g2
Vrange([start,] stop[, step]) -> range object\u000a\u000aReturns a virtual sequence of numbers from start to stop by step.
p5381
sg13
(lp5382
g15
asg4
(dp5383
g752
(dp5384
g8
g23
sg10
(dp5385
g25
(lp5386
(dp5387
g28
(lp5388
g108
asg2
V
sg33
((dp5389
g9
(lp5390
g36
asg39
g40
s(dp5391
g39
Vvalue
p5392
stp5393
sasg2
Vrangeobject.count(value) -> integer -- return number of occurrences of value
p5394
sssg558
(dp5395
g8
g23
sg10
(dp5396
g25
(lp5397
(dp5398
g28
(lp5399
g108
asg2
V.\u000aRaises ValueError if the value is not present.
p5400
sg33
((dp5401
g9
(lp5402
g36
asg39
g40
s(dp5403
g39
Vvalue
p5404
s(dp5405
g67
g68
sg39
Vstart
p5406
s(dp5407
g67
g68
sg39
Vstop
p5408
stp5409
sasg2
Vrangeobject.index(value, [start, [stop]]) -> integer -- return index of value.\u000aRaises ValueError if the value is not present.
p5410
sssg3981
(dp5411
g8
g23
sg10
(dp5412
g25
Nsg2
VReturns a reverse iterator.
p5413
sssg43
(dp5414
g8
g23
sg10
(dp5415
g25
(lp5416
(dp5417
g2
V==> x!=y
p5418
sg33
((dp5419
g9
(lp5420
g36
asg39
g40
s(dp5421
g39
Vy
stp5422
sasg2
Vx.__ne__(y) <==> x!=y
p5423
sssg319
(dp5424
g8
g321
sg10
(dp5425
g25
(lp5426
(dp5427
g28
(lp5428
(dp5429
g16
Vbuiltins
p5430
sg18
Vrange
p5431
sasg2
VReturns a virtual sequence of numbers from start to stop by step.
p5432
sg33
((dp5433
g9
(lp5434
g329
asg39
g332
s(dp5435
g67
g68
sg39
Vstart
p5436
s(dp5437
g9
(lp5438
(dp5439
g18
V]
sasg39
Vstop
p5440
s(dp5441
g67
g68
sg9
(lp5442
g5439
asg39
Vstep
p5443
stp5444
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p5445
sssg308
(dp5446
g8
g23
sg10
(dp5447
g25
(lp5448
(dp5449
g2
V==> x[y]
p5450
sg33
((dp5451
g9
(lp5452
g36
asg39
g40
s(dp5453
g39
Vy
stp5454
sasg2
Vx.__getitem__(y) <==> x[y]
p5455
sssg361
(dp5456
g8
g23
sg10
(dp5457
g25
(lp5458
(dp5459
g2
V==> y in x
p5460
sg33
((dp5461
g9
(lp5462
g36
asg39
g40
s(dp5463
g39
Vy
stp5464
sasg2
Vx.__contains__(y) <==> y in x
p5465
sssVstop
p5466
(dp5467
g8
g1025
sg10
(dp5468
g9
(lp5469
g15
asssg82
(dp5470
g8
g23
sg10
(dp5471
g25
Nsssg621
(dp5472
g8
g23
sg10
(dp5473
g25
(lp5474
(dp5475
g2
V==> iter(x)
p5476
sg33
((dp5477
g9
(lp5478
g36
asg39
g40
stp5479
sasg2
Vx.__iter__() <==> iter(x)
p5480
sssg4149
(dp5481
g8
g1025
sg10
(dp5482
g9
(lp5483
g15
asssVstep
p5484
(dp5485
g8
g1025
sg10
(dp5486
g9
(lp5487
g15
asssg908
(dp5488
g8
g23
sg10
(dp5489
g25
(lp5490
(dp5491
g2
V==> x<=y
p5492
sg33
((dp5493
g9
(lp5494
g36
asg39
g40
s(dp5495
g39
Vy
stp5496
sasg2
Vx.__le__(y) <==> x<=y
p5497
sssg959
(dp5498
g8
g23
sg10
(dp5499
g25
(lp5500
(dp5501
g2
V==> x>=y
p5502
sg33
((dp5503
g9
(lp5504
g36
asg39
g40
s(dp5505
g39
Vy
stp5506
sasg2
Vx.__ge__(y) <==> x>=y
p5507
sssg677
(dp5508
g8
g23
sg10
(dp5509
g25
(lp5510
(dp5511
g2
V==> x>y
p5512
sg33
((dp5513
g9
(lp5514
g36
asg39
g40
s(dp5515
g39
Vy
stp5516
sasg2
Vx.__gt__(y) <==> x>y
p5517
sssg930
(dp5518
g8
g23
sg10
(dp5519
g25
(lp5520
(dp5521
g2
V==> hash(x)
p5522
sg33
((dp5523
g9
(lp5524
g36
asg39
g40
stp5525
sasg2
Vx.__hash__() <==> hash(x)
p5526
sssg223
(dp5527
g8
g23
sg10
(dp5528
g25
(lp5529
(dp5530
g2
V==> x<y
p5531
sg33
((dp5532
g9
(lp5533
g36
asg39
g40
s(dp5534
g39
Vy
stp5535
sasg2
Vx.__lt__(y) <==> x<y
p5536
sssg460
(dp5537
g8
g23
sg10
(dp5538
g25
(lp5539
(dp5540
g2
V==> x==y
p5541
sg33
((dp5542
g9
(lp5543
g36
asg39
g40
s(dp5544
g39
Vy
stp5545
sasg2
Vx.__eq__(y) <==> x==y
p5546
sssg873
(dp5547
g8
g793
sg10
(dp5548
g9
(lp5549
g877
asssg497
(dp5550
g8
g23
sg10
(dp5551
g25
(lp5552
(dp5553
g2
V==> len(x)
p5554
sg33
((dp5555
g9
(lp5556
g36
asg39
g40
stp5557
sasg2
Vx.__len__() <==> len(x)
p5558
sssg507
(dp5559
g8
g23
sg10
(dp5560
g25
(lp5561
(dp5562
g2
V==> repr(x)
p5563
sg33
((dp5564
g9
(lp5565
g36
asg39
g40
stp5566
sasg2
Vx.__repr__() <==> repr(x)
p5567
ssssg970
(lp5568
(dp5569
g16
Vbuiltins
p5570
sg18
Vrange
p5571
sag15
asssVstaticmethod
p5572
(dp5573
g8
g9
sg10
(dp5574
g2
Vstaticmethod(function) -> method\u000a\u000aConvert a function to be a static method.\u000a\u000aA static method does not receive an implicit first argument.\u000aTo declare a static method, use this idiom:\u000a\u000a     class C:\u000a     def f(arg1, arg2, ...): ...\u000a     f = staticmethod(f)\u000a\u000aIt can be called either on the class (e.g. C.f()) or on an instance\u000a(e.g. C().f()).  The instance is ignored except for its class.\u000a\u000aStatic methods in Python are similar to those found in Java or C++.\u000aFor a more advanced concept, see the classmethod builtin.
p5575
sg13
(lp5576
g15
asg4
(dp5577
g319
(dp5578
g8
g321
sg10
(dp5579
g25
(lp5580
(dp5581
g28
(lp5582
(dp5583
g18
Vmethod
p5584
sasg2
VConvert a function to be a static method.\u000a\u000aA static method does not receive an implicit first argument.\u000aTo declare a static method, use this idiom:\u000a\u000a     class C:\u000a     def f(arg1, arg2, ...): ...\u000a     f = staticmethod(f)\u000a\u000aIt can be called either on the class (e.g. C.f()) or on an instance\u000a(e.g. C().f()).  The instance is ignored except for its class.\u000a\u000aStatic methods in Python are similar to those found in Java or C++.\u000aFor a more advanced concept, see the classmethod builtin.
p5585
sg33
((dp5586
g9
(lp5587
g329
asg39
g332
s(dp5588
g39
Vfunction
p5589
stp5590
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p5591
sssV__isabstractmethod__
p5592
(dp5593
g8
g1025
sg10
(dp5594
g9
(lp5595
g15
asssV__dict__
p5596
(dp5597
g8
g1025
sg10
(dp5598
g9
(lp5599
g15
asssV__func__
p5600
(dp5601
g8
g1025
sg10
(dp5602
g9
(lp5603
g15
asssg873
(dp5604
g8
g793
sg10
(dp5605
g9
(lp5606
g877
asssg266
(dp5607
g8
g23
sg10
(dp5608
g25
(lp5609
(dp5610
g2
Vinitializes x; see help(type(x)) for signature
p5611
sg33
((dp5612
g9
(lp5613
g36
asg39
g40
s(dp5614
g275
V*
sg39
g33
stp5615
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5616
sssg5078
(dp5617
g8
g23
sg10
(dp5618
g25
(lp5619
(dp5620
g28
(lp5621
g4395
asg2
V
sg33
((dp5622
g9
(lp5623
g36
asg39
g40
s(dp5624
g39
Vobj
p5625
s(dp5626
g67
g68
sg39
Vtype
p5627
stp5628
sasg2
Vdescr.__get__(obj[, type]) -> value
p5629
ssssg970
(lp5630
g796
ag15
asssVResourceWarning
p5631
(dp5632
g8
g9
sg10
(dp5633
g2
VBase class for warnings about resource usage.
p5634
sg13
(lp5635
g1753
asg4
(dp5636
g319
(dp5637
g8
g321
sg10
(dp5638
g25
(lp5639
(dp5640
g2
VBase class for warnings about resource usage.
p5641
sg33
(lp5642
(dp5643
g275
V*
sg39
g33
sasasg2
g5641
sssg266
(dp5644
g8
g23
sg10
(dp5645
g25
(lp5646
(dp5647
g2
Vinitializes x; see help(type(x)) for signature
p5648
sg33
((dp5649
g9
(lp5650
g36
asg39
g40
s(dp5651
g275
V*
sg39
g33
stp5652
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5653
sssg873
(dp5654
g8
g793
sg10
(dp5655
g9
(lp5656
g877
assssg970
(lp5657
(dp5658
g16
Vbuiltins
p5659
sg18
VResourceWarning
p5660
sag1753
ag1012
ag1080
ag15
asssVSystemError
p5661
(dp5662
g8
g9
sg10
(dp5663
g2
VInternal error in the Python interpreter.\u000a\u000aPlease report this to the Python maintainer, along with the traceback,\u000athe Python version, and the hardware/OS platform and version.
p5664
sg13
(lp5665
g1012
asg4
(dp5666
g319
(dp5667
g8
g321
sg10
(dp5668
g25
(lp5669
(dp5670
g2
VInternal error in the Python interpreter.\u000a\u000aPlease report this to the Python maintainer, along with the traceback,\u000athe Python version, and the hardware/OS platform and version.
p5671
sg33
(lp5672
(dp5673
g275
V*
sg39
g33
sasasg2
g5671
sssg266
(dp5674
g8
g23
sg10
(dp5675
g25
(lp5676
(dp5677
g2
Vinitializes x; see help(type(x)) for signature
p5678
sg33
((dp5679
g9
(lp5680
g36
asg39
g40
s(dp5681
g275
V*
sg39
g33
stp5682
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5683
sssg873
(dp5684
g8
g793
sg10
(dp5685
g9
(lp5686
g877
assssg970
(lp5687
(dp5688
g16
Vbuiltins
p5689
sg18
VSystemError
p5690
sag1012
ag1080
ag15
asssVBaseException
p5691
(dp5692
g8
g9
sg10
(dp5693
g2
VCommon base class for all exceptions
p5694
sg13
(lp5695
g15
asg4
(dp5696
V__cause__
p5697
(dp5698
g8
g1025
sg10
(dp5699
g2
Vexception cause
p5700
sg9
(lp5701
g15
asssV__setattr__
p5702
(dp5703
g8
g23
sg10
(dp5704
g25
(lp5705
(dp5706
g2
V==> x.name = value
p5707
sg33
((dp5708
g9
(lp5709
g36
asg39
g40
s(dp5710
g39
Vname
p5711
s(dp5712
g39
Vvalue
p5713
stp5714
sasg2
Vx.__setattr__('name', value) <==> x.name = value
p5715
sssg33
(dp5716
g8
g1025
sg10
(dp5717
g9
(lp5718
g15
asssg319
(dp5719
g8
g321
sg10
(dp5720
g25
(lp5721
(dp5722
g2
VCommon base class for all exceptions
p5723
sg33
(lp5724
(dp5725
g275
V*
sg39
g33
sasasg2
g5723
sssVwith_traceback
p5726
(dp5727
g8
g23
sg10
(dp5728
g25
(lp5729
(dp5730
g2
Vset self.__traceback__ to tb and return self.
p5731
sg33
((dp5732
g9
(lp5733
g36
asg39
g40
s(dp5734
g39
Vtb
p5735
stp5736
sasg2
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p5737
sssg72
(dp5738
g8
g23
sg10
(dp5739
g25
(lp5740
(dp5741
g2
V==> str(x)
p5742
sg33
((dp5743
g9
(lp5744
g36
asg39
g40
stp5745
sasg2
Vx.__str__() <==> str(x)
p5746
sssg1384
(dp5747
g8
g23
sg10
(dp5748
g25
Nsssg82
(dp5749
g8
g23
sg10
(dp5750
g25
NsssV__suppress_context__
p5751
(dp5752
g8
g1025
sg10
(dp5753
g9
(lp5754
g15
asssV__delattr__
p5755
(dp5756
g8
g23
sg10
(dp5757
g25
(lp5758
(dp5759
g2
V==> del x.name
p5760
sg33
((dp5761
g9
(lp5762
g36
asg39
g40
s(dp5763
g39
Vname
p5764
stp5765
sasg2
Vx.__delattr__('name') <==> del x.name
p5766
sssV__traceback__
p5767
(dp5768
g8
g1025
sg10
(dp5769
g9
(lp5770
g15
asssg266
(dp5771
g8
g23
sg10
(dp5772
g25
(lp5773
(dp5774
g2
Vinitializes x; see help(type(x)) for signature
p5775
sg33
((dp5776
g9
(lp5777
g36
asg39
g40
s(dp5778
g275
V*
sg39
g33
stp5779
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5780
sssg5596
(dp5781
g8
g1025
sg10
(dp5782
g9
(lp5783
g15
asssg873
(dp5784
g8
g793
sg10
(dp5785
g9
(lp5786
g877
asssV__context__
p5787
(dp5788
g8
g1025
sg10
(dp5789
g2
Vexception context
p5790
sg9
(lp5791
g15
asssg507
(dp5792
g8
g23
sg10
(dp5793
g25
(lp5794
(dp5795
g2
V==> repr(x)
p5796
sg33
((dp5797
g9
(lp5798
g36
asg39
g40
stp5799
sasg2
Vx.__repr__() <==> repr(x)
p5800
ssssg970
(lp5801
g1080
ag15
asssVpow
p5802
(dp5803
g8
g321
sg10
(dp5804
g25
(lp5805
(dp5806
g28
(lp5807
g108
asg2
VWith two arguments, equivalent to x**y.  With three arguments,\u000aequivalent to (x**y) % z, but may be more efficient (e.g. for longs).
p5808
sg33
((dp5809
g39
Vx
s(dp5810
g39
Vy
s(dp5811
g67
g68
sg39
Vz
stp5812
sasg2
Vpow(x, y[, z]) -> number\u000a\u000aWith two arguments, equivalent to x**y.  With three arguments,\u000aequivalent to (x**y) % z, but may be more efficient (e.g. for longs).
p5813
sssVRuntimeError
p5814
(dp5815
g8
g9
sg10
(dp5816
g2
VUnspecified run-time error.
p5817
sg13
(lp5818
g1012
asg4
(dp5819
g319
(dp5820
g8
g321
sg10
(dp5821
g25
(lp5822
(dp5823
g2
VUnspecified run-time error.
p5824
sg33
(lp5825
(dp5826
g275
V*
sg39
g33
sasasg2
g5824
sssg266
(dp5827
g8
g23
sg10
(dp5828
g25
(lp5829
(dp5830
g2
Vinitializes x; see help(type(x)) for signature
p5831
sg33
((dp5832
g9
(lp5833
g36
asg39
g40
s(dp5834
g275
V*
sg39
g33
stp5835
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p5836
sssg873
(dp5837
g8
g793
sg10
(dp5838
g9
(lp5839
g877
assssg970
(lp5840
(dp5841
g16
Vbuiltins
p5842
sg18
VRuntimeError
p5843
sag1012
ag1080
ag15
asssVfloat
p5844
(dp5845
g8
g9
sg10
(dp5846
g2
Vfloat(x) -> floating point number\u000a\u000aConvert a string or number to a floating point number, if possible.
p5847
sg13
(lp5848
g15
asg4
(dp5849
V__int__
p5850
(dp5851
g8
g23
sg10
(dp5852
g25
(lp5853
(dp5854
g2
V==> int(x)
p5855
sg33
((dp5856
g9
(lp5857
g36
asg39
g40
stp5858
sasg2
Vx.__int__() <==> int(x)
p5859
sssV__rtruediv__
p5860
(dp5861
g8
g23
sg10
(dp5862
g25
(lp5863
(dp5864
g2
V==> y/x
p5865
sg33
((dp5866
g9
(lp5867
g36
asg39
g40
s(dp5868
g39
Vy
stp5869
sasg2
Vx.__rtruediv__(y) <==> y/x
p5870
sssg1498
(dp5871
g8
g23
sg10
(dp5872
g25
(lp5873
(dp5874
g2
V==> y-x
p5875
sg33
((dp5876
g9
(lp5877
g36
asg39
g40
s(dp5878
g39
Vy
stp5879
sasg2
Vx.__rsub__(y) <==> y-x
p5880
sssg72
(dp5881
g8
g23
sg10
(dp5882
g25
(lp5883
(dp5884
g2
V==> str(x)
p5885
sg33
((dp5886
g9
(lp5887
g36
asg39
g40
stp5888
sasg2
Vx.__str__() <==> str(x)
p5889
sssV__neg__
p5890
(dp5891
g8
g23
sg10
(dp5892
g25
(lp5893
(dp5894
g2
V==> -x
p5895
sg33
((dp5896
g9
(lp5897
g36
asg39
g40
stp5898
sasg2
Vx.__neg__() <==> -x
p5899
sssV__radd__
p5900
(dp5901
g8
g23
sg10
(dp5902
g25
(lp5903
(dp5904
g2
V==> y+x
p5905
sg33
((dp5906
g9
(lp5907
g36
asg39
g40
s(dp5908
g39
Vy
stp5909
sasg2
Vx.__radd__(y) <==> y+x
p5910
sssg212
(dp5911
g8
g23
sg10
(dp5912
g25
(lp5913
(dp5914
g2
V==> y*x
p5915
sg33
((dp5916
g9
(lp5917
g36
asg39
g40
s(dp5918
g39
Vy
stp5919
sasg2
Vx.__rmul__(y) <==> y*x
p5920
sssV__truediv__
p5921
(dp5922
g8
g23
sg10
(dp5923
g25
(lp5924
(dp5925
g2
V==> x/y
p5926
sg33
((dp5927
g9
(lp5928
g36
asg39
g40
s(dp5929
g39
Vy
stp5930
sasg2
Vx.__truediv__(y) <==> x/y
p5931
sssV__setformat__
p5932
(dp5933
g8
g321
sg10
(dp5934
g25
(lp5935
(dp5936
g28
(lp5937
g92
asg2
VYou probably don't want to use this function.  It exists mainly to be\u000aused in Python's test suite.\u000a\u000atypestr must be 'double' or 'float'.  fmt must be one of 'unknown',\u000a'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be\u000aone of the latter two if it appears to match the underlying C reality.\u000a\u000aOverrides the automatic determination of C-level floating point type.\u000aThis affects how floats are converted to and from binary strings.
p5938
sg33
((dp5939
g39
Vtypestr
p5940
s(dp5941
g39
Vfmt
p5942
stp5943
sasg2
Vfloat.__setformat__(typestr, fmt) -> None\u000a\u000aYou probably don't want to use this function.  It exists mainly to be\u000aused in Python's test suite.\u000a\u000atypestr must be 'double' or 'float'.  fmt must be one of 'unknown',\u000a'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be\u000aone of the latter two if it appears to match the underlying C reality.\u000a\u000aOverrides the automatic determination of C-level floating point type.\u000aThis affects how floats are converted to and from binary strings.
p5944
sssVconjugate
p5945
(dp5946
g8
g23
sg10
(dp5947
g25
Nsg2
VReturns self, the complex conjugate of any float.
p5948
sssV__getformat__
p5949
(dp5950
g8
g321
sg10
(dp5951
g25
(lp5952
(dp5953
g28
(lp5954
g406
asg2
VYou probably don't want to use this function.  It exists mainly to be\u000aused in Python's test suite.\u000a\u000atypestr must be 'double' or 'float'.  This function returns whichever of\u000a'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the\u000aformat of floating point numbers used by the C type named by typestr.
p5955
sg33
((dp5956
g39
Vtypestr
p5957
stp5958
sasg2
Vfloat.__getformat__(typestr) -> string\u000a\u000aYou probably don't want to use this function.  It exists mainly to be\u000aused in Python's test suite.\u000a\u000atypestr must be 'double' or 'float'.  This function returns whichever of\u000a'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the\u000aformat of floating point numbers used by the C type named by typestr.
p5959
sssg223
(dp5960
g8
g23
sg10
(dp5961
g25
(lp5962
(dp5963
g2
V==> x<y
p5964
sg33
((dp5965
g9
(lp5966
g36
asg39
g40
s(dp5967
g39
Vy
stp5968
sasg2
Vx.__lt__(y) <==> x<y
p5969
sssg2732
(dp5970
g8
g23
sg10
(dp5971
g25
NsssV__rmod__
p5972
(dp5973
g8
g23
sg10
(dp5974
g25
(lp5975
(dp5976
g2
V==> y%x
p5977
sg33
((dp5978
g9
(lp5979
g36
asg39
g40
s(dp5980
g39
Vy
stp5981
sasg2
Vx.__rmod__(y) <==> y%x
p5982
sssVis_integer
p5983
(dp5984
g8
g23
sg10
(dp5985
g25
Nsg2
VReturns True if the float is an integer.
p5986
sssV__float__
p5987
(dp5988
g8
g23
sg10
(dp5989
g25
(lp5990
(dp5991
g2
V==> float(x)
p5992
sg33
((dp5993
g9
(lp5994
g36
asg39
g40
stp5995
sasg2
Vx.__float__() <==> float(x)
p5996
sssV__rpow__
p5997
(dp5998
g8
g23
sg10
(dp5999
g25
(lp6000
(dp6001
g2
V==> pow(x, y[, z])
p6002
sg33
((dp6003
g9
(lp6004
g36
asg39
g40
s(dp6005
g39
Vx
s(dp6006
g67
g68
sg39
Vz
stp6007
sasg2
Vy.__rpow__(x[, z]) <==> pow(x, y[, z])
p6008
sssg319
(dp6009
g8
g321
sg10
(dp6010
g25
(lp6011
(dp6012
g28
(lp6013
(dp6014
g16
Vbuiltins
p6015
sg18
Vfloat
p6016
sasg2
VConvert a string or number to a floating point number, if possible.
p6017
sg33
((dp6018
g9
(lp6019
g329
asg39
g332
s(dp6020
g39
Vx
stp6021
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p6022
sssV__format__
p6023
(dp6024
g8
g23
sg10
(dp6025
g25
(lp6026
(dp6027
g28
(lp6028
g406
asg2
VFormats the float according to format_spec.
p6029
sg33
((dp6030
g9
(lp6031
g36
asg39
g40
s(dp6032
g39
Vformat_spec
p6033
stp6034
sasg2
Vfloat.__format__(format_spec) -> string\u000a\u000aFormats the float according to format_spec.
p6035
sssg3684
(dp6036
g8
g23
sg10
(dp6037
g25
(lp6038
(dp6039
g28
(lp6040
g406
asg2
VReturn a hexadecimal representation of a floating-point number.\u000a>>> (-0.1).hex()\u000a'-0x1.999999999999ap-4'\u000a>>> 3.14159.hex()\u000a'0x1.921f9f01b866ep+1'
p6041
sg33
((dp6042
g9
(lp6043
g36
asg39
g40
stp6044
sasg2
Vfloat.hex() -> string\u000a\u000aReturn a hexadecimal representation of a floating-point number.\u000a>>> (-0.1).hex()\u000a'-0x1.999999999999ap-4'\u000a>>> 3.14159.hex()\u000a'0x1.921f9f01b866ep+1'
p6045
sssVas_integer_ratio
p6046
(dp6047
g8
g23
sg10
(dp6048
g25
(lp6049
(dp6050
g28
(lp6051
g840
asg2
V(int, int)\u000a\u000aReturns a pair of integers, whose ratio is exactly equal to the original\u000afloat and with a positive denominator.\u000aRaises OverflowError on infinities and a ValueError on NaNs.\u000a\u000a>>> (10.0).as_integer_ratio()\u000a(10, 1)\u000a>>> (0.0).as_integer_ratio()\u000a(0, 1)\u000a>>> (-.25).as_integer_ratio()\u000a(-1, 4)
p6052
sg33
((dp6053
g9
(lp6054
g36
asg39
g40
stp6055
sasg2
Vfloat.as_integer_ratio() -> (int, int)\u000a\u000aReturns a pair of integers, whose ratio is exactly equal to the original\u000afloat and with a positive denominator.\u000aRaises OverflowError on infinities and a ValueError on NaNs.\u000a\u000a>>> (10.0).as_integer_ratio()\u000a(10, 1)\u000a>>> (0.0).as_integer_ratio()\u000a(0, 1)\u000a>>> (-.25).as_integer_ratio()\u000a(-1, 4)
p6056
sssV__pos__
p6057
(dp6058
g8
g23
sg10
(dp6059
g25
(lp6060
(dp6061
g2
V==> +x
p6062
sg33
((dp6063
g9
(lp6064
g36
asg39
g40
stp6065
sasg2
Vx.__pos__() <==> +x
p6066
sssV__rfloordiv__
p6067
(dp6068
g8
g23
sg10
(dp6069
g25
(lp6070
(dp6071
g2
V==> y//x
p6072
sg33
((dp6073
g9
(lp6074
g36
asg39
g40
s(dp6075
g39
Vy
stp6076
sasg2
Vx.__rfloordiv__(y) <==> y//x
p6077
sssV__abs__
p6078
(dp6079
g8
g23
sg10
(dp6080
g25
(lp6081
(dp6082
g2
V==> abs(x)
p6083
sg33
((dp6084
g9
(lp6085
g36
asg39
g40
stp6086
sasg2
Vx.__abs__() <==> abs(x)
p6087
sssg873
(dp6088
g8
g793
sg10
(dp6089
g9
(lp6090
g877
asssg919
(dp6091
g8
g23
sg10
(dp6092
g25
(lp6093
(dp6094
g2
V==> x*y
p6095
sg33
((dp6096
g9
(lp6097
g36
asg39
g40
s(dp6098
g39
Vy
stp6099
sasg2
Vx.__mul__(y) <==> x*y
p6100
sssVreal
p6101
(dp6102
g8
g1025
sg10
(dp6103
g2
Vthe real part of a complex number
p6104
sg9
(lp6105
g15
asssg43
(dp6106
g8
g23
sg10
(dp6107
g25
(lp6108
(dp6109
g2
V==> x!=y
p6110
sg33
((dp6111
g9
(lp6112
g36
asg39
g40
s(dp6113
g39
Vy
stp6114
sasg2
Vx.__ne__(y) <==> x!=y
p6115
sssV__rdivmod__
p6116
(dp6117
g8
g23
sg10
(dp6118
g25
(lp6119
(dp6120
g2
V==> divmod(y, x)
p6121
sg33
((dp6122
g9
(lp6123
g36
asg39
g40
s(dp6124
g39
Vy
stp6125
sasg2
Vx.__rdivmod__(y) <==> divmod(y, x)
p6126
sssg575
(dp6127
g8
g321
sg10
(dp6128
g25
(lp6129
(dp6130
g28
(lp6131
g6014
asg2
VCreate a floating-point number from a hexadecimal string.\u000a>>> float.fromhex('0x1.ffffp10')\u000a2047.984375\u000a>>> float.fromhex('-0x1p-1074')\u000a-4.9406564584124654e-324
p6132
sg33
((dp6133
g39
Vstring
p6134
stp6135
sasg2
Vfloat.fromhex(string) -> float\u000a\u000aCreate a floating-point number from a hexadecimal string.\u000a>>> float.fromhex('0x1.ffffp10')\u000a2047.984375\u000a>>> float.fromhex('-0x1p-1074')\u000a-4.9406564584124654e-324
p6136
sssVimag
p6137
(dp6138
g8
g1025
sg10
(dp6139
g2
Vthe imaginary part of a complex number
p6140
sg9
(lp6141
g15
asssV__divmod__
p6142
(dp6143
g8
g23
sg10
(dp6144
g25
(lp6145
(dp6146
g2
V==> divmod(x, y)
p6147
sg33
((dp6148
g9
(lp6149
g36
asg39
g40
s(dp6150
g39
Vy
stp6151
sasg2
Vx.__divmod__(y) <==> divmod(x, y)
p6152
sssg666
(dp6153
g8
g23
sg10
(dp6154
g25
(lp6155
(dp6156
g2
V==> x+y
p6157
sg33
((dp6158
g9
(lp6159
g36
asg39
g40
s(dp6160
g39
Vy
stp6161
sasg2
Vx.__add__(y) <==> x+y
p6162
sssg677
(dp6163
g8
g23
sg10
(dp6164
g25
(lp6165
(dp6166
g2
V==> x>y
p6167
sg33
((dp6168
g9
(lp6169
g36
asg39
g40
s(dp6170
g39
Vy
stp6171
sasg2
Vx.__gt__(y) <==> x>y
p6172
sssV__bool__
p6173
(dp6174
g8
g23
sg10
(dp6175
g25
(lp6176
(dp6177
g2
V==> x != 0
p6178
sg33
((dp6179
g9
(lp6180
g36
asg39
g40
stp6181
sasg2
Vx.__bool__() <==> x != 0
p6182
sssg460
(dp6183
g8
g23
sg10
(dp6184
g25
(lp6185
(dp6186
g2
V==> x==y
p6187
sg33
((dp6188
g9
(lp6189
g36
asg39
g40
s(dp6190
g39
Vy
stp6191
sasg2
Vx.__eq__(y) <==> x==y
p6192
sssV__round__
p6193
(dp6194
g8
g23
sg10
(dp6195
g25
Nsg2
VReturns the Integral closest to x, rounding half toward even.\u000aWhen an argument is passed, works like built-in round(x, ndigits).
p6196
sssV__trunc__
p6197
(dp6198
g8
g23
sg10
(dp6199
g25
Nsg2
VReturns the Integral closest to x between 0 and x.
p6200
sssV__mod__
p6201
(dp6202
g8
g23
sg10
(dp6203
g25
(lp6204
(dp6205
g2
V==> x%y
p6206
sg33
((dp6207
g9
(lp6208
g36
asg39
g40
s(dp6209
g39
Vy
stp6210
sasg2
Vx.__mod__(y) <==> x%y
p6211
sssg908
(dp6212
g8
g23
sg10
(dp6213
g25
(lp6214
(dp6215
g2
V==> x<=y
p6216
sg33
((dp6217
g9
(lp6218
g36
asg39
g40
s(dp6219
g39
Vy
stp6220
sasg2
Vx.__le__(y) <==> x<=y
p6221
sssg507
(dp6222
g8
g23
sg10
(dp6223
g25
(lp6224
(dp6225
g2
V==> repr(x)
p6226
sg33
((dp6227
g9
(lp6228
g36
asg39
g40
stp6229
sasg2
Vx.__repr__() <==> repr(x)
p6230
sssV__floordiv__
p6231
(dp6232
g8
g23
sg10
(dp6233
g25
(lp6234
(dp6235
g2
V==> x//y
p6236
sg33
((dp6237
g9
(lp6238
g36
asg39
g40
s(dp6239
g39
Vy
stp6240
sasg2
Vx.__floordiv__(y) <==> x//y
p6241
sssg930
(dp6242
g8
g23
sg10
(dp6243
g25
(lp6244
(dp6245
g2
V==> hash(x)
p6246
sg33
((dp6247
g9
(lp6248
g36
asg39
g40
stp6249
sasg2
Vx.__hash__() <==> hash(x)
p6250
sssg1667
(dp6251
g8
g23
sg10
(dp6252
g25
(lp6253
(dp6254
g2
V==> x-y
p6255
sg33
((dp6256
g9
(lp6257
g36
asg39
g40
s(dp6258
g39
Vy
stp6259
sasg2
Vx.__sub__(y) <==> x-y
p6260
sssg959
(dp6261
g8
g23
sg10
(dp6262
g25
(lp6263
(dp6264
g2
V==> x>=y
p6265
sg33
((dp6266
g9
(lp6267
g36
asg39
g40
s(dp6268
g39
Vy
stp6269
sasg2
Vx.__ge__(y) <==> x>=y
p6270
sssV__pow__
p6271
(dp6272
g8
g23
sg10
(dp6273
g25
(lp6274
(dp6275
g2
V==> pow(x, y[, z])
p6276
sg33
((dp6277
g9
(lp6278
g36
asg39
g40
s(dp6279
g39
Vy
s(dp6280
g67
g68
sg39
Vz
stp6281
sasg2
Vx.__pow__(y[, z]) <==> pow(x, y[, z])
p6282
ssssg970
(lp6283
(dp6284
g16
Vbuiltins
p6285
sg18
Vfloat
p6286
sag15
asssVGeneratorExit
p6287
(dp6288
g8
g9
sg10
(dp6289
g2
VRequest that a generator exit.
p6290
sg13
(lp6291
g1080
asg4
(dp6292
g319
(dp6293
g8
g321
sg10
(dp6294
g25
(lp6295
(dp6296
g2
VRequest that a generator exit.
p6297
sg33
(lp6298
(dp6299
g275
V*
sg39
g33
sasasg2
g6297
sssg266
(dp6300
g8
g23
sg10
(dp6301
g25
(lp6302
(dp6303
g2
Vinitializes x; see help(type(x)) for signature
p6304
sg33
((dp6305
g9
(lp6306
g36
asg39
g40
s(dp6307
g275
V*
sg39
g33
stp6308
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p6309
sssg873
(dp6310
g8
g793
sg10
(dp6311
g9
(lp6312
g877
assssg970
(lp6313
(dp6314
g16
Vbuiltins
p6315
sg18
VGeneratorExit
p6316
sag1080
ag15
asssVChildProcessError
p6317
(dp6318
g8
g9
sg10
(dp6319
g2
VChild process error.
p6320
sg13
(lp6321
g1116
asg4
(dp6322
g319
(dp6323
g8
g321
sg10
(dp6324
g25
(lp6325
(dp6326
g2
VChild process error.
p6327
sg33
(lp6328
(dp6329
g275
V*
sg39
g33
sasasg2
g6327
sssg266
(dp6330
g8
g23
sg10
(dp6331
g25
(lp6332
(dp6333
g2
Vinitializes x; see help(type(x)) for signature
p6334
sg33
((dp6335
g9
(lp6336
g36
asg39
g40
s(dp6337
g275
V*
sg39
g33
stp6338
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p6339
sssg873
(dp6340
g8
g793
sg10
(dp6341
g9
(lp6342
g877
assssg970
(lp6343
(dp6344
g16
Vbuiltins
p6345
sg18
VChildProcessError
p6346
sag1116
ag1012
ag1080
ag15
asssVglobals
p6347
(dp6348
g8
g321
sg10
(dp6349
g25
(lp6350
(dp6351
g28
(lp6352
g999
asg2
VReturn the dictionary containing the current scope's global variables.
p6353
sg33
(tsasg2
Vglobals() -> dictionary\u000a\u000aReturn the dictionary containing the current scope's global variables.
p6354
sssVdivmod
p6355
(dp6356
g8
g321
sg10
(dp6357
g25
(lp6358
(dp6359
g28
(lp6360
g840
asg2
V(div, mod)\u000a\u000aReturn the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.
p6361
sg33
((dp6362
g39
Vx
s(dp6363
g39
Vy
stp6364
sasg2
Vdivmod(x, y) -> (div, mod)\u000a\u000aReturn the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.
p6365
sssVenumerate
p6366
(dp6367
g8
g9
sg10
(dp6368
g2
Venumerate(iterable[, start]) -> iterator for index, value of iterable\u000a\u000aReturn an enumerate object.  iterable must be another object that supports\u000aiteration.  The enumerate object yields pairs containing a count (from\u000astart, which defaults to zero) and a value yielded by the iterable argument.\u000aenumerate is useful for obtaining an indexed list:\u000a    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
p6369
sg13
(lp6370
g15
asg4
(dp6371
g621
(dp6372
g8
g23
sg10
(dp6373
g25
(lp6374
(dp6375
g2
V==> iter(x)
p6376
sg33
((dp6377
g9
(lp6378
g36
asg39
g40
stp6379
sasg2
Vx.__iter__() <==> iter(x)
p6380
sssg1368
(dp6381
g8
g23
sg10
(dp6382
g25
(lp6383
(dp6384
g2
V==> next(x)
p6385
sg33
((dp6386
g9
(lp6387
g36
asg39
g40
stp6388
sasg2
Vx.__next__() <==> next(x)
p6389
sssg82
(dp6390
g8
g23
sg10
(dp6391
g25
Nsg2
VReturn state information for pickling.
p6392
sssg319
(dp6393
g8
g321
sg10
(dp6394
g25
(lp6395
(dp6396
g28
(lp6397
g840
asg2
Viterator for index, value of iterable\u000a\u000aReturn an enumerate object.  iterable must be another object that supports\u000aiteration.  The enumerate object yields pairs containing a count (from\u000astart, which defaults to zero) and a value yielded by the iterable argument.\u000aenumerate is useful for obtaining an indexed list:\u000a    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
p6398
sg33
((dp6399
g9
(lp6400
g329
asg39
g332
s(dp6401
g39
Viterable
p6402
s(dp6403
g67
g68
sg39
Vstart
p6404
stp6405
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p6406
sssg873
(dp6407
g8
g793
sg10
(dp6408
g9
(lp6409
g877
assssg970
(lp6410
(dp6411
g16
Vbuiltins
p6412
sg18
Venumerate
p6413
sag15
asssVEllipsis
p6414
(dp6415
g8
g793
sg10
(dp6416
g9
(lp6417
g4491
asssVLookupError
p6418
(dp6419
g8
g9
sg10
(dp6420
g2
VBase class for lookup errors.
p6421
sg13
(lp6422
g1012
asg4
(dp6423
g319
(dp6424
g8
g321
sg10
(dp6425
g25
(lp6426
(dp6427
g2
VBase class for lookup errors.
p6428
sg33
(lp6429
(dp6430
g275
V*
sg39
g33
sasasg2
g6428
sssg266
(dp6431
g8
g23
sg10
(dp6432
g25
(lp6433
(dp6434
g2
Vinitializes x; see help(type(x)) for signature
p6435
sg33
((dp6436
g9
(lp6437
g36
asg39
g40
s(dp6438
g275
V*
sg39
g33
stp6439
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p6440
sssg873
(dp6441
g8
g793
sg10
(dp6442
g9
(lp6443
g877
assssg970
(lp6444
g2503
ag1012
ag1080
ag15
asssVopen
p6445
(dp6446
g8
g321
sg10
(dp6447
g25
(lp6448
(dp6449
g28
(lp6450
(dp6451
g18
Vfile
p6452
sasg2
VOpen file and return a stream.  Raise IOError upon failure.\u000a\u000afile is either a text or byte string giving the name (and the path\u000aif the file isn't in the current working directory) of the file to\u000abe opened or an integer file descriptor of the file to be\u000awrapped. (If a file descriptor is given, it is closed when the\u000areturned I/O object is closed, unless closefd is set to False.)\u000a\u000amode is an optional string that specifies the mode in which the file\u000ais opened. It defaults to 'r' which means open for reading in text\u000amode.  Other common values are 'w' for writing (truncating the file if\u000ait already exists), 'x' for creating and writing to a new file, and\u000a'a' for appending (which on some Unix systems, means that all writes\u000aappend to the end of the file regardless of the current seek position).\u000aIn text mode, if encoding is not specified the encoding used is platform\u000adependent: locale.getpreferredencoding(False) is called to get the\u000acurrent locale encoding. (For reading and writing raw bytes use binary\u000amode and leave encoding unspecified.) The available modes are:\u000a\u000a========= ===============================================================\u000aCharacter Meaning\u000a--------- ---------------------------------------------------------------\u000a'r'       open for reading (default)\u000a'w'       open for writing, truncating the file first\u000a'x'       create a new file and open it for writing\u000a'a'       open for writing, appending to the end of the file if it exists\u000a'b'       binary mode\u000a't'       text mode (default)\u000a'+'       open a disk file for updating (reading and writing)\u000a'U'       universal newline mode (for backwards compatibility; unneeded\u000a          for new code)\u000a========= ===============================================================\u000a\u000aThe default mode is 'rt' (open for reading text). For binary random\u000aaccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\u000a'r+b' opens the file without truncation. The 'x' mode implies 'w' and\u000araises an `FileExistsError` if the file already exists.\u000a\u000aPython distinguishes between files opened in binary and text modes,\u000aeven when the underlying operating system doesn't. Files opened in\u000abinary mode (appending 'b' to the mode argument) return contents as\u000abytes objects without any decoding. In text mode (the default, or when\u000a't' is appended to the mode argument), the contents of the file are\u000areturned as strings, the bytes having been first decoded using a\u000aplatform-dependent encoding or using the specified encoding if given.\u000a\u000abuffering is an optional integer used to set the buffering policy.\u000aPass 0 to switch buffering off (only allowed in binary mode), 1 to select\u000aline buffering (only usable in text mode), and an integer > 1 to indicate\u000athe size of a fixed-size chunk buffer.  When no buffering argument is\u000agiven, the default buffering policy works as follows:\u000a\u000a* Binary files are buffered in fixed-size chunks; the size of the buffer\u000a  is chosen using a heuristic trying to determine the underlying device's\u000a  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\u000a  On many systems, the buffer will typically be 4096 or 8192 bytes long.\u000a\u000a* "Interactive" text files (files for which isatty() returns True)\u000a  use line buffering.  Other text files use the policy described above\u000a  for binary files.\u000a\u000aencoding is the name of the encoding used to decode or encode the\u000afile. This should only be used in text mode. The default encoding is\u000aplatform dependent, but any encoding supported by Python can be\u000apassed.  See the codecs module for the list of supported encodings.\u000a\u000aerrors is an optional string that specifies how encoding errors are to\u000abe handled---this argument should not be used in binary mode. Pass\u000a'strict' to raise a ValueError exception if there is an encoding error\u000a(the default of None has the same effect), or pass 'ignore' to ignore\u000aerrors. (Note that ignoring encoding errors can lead to data loss.)\u000aSee the documentation for codecs.register for a list of the permitted\u000aencoding error strings.\u000a\u000anewline controls how universal newlines works (it only applies to text\u000amode). It can be None, '', '\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as\u000afollows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u000a', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf closefd is False, the underlying file descriptor will be kept open\u000awhen the file is closed. This does not work when a file name is given\u000aand must be True in that case.\u000a\u000aA custom opener can be used by passing a callable as *opener*. The\u000aunderlying file descriptor for the file object is then obtained by\u000acalling *opener* with (*file*, *flags*). *opener* must return an open\u000afile descriptor (passing os.open as *opener* results in functionality\u000asimilar to passing None).\u000a\u000aopen() returns a file object whose type depends on the mode, and\u000athrough which the standard file operations such as reading and writing\u000aare performed. When open() is used to open a file in a text mode ('w',\u000a'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\u000aa file in a binary mode, the returned class varies: in read binary\u000amode, it returns a BufferedReader; in write binary and append binary\u000amodes, it returns a BufferedWriter, and in read/write mode, it returns\u000aa BufferedRandom.\u000a\u000aIt is also possible to use a string or bytearray as a file for both\u000areading and writing. For strings StringIO can be used like a file\u000aopened in a text mode, and for bytes a BytesIO can be used like a file\u000aopened in a binary mode.\u000a
p6453
sg33
((dp6454
g39
Vfile
p6455
s(dp6456
g67
Vr
sg39
Vmode
p6457
s(dp6458
g67
V1
sg39
Vbuffering
p6459
s(dp6460
g67
VNone
p6461
sg39
Vencoding
p6462
s(dp6463
g67
VNone
p6464
sg39
Verrors
p6465
s(dp6466
g67
VNone
p6467
sg39
Vnewline
p6468
s(dp6469
g67
VTrue
p6470
sg39
Vclosefd
p6471
s(dp6472
g67
VNone
p6473
sg39
Vopener
p6474
stp6475
sasg2
Vopen(file, mode='r', buffering=-1, encoding=None,\u000a     errors=None, newline=None, closefd=True, opener=None) -> file object\u000a\u000aOpen file and return a stream.  Raise IOError upon failure.\u000a\u000afile is either a text or byte string giving the name (and the path\u000aif the file isn't in the current working directory) of the file to\u000abe opened or an integer file descriptor of the file to be\u000awrapped. (If a file descriptor is given, it is closed when the\u000areturned I/O object is closed, unless closefd is set to False.)\u000a\u000amode is an optional string that specifies the mode in which the file\u000ais opened. It defaults to 'r' which means open for reading in text\u000amode.  Other common values are 'w' for writing (truncating the file if\u000ait already exists), 'x' for creating and writing to a new file, and\u000a'a' for appending (which on some Unix systems, means that all writes\u000aappend to the end of the file regardless of the current seek position).\u000aIn text mode, if encoding is not specified the encoding used is platform\u000adependent: locale.getpreferredencoding(False) is called to get the\u000acurrent locale encoding. (For reading and writing raw bytes use binary\u000amode and leave encoding unspecified.) The available modes are:\u000a\u000a========= ===============================================================\u000aCharacter Meaning\u000a--------- ---------------------------------------------------------------\u000a'r'       open for reading (default)\u000a'w'       open for writing, truncating the file first\u000a'x'       create a new file and open it for writing\u000a'a'       open for writing, appending to the end of the file if it exists\u000a'b'       binary mode\u000a't'       text mode (default)\u000a'+'       open a disk file for updating (reading and writing)\u000a'U'       universal newline mode (for backwards compatibility; unneeded\u000a          for new code)\u000a========= ===============================================================\u000a\u000aThe default mode is 'rt' (open for reading text). For binary random\u000aaccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\u000a'r+b' opens the file without truncation. The 'x' mode implies 'w' and\u000araises an `FileExistsError` if the file already exists.\u000a\u000aPython distinguishes between files opened in binary and text modes,\u000aeven when the underlying operating system doesn't. Files opened in\u000abinary mode (appending 'b' to the mode argument) return contents as\u000abytes objects without any decoding. In text mode (the default, or when\u000a't' is appended to the mode argument), the contents of the file are\u000areturned as strings, the bytes having been first decoded using a\u000aplatform-dependent encoding or using the specified encoding if given.\u000a\u000abuffering is an optional integer used to set the buffering policy.\u000aPass 0 to switch buffering off (only allowed in binary mode), 1 to select\u000aline buffering (only usable in text mode), and an integer > 1 to indicate\u000athe size of a fixed-size chunk buffer.  When no buffering argument is\u000agiven, the default buffering policy works as follows:\u000a\u000a* Binary files are buffered in fixed-size chunks; the size of the buffer\u000a  is chosen using a heuristic trying to determine the underlying device's\u000a  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\u000a  On many systems, the buffer will typically be 4096 or 8192 bytes long.\u000a\u000a* "Interactive" text files (files for which isatty() returns True)\u000a  use line buffering.  Other text files use the policy described above\u000a  for binary files.\u000a\u000aencoding is the name of the encoding used to decode or encode the\u000afile. This should only be used in text mode. The default encoding is\u000aplatform dependent, but any encoding supported by Python can be\u000apassed.  See the codecs module for the list of supported encodings.\u000a\u000aerrors is an optional string that specifies how encoding errors are to\u000abe handled---this argument should not be used in binary mode. Pass\u000a'strict' to raise a ValueError exception if there is an encoding error\u000a(the default of None has the same effect), or pass 'ignore' to ignore\u000aerrors. (Note that ignoring encoding errors can lead to data loss.)\u000aSee the documentation for codecs.register for a list of the permitted\u000aencoding error strings.\u000a\u000anewline controls how universal newlines works (it only applies to text\u000amode). It can be None, '', '\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as\u000afollows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u000a', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf closefd is False, the underlying file descriptor will be kept open\u000awhen the file is closed. This does not work when a file name is given\u000aand must be True in that case.\u000a\u000aA custom opener can be used by passing a callable as *opener*. The\u000aunderlying file descriptor for the file object is then obtained by\u000acalling *opener* with (*file*, *flags*). *opener* must return an open\u000afile descriptor (passing os.open as *opener* results in functionality\u000asimilar to passing None).\u000a\u000aopen() returns a file object whose type depends on the mode, and\u000athrough which the standard file operations such as reading and writing\u000aare performed. When open() is used to open a file in a text mode ('w',\u000a'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\u000aa file in a binary mode, the returned class varies: in read binary\u000amode, it returns a BufferedReader; in write binary and append binary\u000amodes, it returns a BufferedWriter, and in read/write mode, it returns\u000aa BufferedRandom.\u000a\u000aIt is also possible to use a string or bytearray as a file for both\u000areading and writing. For strings StringIO can be used like a file\u000aopened in a text mode, and for bytes a BytesIO can be used like a file\u000aopened in a binary mode.\u000a
p6476
sssVquit
p6477
(dp6478
g8
g793
sg10
(dp6479
g9
(lp6480
(dp6481
g16
g991
sg18
VQuitter
p6482
sasssVtuple_iterator
p6483
(dp6484
g8
g9
sg10
(dp6485
g13
(lp6486
g15
asg1362
I01
sg970
(lp6487
(dp6488
g16
Vbuiltins
p6489
sg18
Vtuple_iterator
p6490
sag15
asg4
(dp6491
g1368
(dp6492
g8
g23
sg10
(dp6493
g25
(lp6494
(dp6495
g2
V==> next(x)
p6496
sg33
((dp6497
g9
(lp6498
g36
asg39
g40
stp6499
sasg2
Vx.__next__() <==> next(x)
p6500
sssg319
(dp6501
g8
g321
sg10
(dp6502
g25
(lp6503
(dp6504
g2
V
sg33
(lp6505
(dp6506
g275
V*
sg39
g33
sasasg2
V
sssg1384
(dp6507
g8
g23
sg10
(dp6508
g25
Nsg2
VSet state information for unpickling.
p6509
sssg1388
(dp6510
g8
g23
sg10
(dp6511
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p6512
sssg82
(dp6513
g8
g23
sg10
(dp6514
g25
Nsg2
VReturn state information for pickling.
p6515
sssg621
(dp6516
g8
g23
sg10
(dp6517
g25
(lp6518
(dp6519
g2
V==> iter(x)
p6520
sg33
((dp6521
g9
(lp6522
g36
asg39
g40
stp6523
sasg2
Vx.__iter__() <==> iter(x)
p6524
sssg873
(dp6525
g8
g793
sg10
(dp6526
g9
(lp6527
g934
assssssVzip
p6528
(dp6529
g8
g9
sg10
(dp6530
g2
Vzip(iter1 [,iter2 [...]]) --> zip object\u000a\u000aReturn a zip object whose .__next__() method returns a tuple where\u000athe i-th element comes from the i-th iterable argument.  The .__next__()\u000amethod continues until the shortest iterable in the argument sequence\u000ais exhausted and then it raises StopIteration.
p6531
sg13
(lp6532
g15
asg4
(dp6533
g621
(dp6534
g8
g23
sg10
(dp6535
g25
(lp6536
(dp6537
g2
V==> iter(x)
p6538
sg33
((dp6539
g9
(lp6540
g36
asg39
g40
stp6541
sasg2
Vx.__iter__() <==> iter(x)
p6542
sssg1368
(dp6543
g8
g23
sg10
(dp6544
g25
(lp6545
(dp6546
g2
V==> next(x)
p6547
sg33
((dp6548
g9
(lp6549
g36
asg39
g40
stp6550
sasg2
Vx.__next__() <==> next(x)
p6551
sssg82
(dp6552
g8
g23
sg10
(dp6553
g25
Nsg2
VReturn state information for pickling.
p6554
sssg319
(dp6555
g8
g321
sg10
(dp6556
g25
(lp6557
(dp6558
g28
(lp6559
(dp6560
g16
Vbuiltins
p6561
sg18
Vzip
p6562
sasg2
VReturn a zip object whose .__next__() method returns a tuple where\u000athe i-th element comes from the i-th iterable argument.  The .__next__()\u000amethod continues until the shortest iterable in the argument sequence\u000ais exhausted and then it raises StopIteration.
p6563
sg33
((dp6564
g9
(lp6565
g329
asg39
g332
s(dp6566
g39
Viter1
p6567
s(dp6568
g67
g68
sg39
Viter2
p6569
s(dp6570
g275
V*
sg67
g68
sg39
g33
stp6571
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p6572
sssg873
(dp6573
g8
g793
sg10
(dp6574
g9
(lp6575
g877
assssg970
(lp6576
(dp6577
g16
Vbuiltins
p6578
sg18
Vzip
p6579
sag15
asssVbuiltin_method_descriptor
p6580
(dp6581
g8
g9
sg10
(dp6582
g13
(lp6583
g15
asg1362
I01
sg970
(lp6584
g2339
ag15
asg4
(dp6585
g43
(dp6586
g8
g23
sg10
(dp6587
g25
(lp6588
(dp6589
g2
V==> x!=y
p6590
sg33
((dp6591
g9
(lp6592
g36
asg39
g40
s(dp6593
g39
Vy
stp6594
sasg2
Vx.__ne__(y) <==> x!=y
p6595
sssg2353
(dp6596
g8
g1025
sg10
(dp6597
g9
(lp6598
g15
asssg319
(dp6599
g8
g321
sg10
(dp6600
g25
(lp6601
(dp6602
g2
V
sg33
(lp6603
(dp6604
g275
V*
sg39
g33
sasasg2
V
sssg2363
(dp6605
g8
g1025
sg10
(dp6606
g9
(lp6607
g15
asssg2367
(dp6608
g8
g1025
sg10
(dp6609
g9
(lp6610
g15
asssg2371
(dp6611
g8
g23
sg10
(dp6612
g25
(lp6613
(dp6614
g2
V==> x(...)
p6615
sg33
((dp6616
g9
(lp6617
g36
asg39
g40
s(dp6618
g275
V*
sg39
g33
stp6619
sasg2
Vx.__call__(...) <==> x(...)
p6620
sssg908
(dp6621
g8
g23
sg10
(dp6622
g25
(lp6623
(dp6624
g2
V==> x<=y
p6625
sg33
((dp6626
g9
(lp6627
g36
asg39
g40
s(dp6628
g39
Vy
stp6629
sasg2
Vx.__le__(y) <==> x<=y
p6630
sssg507
(dp6631
g8
g23
sg10
(dp6632
g25
(lp6633
(dp6634
g2
V==> repr(x)
p6635
sg33
((dp6636
g9
(lp6637
g36
asg39
g40
stp6638
sasg2
Vx.__repr__() <==> repr(x)
p6639
sssg677
(dp6640
g8
g23
sg10
(dp6641
g25
(lp6642
(dp6643
g2
V==> x>y
p6644
sg33
((dp6645
g9
(lp6646
g36
asg39
g40
s(dp6647
g39
Vy
stp6648
sasg2
Vx.__gt__(y) <==> x>y
p6649
sssg930
(dp6650
g8
g23
sg10
(dp6651
g25
(lp6652
(dp6653
g2
V==> hash(x)
p6654
sg33
((dp6655
g9
(lp6656
g36
asg39
g40
stp6657
sasg2
Vx.__hash__() <==> hash(x)
p6658
sssg2420
(dp6659
g8
g1025
sg10
(dp6660
g9
(lp6661
g15
asssg223
(dp6662
g8
g23
sg10
(dp6663
g25
(lp6664
(dp6665
g2
V==> x<y
p6666
sg33
((dp6667
g9
(lp6668
g36
asg39
g40
s(dp6669
g39
Vy
stp6670
sasg2
Vx.__lt__(y) <==> x<y
p6671
sssg460
(dp6672
g8
g23
sg10
(dp6673
g25
(lp6674
(dp6675
g2
V==> x==y
p6676
sg33
((dp6677
g9
(lp6678
g36
asg39
g40
s(dp6679
g39
Vy
stp6680
sasg2
Vx.__eq__(y) <==> x==y
p6681
sssg873
(dp6682
g8
g1025
sg10
(dp6683
g9
(lp6684
g15
asssg959
(dp6685
g8
g23
sg10
(dp6686
g25
(lp6687
(dp6688
g2
V==> x>=y
p6689
sg33
((dp6690
g9
(lp6691
g36
asg39
g40
s(dp6692
g39
Vy
stp6693
sasg2
Vx.__ge__(y) <==> x>=y
p6694
ssssssVdict_keys
p6695
(dp6696
g8
g9
sg10
(dp6697
g13
(lp6698
g15
asg1362
I01
sg970
(lp6699
(dp6700
g16
Vbuiltins
p6701
sg18
Vdict_keys
p6702
sag15
asg4
(dp6703
g1487
(dp6704
g8
g23
sg10
(dp6705
g25
(lp6706
(dp6707
g2
V==> y|x
p6708
sg33
((dp6709
g9
(lp6710
g36
asg39
g40
s(dp6711
g39
Vy
stp6712
sasg2
Vx.__ror__(y) <==> y|x
p6713
sssg1498
(dp6714
g8
g23
sg10
(dp6715
g25
(lp6716
(dp6717
g2
V==> y-x
p6718
sg33
((dp6719
g9
(lp6720
g36
asg39
g40
s(dp6721
g39
Vy
stp6722
sasg2
Vx.__rsub__(y) <==> y-x
p6723
sssg1509
(dp6724
g8
g23
sg10
(dp6725
g25
(lp6726
(dp6727
g2
V==> x&y
p6728
sg33
((dp6729
g9
(lp6730
g36
asg39
g40
s(dp6731
g39
Vy
stp6732
sasg2
Vx.__and__(y) <==> x&y
p6733
sssg223
(dp6734
g8
g23
sg10
(dp6735
g25
(lp6736
(dp6737
g2
V==> x<y
p6738
sg33
((dp6739
g9
(lp6740
g36
asg39
g40
s(dp6741
g39
Vy
stp6742
sasg2
Vx.__lt__(y) <==> x<y
p6743
sssg1530
(dp6744
g8
g23
sg10
(dp6745
g25
(lp6746
(dp6747
g2
V==> y&x
p6748
sg33
((dp6749
g9
(lp6750
g36
asg39
g40
s(dp6751
g39
Vy
stp6752
sasg2
Vx.__rand__(y) <==> y&x
p6753
sssg319
(dp6754
g8
g321
sg10
(dp6755
g25
(lp6756
(dp6757
g2
V
sg33
(lp6758
(dp6759
g275
V*
sg39
g33
sasasg2
V
sssg361
(dp6760
g8
g23
sg10
(dp6761
g25
(lp6762
(dp6763
g2
V==> y in x
p6764
sg33
((dp6765
g9
(lp6766
g36
asg39
g40
s(dp6767
g39
Vy
stp6768
sasg2
Vx.__contains__(y) <==> y in x
p6769
sssg873
(dp6770
g8
g793
sg10
(dp6771
g9
(lp6772
g934
asssg497
(dp6773
g8
g23
sg10
(dp6774
g25
(lp6775
(dp6776
g2
V==> len(x)
p6777
sg33
((dp6778
g9
(lp6779
g36
asg39
g40
stp6780
sasg2
Vx.__len__() <==> len(x)
p6781
sssg43
(dp6782
g8
g23
sg10
(dp6783
g25
(lp6784
(dp6785
g2
V==> x!=y
p6786
sg33
((dp6787
g9
(lp6788
g36
asg39
g40
s(dp6789
g39
Vy
stp6790
sasg2
Vx.__ne__(y) <==> x!=y
p6791
sssg621
(dp6792
g8
g23
sg10
(dp6793
g25
(lp6794
(dp6795
g2
V==> iter(x)
p6796
sg33
((dp6797
g9
(lp6798
g36
asg39
g40
stp6799
sasg2
Vx.__iter__() <==> iter(x)
p6800
sssg1588
(dp6801
g8
g23
sg10
(dp6802
g25
(lp6803
(dp6804
g2
V==> x|y
p6805
sg33
((dp6806
g9
(lp6807
g36
asg39
g40
s(dp6808
g39
Vy
stp6809
sasg2
Vx.__or__(y) <==> x|y
p6810
sssg677
(dp6811
g8
g23
sg10
(dp6812
g25
(lp6813
(dp6814
g2
V==> x>y
p6815
sg33
((dp6816
g9
(lp6817
g36
asg39
g40
s(dp6818
g39
Vy
stp6819
sasg2
Vx.__gt__(y) <==> x>y
p6820
sssg460
(dp6821
g8
g23
sg10
(dp6822
g25
(lp6823
(dp6824
g2
V==> x==y
p6825
sg33
((dp6826
g9
(lp6827
g36
asg39
g40
s(dp6828
g39
Vy
stp6829
sasg2
Vx.__eq__(y) <==> x==y
p6830
sssg1619
(dp6831
g8
g23
sg10
(dp6832
g25
(lp6833
(dp6834
g2
V==> y^x
p6835
sg33
((dp6836
g9
(lp6837
g36
asg39
g40
s(dp6838
g39
Vy
stp6839
sasg2
Vx.__rxor__(y) <==> y^x
p6840
sssg1630
(dp6841
g8
g23
sg10
(dp6842
g25
Nsg2
VReturn True if the view and the given iterable have a null intersection.
p6843
sssg1634
(dp6844
g8
g23
sg10
(dp6845
g25
(lp6846
(dp6847
g2
V==> x^y
p6848
sg33
((dp6849
g9
(lp6850
g36
asg39
g40
s(dp6851
g39
Vy
stp6852
sasg2
Vx.__xor__(y) <==> x^y
p6853
sssg908
(dp6854
g8
g23
sg10
(dp6855
g25
(lp6856
(dp6857
g2
V==> x<=y
p6858
sg33
((dp6859
g9
(lp6860
g36
asg39
g40
s(dp6861
g39
Vy
stp6862
sasg2
Vx.__le__(y) <==> x<=y
p6863
sssg507
(dp6864
g8
g23
sg10
(dp6865
g25
(lp6866
(dp6867
g2
V==> repr(x)
p6868
sg33
((dp6869
g9
(lp6870
g36
asg39
g40
stp6871
sasg2
Vx.__repr__() <==> repr(x)
p6872
sssg930
(dp6873
g8
g793
sg10
(dp6874
g9
(lp6875
g934
asssg1667
(dp6876
g8
g23
sg10
(dp6877
g25
(lp6878
(dp6879
g2
V==> x-y
p6880
sg33
((dp6881
g9
(lp6882
g36
asg39
g40
s(dp6883
g39
Vy
stp6884
sasg2
Vx.__sub__(y) <==> x-y
p6885
sssg959
(dp6886
g8
g23
sg10
(dp6887
g25
(lp6888
(dp6889
g2
V==> x>=y
p6890
sg33
((dp6891
g9
(lp6892
g36
asg39
g40
s(dp6893
g39
Vy
stp6894
sasg2
Vx.__ge__(y) <==> x>=y
p6895
ssssssVIndentationError
p6896
(dp6897
g8
g9
sg10
(dp6898
g2
VImproper indentation.
p6899
sg13
(lp6900
g1077
asg4
(dp6901
g319
(dp6902
g8
g321
sg10
(dp6903
g25
(lp6904
(dp6905
g2
VImproper indentation.
p6906
sg33
(lp6907
(dp6908
g275
V*
sg39
g33
sasasg2
g6906
sssg266
(dp6909
g8
g23
sg10
(dp6910
g25
(lp6911
(dp6912
g2
Vinitializes x; see help(type(x)) for signature
p6913
sg33
((dp6914
g9
(lp6915
g36
asg39
g40
s(dp6916
g275
V*
sg39
g33
stp6917
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p6918
sssg873
(dp6919
g8
g793
sg10
(dp6920
g9
(lp6921
g877
assssg970
(lp6922
g2255
ag1077
ag1012
ag1080
ag15
asssVint
p6923
(dp6924
g8
g9
sg10
(dp6925
g2
Vint(x[, base]) -> integer\u000a\u000aConvert a string or number to an integer, if possible.  A floating\u000apoint argument will be truncated towards zero (this does not include a\u000astring representation of a floating point number!)  When converting a\u000astring, use the optional base.  It is an error to supply a base when\u000aconverting a non-string.
p6926
sg13
(lp6927
g15
asg4
(dp6928
g5850
(dp6929
g8
g23
sg10
(dp6930
g25
(lp6931
(dp6932
g2
V==> int(x)
p6933
sg33
((dp6934
g9
(lp6935
g36
asg39
g40
stp6936
sasg2
Vx.__int__() <==> int(x)
p6937
sssVfrom_bytes
p6938
(dp6939
g8
g321
sg10
(dp6940
g25
(lp6941
(dp6942
g28
(lp6943
g108
asg2
VReturn the integer represented by the given array of bytes.\u000a\u000aThe bytes argument must either support the buffer protocol or be an\u000aiterable object producing bytes.  Bytes and bytearray are examples of\u000abuilt-in objects that support the buffer protocol.\u000a\u000aThe byteorder argument determines the byte order used to represent the\u000ainteger.  If byteorder is 'big', the most significant byte is at the\u000abeginning of the byte array.  If byteorder is 'little', the most\u000asignificant byte is at the end of the byte array.  To request the native\u000abyte order of the host system, use `sys.byteorder' as the byte order value.\u000a\u000aThe signed keyword-only argument indicates whether two's complement is\u000aused to represent the integer.
p6944
sg33
((dp6945
g39
Vbytes
p6946
s(dp6947
g39
Vbyteorder
p6948
s(dp6949
g275
V*
sg67
VFalse
p6950
sg39
Vsigned
p6951
stp6952
sasg2
Vint.from_bytes(bytes, byteorder, *, signed=False) -> int\u000a\u000aReturn the integer represented by the given array of bytes.\u000a\u000aThe bytes argument must either support the buffer protocol or be an\u000aiterable object producing bytes.  Bytes and bytearray are examples of\u000abuilt-in objects that support the buffer protocol.\u000a\u000aThe byteorder argument determines the byte order used to represent the\u000ainteger.  If byteorder is 'big', the most significant byte is at the\u000abeginning of the byte array.  If byteorder is 'little', the most\u000asignificant byte is at the end of the byte array.  To request the native\u000abyte order of the host system, use `sys.byteorder' as the byte order value.\u000a\u000aThe signed keyword-only argument indicates whether two's complement is\u000aused to represent the integer.
p6953
sssg1487
(dp6954
g8
g23
sg10
(dp6955
g25
(lp6956
(dp6957
g2
V==> y|x
p6958
sg33
((dp6959
g9
(lp6960
g36
asg39
g40
s(dp6961
g39
Vy
stp6962
sasg2
Vx.__ror__(y) <==> y|x
p6963
sssg5860
(dp6964
g8
g23
sg10
(dp6965
g25
(lp6966
(dp6967
g2
V==> y/x
p6968
sg33
((dp6969
g9
(lp6970
g36
asg39
g40
s(dp6971
g39
Vy
stp6972
sasg2
Vx.__rtruediv__(y) <==> y/x
p6973
sssV__lshift__
p6974
(dp6975
g8
g23
sg10
(dp6976
g25
(lp6977
(dp6978
g2
V==> x<<y
p6979
sg33
((dp6980
g9
(lp6981
g36
asg39
g40
s(dp6982
g39
Vy
stp6983
sasg2
Vx.__lshift__(y) <==> x<<y
p6984
sssV__rshift__
p6985
(dp6986
g8
g23
sg10
(dp6987
g25
(lp6988
(dp6989
g2
V==> x>>y
p6990
sg33
((dp6991
g9
(lp6992
g36
asg39
g40
s(dp6993
g39
Vy
stp6994
sasg2
Vx.__rshift__(y) <==> x>>y
p6995
sssg72
(dp6996
g8
g23
sg10
(dp6997
g25
(lp6998
(dp6999
g2
V==> str(x)
p7000
sg33
((dp7001
g9
(lp7002
g36
asg39
g40
stp7003
sasg2
Vx.__str__() <==> str(x)
p7004
sssg5890
(dp7005
g8
g23
sg10
(dp7006
g25
(lp7007
(dp7008
g2
V==> -x
p7009
sg33
((dp7010
g9
(lp7011
g36
asg39
g40
stp7012
sasg2
Vx.__neg__() <==> -x
p7013
sssg5900
(dp7014
g8
g23
sg10
(dp7015
g25
(lp7016
(dp7017
g2
V==> y+x
p7018
sg33
((dp7019
g9
(lp7020
g36
asg39
g40
s(dp7021
g39
Vy
stp7022
sasg2
Vx.__radd__(y) <==> y+x
p7023
sssg1509
(dp7024
g8
g23
sg10
(dp7025
g25
(lp7026
(dp7027
g2
V==> x&y
p7028
sg33
((dp7029
g9
(lp7030
g36
asg39
g40
s(dp7031
g39
Vy
stp7032
sasg2
Vx.__and__(y) <==> x&y
p7033
sssg5921
(dp7034
g8
g23
sg10
(dp7035
g25
(lp7036
(dp7037
g2
V==> x/y
p7038
sg33
((dp7039
g9
(lp7040
g36
asg39
g40
s(dp7041
g39
Vy
stp7042
sasg2
Vx.__truediv__(y) <==> x/y
p7043
sssV__rrshift__
p7044
(dp7045
g8
g23
sg10
(dp7046
g25
(lp7047
(dp7048
g2
V==> y>>x
p7049
sg33
((dp7050
g9
(lp7051
g36
asg39
g40
s(dp7052
g39
Vy
stp7053
sasg2
Vx.__rrshift__(y) <==> y>>x
p7054
sssg1498
(dp7055
g8
g23
sg10
(dp7056
g25
(lp7057
(dp7058
g2
V==> y-x
p7059
sg33
((dp7060
g9
(lp7061
g36
asg39
g40
s(dp7062
g39
Vy
stp7063
sasg2
Vx.__rsub__(y) <==> y-x
p7064
sssg5945
(dp7065
g8
g23
sg10
(dp7066
g25
Nsg2
VReturns self, the complex conjugate of any int.
p7067
sssg212
(dp7068
g8
g23
sg10
(dp7069
g25
(lp7070
(dp7071
g2
V==> y*x
p7072
sg33
((dp7073
g9
(lp7074
g36
asg39
g40
s(dp7075
g39
Vy
stp7076
sasg2
Vx.__rmul__(y) <==> y*x
p7077
sssg223
(dp7078
g8
g23
sg10
(dp7079
g25
(lp7080
(dp7081
g2
V==> x<y
p7082
sg33
((dp7083
g9
(lp7084
g36
asg39
g40
s(dp7085
g39
Vy
stp7086
sasg2
Vx.__lt__(y) <==> x<y
p7087
sssV__ceil__
p7088
(dp7089
g8
g23
sg10
(dp7090
g25
Nsg2
VCeiling of an Integral returns itself.
p7091
sssg5972
(dp7092
g8
g23
sg10
(dp7093
g25
(lp7094
(dp7095
g2
V==> y%x
p7096
sg33
((dp7097
g9
(lp7098
g36
asg39
g40
s(dp7099
g39
Vy
stp7100
sasg2
Vx.__rmod__(y) <==> y%x
p7101
sssg1667
(dp7102
g8
g23
sg10
(dp7103
g25
(lp7104
(dp7105
g2
V==> x-y
p7106
sg33
((dp7107
g9
(lp7108
g36
asg39
g40
s(dp7109
g39
Vy
stp7110
sasg2
Vx.__sub__(y) <==> x-y
p7111
sssg5997
(dp7112
g8
g23
sg10
(dp7113
g25
(lp7114
(dp7115
g2
V==> pow(x, y[, z])
p7116
sg33
((dp7117
g9
(lp7118
g36
asg39
g40
s(dp7119
g39
Vx
s(dp7120
g67
g68
sg39
Vz
stp7121
sasg2
Vy.__rpow__(x[, z]) <==> pow(x, y[, z])
p7122
sssg1530
(dp7123
g8
g23
sg10
(dp7124
g25
(lp7125
(dp7126
g2
V==> y&x
p7127
sg33
((dp7128
g9
(lp7129
g36
asg39
g40
s(dp7130
g39
Vy
stp7131
sasg2
Vx.__rand__(y) <==> y&x
p7132
sssg6142
(dp7133
g8
g23
sg10
(dp7134
g25
(lp7135
(dp7136
g2
V==> divmod(x, y)
p7137
sg33
((dp7138
g9
(lp7139
g36
asg39
g40
s(dp7140
g39
Vy
stp7141
sasg2
Vx.__divmod__(y) <==> divmod(x, y)
p7142
sssVto_bytes
p7143
(dp7144
g8
g23
sg10
(dp7145
g25
(lp7146
(dp7147
g28
(lp7148
g354
asg2
VReturn an array of bytes representing an integer.\u000a\u000aThe integer is represented using length bytes.  An OverflowError is\u000araised if the integer is not representable with the given number of\u000abytes.\u000a\u000aThe byteorder argument determines the byte order used to represent the\u000ainteger.  If byteorder is 'big', the most significant byte is at the\u000abeginning of the byte array.  If byteorder is 'little', the most\u000asignificant byte is at the end of the byte array.  To request the native\u000abyte order of the host system, use `sys.byteorder' as the byte order value.\u000a\u000aThe signed keyword-only argument determines whether two's complement is\u000aused to represent the integer.  If signed is False and a negative integer\u000ais given, an OverflowError is raised.
p7149
sg33
((dp7150
g9
(lp7151
g36
asg39
g40
s(dp7152
g39
Vlength
p7153
s(dp7154
g39
Vbyteorder
p7155
s(dp7156
g275
V*
sg67
VFalse
p7157
sg39
Vsigned
p7158
stp7159
sasg2
Vint.to_bytes(length, byteorder, *, signed=False) -> bytes\u000a\u000aReturn an array of bytes representing an integer.\u000a\u000aThe integer is represented using length bytes.  An OverflowError is\u000araised if the integer is not representable with the given number of\u000abytes.\u000a\u000aThe byteorder argument determines the byte order used to represent the\u000ainteger.  If byteorder is 'big', the most significant byte is at the\u000abeginning of the byte array.  If byteorder is 'little', the most\u000asignificant byte is at the end of the byte array.  To request the native\u000abyte order of the host system, use `sys.byteorder' as the byte order value.\u000a\u000aThe signed keyword-only argument determines whether two's complement is\u000aused to represent the integer.  If signed is False and a negative integer\u000ais given, an OverflowError is raised.
p7160
sssg2732
(dp7161
g8
g23
sg10
(dp7162
g25
Nsssg319
(dp7163
g8
g321
sg10
(dp7164
g25
(lp7165
(dp7166
g28
(lp7167
g108
asg2
VConvert a string or number to an integer, if possible.  A floating\u000apoint argument will be truncated towards zero (this does not include a\u000astring representation of a floating point number!)  When converting a\u000astring, use the optional base.  It is an error to supply a base when\u000aconverting a non-string.
p7168
sg33
((dp7169
g9
(lp7170
g329
asg39
g332
s(dp7171
g39
Vx
s(dp7172
g67
g68
sg39
Vbase
p7173
stp7174
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p7175
sssg6023
(dp7176
g8
g23
sg10
(dp7177
g25
Nsssg6078
(dp7178
g8
g23
sg10
(dp7179
g25
(lp7180
(dp7181
g2
V==> abs(x)
p7182
sg33
((dp7183
g9
(lp7184
g36
asg39
g40
stp7185
sasg2
Vx.__abs__() <==> abs(x)
p7186
sssg6057
(dp7187
g8
g23
sg10
(dp7188
g25
(lp7189
(dp7190
g2
V==> +x
p7191
sg33
((dp7192
g9
(lp7193
g36
asg39
g40
stp7194
sasg2
Vx.__pos__() <==> +x
p7195
sssg6067
(dp7196
g8
g23
sg10
(dp7197
g25
(lp7198
(dp7199
g2
V==> y//x
p7200
sg33
((dp7201
g9
(lp7202
g36
asg39
g40
s(dp7203
g39
Vy
stp7204
sasg2
Vx.__rfloordiv__(y) <==> y//x
p7205
sssVbit_length
p7206
(dp7207
g8
g23
sg10
(dp7208
g25
(lp7209
(dp7210
g28
(lp7211
g108
asg2
VNumber of bits necessary to represent self in binary.\u000a>>> bin(37)\u000a'0b100101'\u000a>>> (37).bit_length()\u000a6
p7212
sg33
((dp7213
g9
(lp7214
g36
asg39
g40
stp7215
sasg2
Vint.bit_length() -> int\u000a\u000aNumber of bits necessary to represent self in binary.\u000a>>> bin(37)\u000a'0b100101'\u000a>>> (37).bit_length()\u000a6
p7216
sssg5987
(dp7217
g8
g23
sg10
(dp7218
g25
(lp7219
(dp7220
g2
V==> float(x)
p7221
sg33
((dp7222
g9
(lp7223
g36
asg39
g40
stp7224
sasg2
Vx.__float__() <==> float(x)
p7225
sssV__floor__
p7226
(dp7227
g8
g23
sg10
(dp7228
g25
Nsg2
VFlooring an Integral returns itself.
p7229
sssg873
(dp7230
g8
g793
sg10
(dp7231
g9
(lp7232
g877
asssg507
(dp7233
g8
g23
sg10
(dp7234
g25
(lp7235
(dp7236
g2
V==> repr(x)
p7237
sg33
((dp7238
g9
(lp7239
g36
asg39
g40
stp7240
sasg2
Vx.__repr__() <==> repr(x)
p7241
sssg6101
(dp7242
g8
g1025
sg10
(dp7243
g2
Vthe real part of a complex number
p7244
sg9
(lp7245
g15
asssg43
(dp7246
g8
g23
sg10
(dp7247
g25
(lp7248
(dp7249
g2
V==> x!=y
p7250
sg33
((dp7251
g9
(lp7252
g36
asg39
g40
s(dp7253
g39
Vy
stp7254
sasg2
Vx.__ne__(y) <==> x!=y
p7255
sssg6116
(dp7256
g8
g23
sg10
(dp7257
g25
(lp7258
(dp7259
g2
V==> divmod(y, x)
p7260
sg33
((dp7261
g9
(lp7262
g36
asg39
g40
s(dp7263
g39
Vy
stp7264
sasg2
Vx.__rdivmod__(y) <==> divmod(y, x)
p7265
sssV__invert__
p7266
(dp7267
g8
g23
sg10
(dp7268
g25
(lp7269
(dp7270
g2
V==> ~x
p7271
sg33
((dp7272
g9
(lp7273
g36
asg39
g40
stp7274
sasg2
Vx.__invert__() <==> ~x
p7275
sssg6137
(dp7276
g8
g1025
sg10
(dp7277
g2
Vthe imaginary part of a complex number
p7278
sg9
(lp7279
g15
asssVdenominator
p7280
(dp7281
g8
g1025
sg10
(dp7282
g2
Vthe denominator of a rational number in lowest terms
p7283
sg9
(lp7284
g15
asssg6271
(dp7285
g8
g23
sg10
(dp7286
g25
(lp7287
(dp7288
g2
V==> pow(x, y[, z])
p7289
sg33
((dp7290
g9
(lp7291
g36
asg39
g40
s(dp7292
g39
Vy
s(dp7293
g67
g68
sg39
Vz
stp7294
sasg2
Vx.__pow__(y[, z]) <==> pow(x, y[, z])
p7295
sssV__rlshift__
p7296
(dp7297
g8
g23
sg10
(dp7298
g25
(lp7299
(dp7300
g2
V==> y<<x
p7301
sg33
((dp7302
g9
(lp7303
g36
asg39
g40
s(dp7304
g39
Vy
stp7305
sasg2
Vx.__rlshift__(y) <==> y<<x
p7306
sssg666
(dp7307
g8
g23
sg10
(dp7308
g25
(lp7309
(dp7310
g2
V==> x+y
p7311
sg33
((dp7312
g9
(lp7313
g36
asg39
g40
s(dp7314
g39
Vy
stp7315
sasg2
Vx.__add__(y) <==> x+y
p7316
sssg677
(dp7317
g8
g23
sg10
(dp7318
g25
(lp7319
(dp7320
g2
V==> x>y
p7321
sg33
((dp7322
g9
(lp7323
g36
asg39
g40
s(dp7324
g39
Vy
stp7325
sasg2
Vx.__gt__(y) <==> x>y
p7326
sssg6173
(dp7327
g8
g23
sg10
(dp7328
g25
(lp7329
(dp7330
g2
V==> x != 0
p7331
sg33
((dp7332
g9
(lp7333
g36
asg39
g40
stp7334
sasg2
Vx.__bool__() <==> x != 0
p7335
sssg460
(dp7336
g8
g23
sg10
(dp7337
g25
(lp7338
(dp7339
g2
V==> x==y
p7340
sg33
((dp7341
g9
(lp7342
g36
asg39
g40
s(dp7343
g39
Vy
stp7344
sasg2
Vx.__eq__(y) <==> x==y
p7345
sssg1619
(dp7346
g8
g23
sg10
(dp7347
g25
(lp7348
(dp7349
g2
V==> y^x
p7350
sg33
((dp7351
g9
(lp7352
g36
asg39
g40
s(dp7353
g39
Vy
stp7354
sasg2
Vx.__rxor__(y) <==> y^x
p7355
sssg726
(dp7356
g8
g23
sg10
(dp7357
g25
Nsg2
VReturns size in memory, in bytes
p7358
sssg6193
(dp7359
g8
g23
sg10
(dp7360
g25
Nsg2
VRounding an Integral returns itself.\u000aRounding with an ndigits argument also returns an integer.
p7361
sssg6201
(dp7362
g8
g23
sg10
(dp7363
g25
(lp7364
(dp7365
g2
V==> x%y
p7366
sg33
((dp7367
g9
(lp7368
g36
asg39
g40
s(dp7369
g39
Vy
stp7370
sasg2
Vx.__mod__(y) <==> x%y
p7371
sssg6197
(dp7372
g8
g23
sg10
(dp7373
g25
Nsg2
VTruncating an Integral returns itself.
p7374
sssVnumerator
p7375
(dp7376
g8
g1025
sg10
(dp7377
g2
Vthe numerator of a rational number in lowest terms
p7378
sg9
(lp7379
g15
asssg1634
(dp7380
g8
g23
sg10
(dp7381
g25
(lp7382
(dp7383
g2
V==> x^y
p7384
sg33
((dp7385
g9
(lp7386
g36
asg39
g40
s(dp7387
g39
Vy
stp7388
sasg2
Vx.__xor__(y) <==> x^y
p7389
sssg908
(dp7390
g8
g23
sg10
(dp7391
g25
(lp7392
(dp7393
g2
V==> x<=y
p7394
sg33
((dp7395
g9
(lp7396
g36
asg39
g40
s(dp7397
g39
Vy
stp7398
sasg2
Vx.__le__(y) <==> x<=y
p7399
sssg919
(dp7400
g8
g23
sg10
(dp7401
g25
(lp7402
(dp7403
g2
V==> x*y
p7404
sg33
((dp7405
g9
(lp7406
g36
asg39
g40
s(dp7407
g39
Vy
stp7408
sasg2
Vx.__mul__(y) <==> x*y
p7409
sssg6231
(dp7410
g8
g23
sg10
(dp7411
g25
(lp7412
(dp7413
g2
V==> x//y
p7414
sg33
((dp7415
g9
(lp7416
g36
asg39
g40
s(dp7417
g39
Vy
stp7418
sasg2
Vx.__floordiv__(y) <==> x//y
p7419
sssg930
(dp7420
g8
g23
sg10
(dp7421
g25
(lp7422
(dp7423
g2
V==> hash(x)
p7424
sg33
((dp7425
g9
(lp7426
g36
asg39
g40
stp7427
sasg2
Vx.__hash__() <==> hash(x)
p7428
sssV__index__
p7429
(dp7430
g8
g23
sg10
(dp7431
g25
(lp7432
(dp7433
g2
Vx[y:z] <==> x[y.:z.__index__()]
p7434
sg33
((dp7435
g9
(lp7436
g36
asg39
g40
stp7437
sasg2
Vx[y:z] <==> x[y.__index__():z.__index__()]
p7438
sssg959
(dp7439
g8
g23
sg10
(dp7440
g25
(lp7441
(dp7442
g2
V==> x>=y
p7443
sg33
((dp7444
g9
(lp7445
g36
asg39
g40
s(dp7446
g39
Vy
stp7447
sasg2
Vx.__ge__(y) <==> x>=y
p7448
sssg1588
(dp7449
g8
g23
sg10
(dp7450
g25
(lp7451
(dp7452
g2
V==> x|y
p7453
sg33
((dp7454
g9
(lp7455
g36
asg39
g40
s(dp7456
g39
Vy
stp7457
sasg2
Vx.__or__(y) <==> x|y
p7458
ssssg970
(lp7459
(dp7460
g16
Vbuiltins
p7461
sg18
Vint
p7462
sag15
asssVchr
p7463
(dp7464
g8
g321
sg10
(dp7465
g25
(lp7466
(dp7467
g28
(lp7468
g406
asg2
VReturn a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
p7469
sg33
((dp7470
g39
Vi
stp7471
sasg2
Vchr(i) -> Unicode character\u000a\u000aReturn a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
p7472
sssg9
(dp7473
g8
g9
sg10
(dp7474
g2
Vtype(object) -> the object's type\u000atype(name, bases, dict) -> a new type
p7475
sg13
(lp7476
g15
asg4
(dp7477
g2353
(dp7478
g8
g1025
sg10
(dp7479
g9
(lp7480
g15
asssV__base__
p7481
(dp7482
g8
g1025
sg10
(dp7483
g9
(lp7484
g15
asssV__weakrefoffset__
p7485
(dp7486
g8
g1025
sg10
(dp7487
g9
(lp7488
g15
asssg5596
(dp7489
g8
g1025
sg10
(dp7490
g9
(lp7491
g15
asssg726
(dp7492
g8
g23
sg10
(dp7493
g25
(lp7494
(dp7495
g28
(lp7496
g108
asg2
Vreturn memory consumption of the type object
p7497
sg33
((dp7498
g9
(lp7499
g36
asg39
g40
stp7500
sasg2
V__sizeof__() -> int\u000areturn memory consumption of the type object
p7501
sssg266
(dp7502
g8
g23
sg10
(dp7503
g25
(lp7504
(dp7505
g2
Vinitializes x; see help(type(x)) for signature
p7506
sg33
((dp7507
g9
(lp7508
g36
asg39
g40
s(dp7509
g275
V*
sg39
g33
stp7510
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p7511
sssg5702
(dp7512
g8
g23
sg10
(dp7513
g25
(lp7514
(dp7515
g2
V==> x.name = value
p7516
sg33
((dp7517
g9
(lp7518
g36
asg39
g40
s(dp7519
g39
Vname
p7520
s(dp7521
g39
Vvalue
p7522
stp7523
sasg2
Vx.__setattr__('name', value) <==> x.name = value
p7524
sssV__subclasses__
p7525
(dp7526
g8
g23
sg10
(dp7527
g25
(lp7528
(dp7529
g28
(lp7530
g172
asg2
V
sg33
((dp7531
g9
(lp7532
g36
asg39
g40
stp7533
sasg2
V__subclasses__() -> list of immediate subclasses
p7534
sssg319
(dp7535
g8
g321
sg10
(dp7536
g25
(lp7537
(dp7538
g28
(lp7539
(dp7540
g18
Vthe
p7541
sasg2
V
sg33
((dp7542
g9
(lp7543
g329
asg39
g332
s(dp7544
g39
Vobject
p7545
stp7546
sa(dp7547
g28
(lp7548
g1918
asg2
V
sg33
(g7542
(dp7549
g39
Vname
p7550
s(dp7551
g39
Vbases
p7552
s(dp7553
g39
Vdict
p7554
stp7555
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p7556
sssV__abstractmethods__
p7557
(dp7558
g8
g1025
sg10
(dp7559
g9
(lp7560
g15
asssV__mro__
p7561
(dp7562
g8
g1025
sg10
(dp7563
g9
(lp7564
g15
asssV__bases__
p7565
(dp7566
g8
g1025
sg10
(dp7567
g9
(lp7568
g15
asssV__instancecheck__
p7569
(dp7570
g8
g23
sg10
(dp7571
g25
(lp7572
(dp7573
g28
(lp7574
g141
asg2
Vcheck if an object is an instance
p7575
sg33
((dp7576
g9
(lp7577
g36
asg39
g40
stp7578
sasg2
V__instancecheck__() -> bool\u000acheck if an object is an instance
p7579
sssV__dictoffset__
p7580
(dp7581
g8
g1025
sg10
(dp7582
g9
(lp7583
g15
asssg2371
(dp7584
g8
g23
sg10
(dp7585
g25
(lp7586
(dp7587
g2
V==> x(...)
p7588
sg33
((dp7589
g9
(lp7590
g36
asg39
g40
s(dp7591
g275
V*
sg39
g33
stp7592
sasg2
Vx.__call__(...) <==> x(...)
p7593
sssg873
(dp7594
g8
g1025
sg10
(dp7595
g9
(lp7596
g15
asssV__itemsize__
p7597
(dp7598
g8
g1025
sg10
(dp7599
g9
(lp7600
g15
asssV__subclasscheck__
p7601
(dp7602
g8
g23
sg10
(dp7603
g25
(lp7604
(dp7605
g28
(lp7606
g141
asg2
Vcheck if a class is a subclass
p7607
sg33
((dp7608
g9
(lp7609
g36
asg39
g40
stp7610
sasg2
V__subclasscheck__() -> bool\u000acheck if a class is a subclass
p7611
sssg2420
(dp7612
g8
g1025
sg10
(dp7613
g9
(lp7614
g15
asssV__dir__
p7615
(dp7616
g8
g23
sg10
(dp7617
g25
(lp7618
(dp7619
g28
(lp7620
g172
asg2
Vspecialized __dir__ implementation for types
p7621
sg33
((dp7622
g9
(lp7623
g36
asg39
g40
stp7624
sasg2
V__dir__() -> list\u000aspecialized __dir__ implementation for types
p7625
sssV__basicsize__
p7626
(dp7627
g8
g1025
sg10
(dp7628
g9
(lp7629
g15
asssV__prepare__
p7630
(dp7631
g8
g321
sg10
(dp7632
g25
(lp7633
(dp7634
g28
(lp7635
g999
asg2
Vused to create the namespace for the class statement
p7636
sg33
(tsasg2
V__prepare__() -> dict\u000aused to create the namespace for the class statement
p7637
sssV__flags__
p7638
(dp7639
g8
g1025
sg10
(dp7640
g9
(lp7641
g15
asssg2367
(dp7642
g8
g1025
sg10
(dp7643
g9
(lp7644
g15
asssg5755
(dp7645
g8
g23
sg10
(dp7646
g25
(lp7647
(dp7648
g2
V==> del x.name
p7649
sg33
((dp7650
g9
(lp7651
g36
asg39
g40
s(dp7652
g39
Vname
p7653
stp7654
sasg2
Vx.__delattr__('name') <==> del x.name
p7655
sssg970
(dp7656
g8
g23
sg10
(dp7657
g25
(lp7658
(dp7659
g28
(lp7660
g172
asg2
Vreturn a type's method resolution order
p7661
sg33
((dp7662
g9
(lp7663
g36
asg39
g40
stp7664
sasg2
Vmro() -> list\u000areturn a type's method resolution order
p7665
sssg507
(dp7666
g8
g23
sg10
(dp7667
g25
(lp7668
(dp7669
g2
V==> repr(x)
p7670
sg33
((dp7671
g9
(lp7672
g36
asg39
g40
stp7673
sasg2
Vx.__repr__() <==> repr(x)
p7674
ssssg970
(lp7675
(dp7676
g16
Vbuiltins
p7677
sg18
Vtype
p7678
sag15
asssg873
(dp7679
g8
g793
sg10
(dp7680
g9
(lp7681
g877
asssg321
(dp7682
g8
g9
sg10
(dp7683
g13
(lp7684
g15
asg1362
I01
sg970
(lp7685
(dp7686
g16
Vbuiltins
p7687
sg18
Vfunction
p7688
sag15
asg4
(dp7689
g2353
(dp7690
g8
g1025
sg10
(dp7691
g9
(lp7692
g15
asssg319
(dp7693
g8
g321
sg10
(dp7694
g25
(lp7695
(dp7696
g2
VCreate a function object from a code object and a dictionary.\u000aThe optional name string overrides the name from the code object.\u000aThe optional argdefs tuple specifies the default argument values.\u000aThe optional closure tuple supplies the bindings for free variables.
p7697
sg33
((dp7698
g9
(lp7699
g329
asg39
g332
s(dp7700
g39
Vcode
p7701
s(dp7702
g39
Vglobals
p7703
s(dp7704
g67
g68
sg39
Vname
p7705
s(dp7706
g67
g68
sg39
Vargdefs
p7707
s(dp7708
g67
g68
sg39
Vclosure
p7709
stp7710
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p7711
sssV__defaults__
p7712
(dp7713
g8
g1025
sg10
(dp7714
g9
(lp7715
g15
asssV__annotations__
p7716
(dp7717
g8
g1025
sg10
(dp7718
g9
(lp7719
g15
asssV__kwdefaults__
p7720
(dp7721
g8
g1025
sg10
(dp7722
g9
(lp7723
g15
asssV__globals__
p7724
(dp7725
g8
g1025
sg10
(dp7726
g9
(lp7727
g15
asssg2367
(dp7728
g8
g1025
sg10
(dp7729
g9
(lp7730
g15
asssg2371
(dp7731
g8
g23
sg10
(dp7732
g25
(lp7733
(dp7734
g2
V==> x(...)
p7735
sg33
((dp7736
g9
(lp7737
g36
asg39
g40
s(dp7738
g275
V*
sg39
g33
stp7739
sasg2
Vx.__call__(...) <==> x(...)
p7740
sssV__closure__
p7741
(dp7742
g8
g1025
sg10
(dp7743
g9
(lp7744
g15
asssg507
(dp7745
g8
g23
sg10
(dp7746
g25
(lp7747
(dp7748
g2
V==> repr(x)
p7749
sg33
((dp7750
g9
(lp7751
g36
asg39
g40
stp7752
sasg2
Vx.__repr__() <==> repr(x)
p7753
sssg5596
(dp7754
g8
g1025
sg10
(dp7755
g9
(lp7756
g15
asssg2420
(dp7757
g8
g1025
sg10
(dp7758
g9
(lp7759
g15
asssV__code__
p7760
(dp7761
g8
g1025
sg10
(dp7762
g9
(lp7763
g15
asssg873
(dp7764
g8
g1025
sg10
(dp7765
g9
(lp7766
g15
asssg5078
(dp7767
g8
g23
sg10
(dp7768
g25
(lp7769
(dp7770
g28
(lp7771
g4395
asg2
V
sg33
((dp7772
g9
(lp7773
g36
asg39
g40
s(dp7774
g39
Vobj
p7775
s(dp7776
g67
g68
sg39
Vtype
p7777
stp7778
sasg2
Vdescr.__get__(obj[, type]) -> value
p7779
ssssg2
Vfunction(code, globals[, name[, argdefs[, closure]]])\u000a\u000aCreate a function object from a code object and a dictionary.\u000aThe optional name string overrides the name from the code object.\u000aThe optional argdefs tuple specifies the default argument values.\u000aThe optional closure tuple supplies the bindings for free variables.
p7780
sssVException
p7781
(dp7782
g8
g9
sg10
(dp7783
g2
VCommon base class for all non-exit exceptions.
p7784
sg13
(lp7785
g1080
asg4
(dp7786
g319
(dp7787
g8
g321
sg10
(dp7788
g25
(lp7789
(dp7790
g2
VCommon base class for all non-exit exceptions.
p7791
sg33
(lp7792
(dp7793
g275
V*
sg39
g33
sasasg2
g7791
sssg266
(dp7794
g8
g23
sg10
(dp7795
g25
(lp7796
(dp7797
g2
Vinitializes x; see help(type(x)) for signature
p7798
sg33
((dp7799
g9
(lp7800
g36
asg39
g40
s(dp7801
g275
V*
sg39
g33
stp7802
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p7803
sssg873
(dp7804
g8
g793
sg10
(dp7805
g9
(lp7806
g877
assssg970
(lp7807
g1012
ag1080
ag15
asssVTimeoutError
p7808
(dp7809
g8
g9
sg10
(dp7810
g2
VTimeout expired.
p7811
sg13
(lp7812
g1116
asg4
(dp7813
g319
(dp7814
g8
g321
sg10
(dp7815
g25
(lp7816
(dp7817
g2
VTimeout expired.
p7818
sg33
(lp7819
(dp7820
g275
V*
sg39
g33
sasasg2
g7818
sssg266
(dp7821
g8
g23
sg10
(dp7822
g25
(lp7823
(dp7824
g2
Vinitializes x; see help(type(x)) for signature
p7825
sg33
((dp7826
g9
(lp7827
g36
asg39
g40
s(dp7828
g275
V*
sg39
g33
stp7829
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p7830
sssg873
(dp7831
g8
g793
sg10
(dp7832
g9
(lp7833
g877
assssg970
(lp7834
(dp7835
g16
Vbuiltins
p7836
sg18
VTimeoutError
p7837
sag1116
ag1012
ag1080
ag15
asssVtuple
p7838
(dp7839
g8
g9
sg10
(dp7840
g2
Vtuple() -> empty tuple\u000atuple(iterable) -> tuple initialized from iterable's items\u000a\u000aIf the argument is a tuple, the return value is the same object.
p7841
sg13
(lp7842
g15
asg4
(dp7843
g752
(dp7844
g8
g23
sg10
(dp7845
g25
(lp7846
(dp7847
g28
(lp7848
g108
asg2
V
sg33
((dp7849
g9
(lp7850
g36
asg39
g40
s(dp7851
g39
Vvalue
p7852
stp7853
sasg2
VT.count(value) -> integer -- return number of occurrences of value
p7854
sssg43
(dp7855
g8
g23
sg10
(dp7856
g25
(lp7857
(dp7858
g2
V==> x!=y
p7859
sg33
((dp7860
g9
(lp7861
g36
asg39
g40
s(dp7862
g39
Vy
stp7863
sasg2
Vx.__ne__(y) <==> x!=y
p7864
sssg959
(dp7865
g8
g23
sg10
(dp7866
g25
(lp7867
(dp7868
g2
V==> x>=y
p7869
sg33
((dp7870
g9
(lp7871
g36
asg39
g40
s(dp7872
g39
Vy
stp7873
sasg2
Vx.__ge__(y) <==> x>=y
p7874
sssg319
(dp7875
g8
g321
sg10
(dp7876
g25
(lp7877
(dp7878
g28
(lp7879
g4799
asg2
VIf the argument is a tuple, the return value is the same object.
p7880
sg33
((dp7881
g9
(lp7882
g329
asg39
g332
stp7883
sa(dp7884
g28
(lp7885
(dp7886
g16
Vbuiltins
p7887
sg18
Vtuple
p7888
sasg2
g7880
sg33
(g7881
(dp7889
g39
Viterable
p7890
stp7891
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p7892
sssg308
(dp7893
g8
g23
sg10
(dp7894
g25
(lp7895
(dp7896
g2
V==> x[y]
p7897
sg33
((dp7898
g9
(lp7899
g36
asg39
g40
s(dp7900
g39
Vy
stp7901
sasg2
Vx.__getitem__(y) <==> x[y]
p7902
sssg361
(dp7903
g8
g23
sg10
(dp7904
g25
(lp7905
(dp7906
g2
V==> y in x
p7907
sg33
((dp7908
g9
(lp7909
g36
asg39
g40
s(dp7910
g39
Vy
stp7911
sasg2
Vx.__contains__(y) <==> y in x
p7912
sssg558
(dp7913
g8
g23
sg10
(dp7914
g25
(lp7915
(dp7916
g28
(lp7917
g108
asg2
V.\u000aRaises ValueError if the value is not present.
p7918
sg33
((dp7919
g9
(lp7920
g36
asg39
g40
s(dp7921
g39
Vvalue
p7922
s(dp7923
g67
g68
sg39
Vstart
p7924
s(dp7925
g67
g68
sg39
Vstop
p7926
stp7927
sasg2
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p7928
sssg873
(dp7929
g8
g793
sg10
(dp7930
g9
(lp7931
g877
asssg930
(dp7932
g8
g23
sg10
(dp7933
g25
(lp7934
(dp7935
g2
V==> hash(x)
p7936
sg33
((dp7937
g9
(lp7938
g36
asg39
g40
stp7939
sasg2
Vx.__hash__() <==> hash(x)
p7940
sssg621
(dp7941
g8
g23
sg10
(dp7942
g25
(lp7943
(dp7944
g2
V==> iter(x)
p7945
sg33
((dp7946
g9
(lp7947
g36
asg39
g40
stp7948
sasg2
Vx.__iter__() <==> iter(x)
p7949
sssg908
(dp7950
g8
g23
sg10
(dp7951
g25
(lp7952
(dp7953
g2
V==> x<=y
p7954
sg33
((dp7955
g9
(lp7956
g36
asg39
g40
s(dp7957
g39
Vy
stp7958
sasg2
Vx.__le__(y) <==> x<=y
p7959
sssg919
(dp7960
g8
g23
sg10
(dp7961
g25
(lp7962
(dp7963
g2
V==> x*n
p7964
sg33
((dp7965
g9
(lp7966
g36
asg39
g40
s(dp7967
g39
Vn
stp7968
sasg2
Vx.__mul__(n) <==> x*n
p7969
sssg666
(dp7970
g8
g23
sg10
(dp7971
g25
(lp7972
(dp7973
g2
V==> x+y
p7974
sg33
((dp7975
g9
(lp7976
g36
asg39
g40
s(dp7977
g39
Vy
stp7978
sasg2
Vx.__add__(y) <==> x+y
p7979
sssg677
(dp7980
g8
g23
sg10
(dp7981
g25
(lp7982
(dp7983
g2
V==> x>y
p7984
sg33
((dp7985
g9
(lp7986
g36
asg39
g40
s(dp7987
g39
Vy
stp7988
sasg2
Vx.__gt__(y) <==> x>y
p7989
sssg212
(dp7990
g8
g23
sg10
(dp7991
g25
(lp7992
(dp7993
g2
V==> n*x
p7994
sg33
((dp7995
g9
(lp7996
g36
asg39
g40
s(dp7997
g39
Vn
stp7998
sasg2
Vx.__rmul__(n) <==> n*x
p7999
sssg726
(dp8000
g8
g23
sg10
(dp8001
g25
(lp8002
(dp8003
g2
Vsize of T in memory, in bytes
p8004
sg33
((dp8005
g9
(lp8006
g36
asg39
g40
stp8007
sasg2
VT.__sizeof__() -- size of T in memory, in bytes
p8008
sssg2732
(dp8009
g8
g23
sg10
(dp8010
g25
Nsssg460
(dp8011
g8
g23
sg10
(dp8012
g25
(lp8013
(dp8014
g2
V==> x==y
p8015
sg33
((dp8016
g9
(lp8017
g36
asg39
g40
s(dp8018
g39
Vy
stp8019
sasg2
Vx.__eq__(y) <==> x==y
p8020
sssg223
(dp8021
g8
g23
sg10
(dp8022
g25
(lp8023
(dp8024
g2
V==> x<y
p8025
sg33
((dp8026
g9
(lp8027
g36
asg39
g40
s(dp8028
g39
Vy
stp8029
sasg2
Vx.__lt__(y) <==> x<y
p8030
sssg497
(dp8031
g8
g23
sg10
(dp8032
g25
(lp8033
(dp8034
g2
V==> len(x)
p8035
sg33
((dp8036
g9
(lp8037
g36
asg39
g40
stp8038
sasg2
Vx.__len__() <==> len(x)
p8039
sssg507
(dp8040
g8
g23
sg10
(dp8041
g25
(lp8042
(dp8043
g2
V==> repr(x)
p8044
sg33
((dp8045
g9
(lp8046
g36
asg39
g40
stp8047
sasg2
Vx.__repr__() <==> repr(x)
p8048
ssssg970
(lp8049
(dp8050
g16
Vbuiltins
p8051
sg18
Vtuple
p8052
sag15
asssVreversed
p8053
(dp8054
g8
g9
sg10
(dp8055
g2
Vreversed(sequence) -> reverse iterator over values of the sequence\u000a\u000aReturn a reverse iterator
p8056
sg13
(lp8057
g15
asg4
(dp8058
g1368
(dp8059
g8
g23
sg10
(dp8060
g25
(lp8061
(dp8062
g2
V==> next(x)
p8063
sg33
((dp8064
g9
(lp8065
g36
asg39
g40
stp8066
sasg2
Vx.__next__() <==> next(x)
p8067
sssg319
(dp8068
g8
g321
sg10
(dp8069
g25
(lp8070
(dp8071
g28
(lp8072
(dp8073
g18
Vreverse
p8074
sasg2
VReturn a reverse iterator
p8075
sg33
((dp8076
g9
(lp8077
g329
asg39
g332
s(dp8078
g39
Vsequence
p8079
stp8080
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p8081
sssg1384
(dp8082
g8
g23
sg10
(dp8083
g25
Nsg2
VSet state information for unpickling.
p8084
sssg1388
(dp8085
g8
g23
sg10
(dp8086
g25
Nsg2
VPrivate method returning an estimate of len(list(it)).
p8087
sssg82
(dp8088
g8
g23
sg10
(dp8089
g25
Nsg2
VReturn state information for pickling.
p8090
sssg621
(dp8091
g8
g23
sg10
(dp8092
g25
(lp8093
(dp8094
g2
V==> iter(x)
p8095
sg33
((dp8096
g9
(lp8097
g36
asg39
g40
stp8098
sasg2
Vx.__iter__() <==> iter(x)
p8099
sssg873
(dp8100
g8
g793
sg10
(dp8101
g9
(lp8102
g877
assssg970
(lp8103
(dp8104
g16
Vbuiltins
p8105
sg18
Vreversed
p8106
sag15
asssVUnicodeEncodeError
p8107
(dp8108
g8
g9
sg10
(dp8109
g2
VUnicode encoding error.
p8110
sg13
(lp8111
g4114
asg4
(dp8112
g4118
(dp8113
g8
g1025
sg10
(dp8114
g2
Vexception end
p8115
sg9
(lp8116
g15
asssg319
(dp8117
g8
g321
sg10
(dp8118
g25
(lp8119
(dp8120
g2
VUnicode encoding error.
p8121
sg33
(lp8122
(dp8123
g275
V*
sg39
g33
sasasg2
g8121
sssg4130
(dp8124
g8
g1025
sg10
(dp8125
g2
Vexception encoding
p8126
sg9
(lp8127
g15
asssg72
(dp8128
g8
g23
sg10
(dp8129
g25
(lp8130
(dp8131
g2
V==> str(x)
p8132
sg33
((dp8133
g9
(lp8134
g36
asg39
g40
stp8135
sasg2
Vx.__str__() <==> str(x)
p8136
sssg4144
(dp8137
g8
g1025
sg10
(dp8138
g2
Vexception object
p8139
sg9
(lp8140
g15
asssg4149
(dp8141
g8
g1025
sg10
(dp8142
g2
Vexception start
p8143
sg9
(lp8144
g15
asssg4154
(dp8145
g8
g1025
sg10
(dp8146
g2
Vexception reason
p8147
sg9
(lp8148
g15
asssg873
(dp8149
g8
g793
sg10
(dp8150
g9
(lp8151
g877
asssg266
(dp8152
g8
g23
sg10
(dp8153
g25
(lp8154
(dp8155
g2
Vinitializes x; see help(type(x)) for signature
p8156
sg33
((dp8157
g9
(lp8158
g36
asg39
g40
s(dp8159
g275
V*
sg39
g33
stp8160
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8161
ssssg970
(lp8162
(dp8163
g16
Vbuiltins
p8164
sg18
VUnicodeEncodeError
p8165
sag4114
ag4176
ag1012
ag1080
ag15
asssVinput
p8166
(dp8167
g8
g321
sg10
(dp8168
g25
(lp8169
(dp8170
g28
(lp8171
g406
asg2
VRead a string from standard input.  The trailing newline is stripped.\u000aIf the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\u000aOn Unix, GNU readline is used if enabled.  The prompt string, if given,\u000ais printed without a trailing newline before reading.
p8172
sg33
((dp8173
g67
g68
sg39
Vprompt
p8174
stp8175
sasg2
Vinput([prompt]) -> string\u000a\u000aRead a string from standard input.  The trailing newline is stripped.\u000aIf the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\u000aOn Unix, GNU readline is used if enabled.  The prompt string, if given,\u000ais printed without a trailing newline before reading.
p8176
sssVhasattr
p8177
(dp8178
g8
g321
sg10
(dp8179
g25
(lp8180
(dp8181
g28
(lp8182
g141
asg2
VReturn whether the object has an attribute with the given name.\u000a(This is done by calling getattr(object, name) and catching AttributeError.)
p8183
sg33
((dp8184
g39
Vobject
p8185
s(dp8186
g39
Vname
p8187
stp8188
sasg2
Vhasattr(object, name) -> bool\u000a\u000aReturn whether the object has an attribute with the given name.\u000a(This is done by calling getattr(object, name) and catching AttributeError.)
p8189
sssVdelattr
p8190
(dp8191
g8
g321
sg10
(dp8192
g25
(lp8193
(dp8194
g2
VDelete a named attribute on an object; delattr(x, 'y') is equivalent to\u000a``del x.y''.
p8195
sg33
((dp8196
g39
Vobject
p8197
s(dp8198
g39
Vname
p8199
stp8200
sasg2
Vdelattr(object, name)\u000a\u000aDelete a named attribute on an object; delattr(x, 'y') is equivalent to\u000a``del x.y''.
p8201
sssVsetattr
p8202
(dp8203
g8
g321
sg10
(dp8204
g25
(lp8205
(dp8206
g2
VSet a named attribute on an object; setattr(x, 'y', v) is equivalent to\u000a``x.y = v''.
p8207
sg33
((dp8208
g39
Vobject
p8209
s(dp8210
g39
Vname
p8211
s(dp8212
g39
Vvalue
p8213
stp8214
sasg2
Vsetattr(object, name, value)\u000a\u000aSet a named attribute on an object; setattr(x, 'y', v) is equivalent to\u000a``x.y = v''.
p8215
sssVPendingDeprecationWarning
p8216
(dp8217
g8
g9
sg10
(dp8218
g2
VBase class for warnings about features which will be deprecated\u000ain the future.
p8219
sg13
(lp8220
g1753
asg4
(dp8221
g319
(dp8222
g8
g321
sg10
(dp8223
g25
(lp8224
(dp8225
g2
VBase class for warnings about features which will be deprecated\u000ain the future.
p8226
sg33
(lp8227
(dp8228
g275
V*
sg39
g33
sasasg2
g8226
sssg266
(dp8229
g8
g23
sg10
(dp8230
g25
(lp8231
(dp8232
g2
Vinitializes x; see help(type(x)) for signature
p8233
sg33
((dp8234
g9
(lp8235
g36
asg39
g40
s(dp8236
g275
V*
sg39
g33
stp8237
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8238
sssg873
(dp8239
g8
g793
sg10
(dp8240
g9
(lp8241
g877
assssg970
(lp8242
(dp8243
g16
Vbuiltins
p8244
sg18
VPendingDeprecationWarning
p8245
sag1753
ag1012
ag1080
ag15
asssVcompile
p8246
(dp8247
g8
g321
sg10
(dp8248
g25
(lp8249
(dp8250
g28
(lp8251
(dp8252
g16
Vbuiltins
p8253
sg18
Vcode
p8254
sasg2
VCompile the source string (a Python module, statement or expression)\u000ainto a code object that can be executed by exec() or eval().\u000aThe filename will be used for run-time error messages.\u000aThe mode must be 'exec' to compile a module, 'single' to compile a\u000asingle (interactive) statement, or 'eval' to compile an expression.\u000aThe flags argument, if present, controls which future statements influence\u000athe compilation of the code.\u000aThe dont_inherit argument, if non-zero, stops the compilation inheriting\u000athe effects of any future statements in effect in the code calling\u000acompile; if absent or zero these statements do influence the compilation,\u000ain addition to any features explicitly specified.
p8255
sg33
((dp8256
g39
Vsource
p8257
s(dp8258
g39
Vfilename
p8259
s(dp8260
g39
Vmode
p8261
s(dp8262
g67
g68
sg39
Vflags
p8263
s(dp8264
g67
g68
sg39
Vdont_inherit
p8265
stp8266
sasg2
Vcompile(source, filename, mode[, flags[, dont_inherit]]) -> code object\u000a\u000aCompile the source string (a Python module, statement or expression)\u000ainto a code object that can be executed by exec() or eval().\u000aThe filename will be used for run-time error messages.\u000aThe mode must be 'exec' to compile a module, 'single' to compile a\u000asingle (interactive) statement, or 'eval' to compile an expression.\u000aThe flags argument, if present, controls which future statements influence\u000athe compilation of the code.\u000aThe dont_inherit argument, if non-zero, stops the compilation inheriting\u000athe effects of any future statements in effect in the code calling\u000acompile; if absent or zero these statements do influence the compilation,\u000ain addition to any features explicitly specified.
p8267
sssVArithmeticError
p8268
(dp8269
g8
g9
sg10
(dp8270
g2
VBase class for arithmetic errors.
p8271
sg13
(lp8272
g1012
asg4
(dp8273
g319
(dp8274
g8
g321
sg10
(dp8275
g25
(lp8276
(dp8277
g2
VBase class for arithmetic errors.
p8278
sg33
(lp8279
(dp8280
g275
V*
sg39
g33
sasasg2
g8278
sssg266
(dp8281
g8
g23
sg10
(dp8282
g25
(lp8283
(dp8284
g2
Vinitializes x; see help(type(x)) for signature
p8285
sg33
((dp8286
g9
(lp8287
g36
asg39
g40
s(dp8288
g275
V*
sg39
g33
stp8289
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8290
sssg873
(dp8291
g8
g793
sg10
(dp8292
g9
(lp8293
g877
assssg970
(lp8294
g4361
ag1012
ag1080
ag15
asssVConnectionAbortedError
p8295
(dp8296
g8
g9
sg10
(dp8297
g2
VConnection aborted.
p8298
sg13
(lp8299
g1088
asg4
(dp8300
g319
(dp8301
g8
g321
sg10
(dp8302
g25
(lp8303
(dp8304
g2
VConnection aborted.
p8305
sg33
(lp8306
(dp8307
g275
V*
sg39
g33
sasasg2
g8305
sssg266
(dp8308
g8
g23
sg10
(dp8309
g25
(lp8310
(dp8311
g2
Vinitializes x; see help(type(x)) for signature
p8312
sg33
((dp8313
g9
(lp8314
g36
asg39
g40
s(dp8315
g275
V*
sg39
g33
stp8316
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8317
sssg873
(dp8318
g8
g793
sg10
(dp8319
g9
(lp8320
g877
assssg970
(lp8321
(dp8322
g16
Vbuiltins
p8323
sg18
VConnectionAbortedError
p8324
sag1088
ag1116
ag1012
ag1080
ag15
asssg1025
(dp8325
g8
g9
sg10
(dp8326
g2
Vproperty(fget=None, fset=None, fdel=None, doc=None) -> property attribute\u000a\u000afget is a function to be used for getting an attribute value, and likewise\u000afset is a function for setting, and fdel a function for del'ing, an\u000aattribute.  Typical use is to define a managed attribute x:\u000aclass C(object):\u000a    def getx(self): return self._x\u000a    def setx(self, value): self._x = value\u000a    def delx(self): del self._x\u000a    x = property(getx, setx, delx, "I'm the 'x' property.")\u000a\u000aDecorators make defining new properties or modifying existing ones easy:\u000aclass C(object):\u000a    @property\u000a    def x(self): return self._x\u000a    @x.setter\u000a    def x(self, value): self._x = value\u000a    @x.deleter\u000a    def x(self): del self._x\u000a
p8327
sg13
(lp8328
g15
asg4
(dp8329
Vfset
p8330
(dp8331
g8
g1025
sg10
(dp8332
g9
(lp8333
g15
asssg319
(dp8334
g8
g321
sg10
(dp8335
g25
(lp8336
(dp8337
g28
(lp8338
(dp8339
g16
Vbuiltins
p8340
sg18
Vproperty
p8341
sasg2
Vfget is a function to be used for getting an attribute value, and likewise\u000afset is a function for setting, and fdel a function for del'ing, an\u000aattribute.  Typical use is to define a managed attribute x:\u000aclass C(object):\u000a    def getx(self): return self._x\u000a    def setx(self, value): self._x = value\u000a    def delx(self): del self._x\u000a    x = property(getx, setx, delx, "I'm the 'x' property.")\u000a\u000aDecorators make defining new properties or modifying existing ones easy:\u000aclass C(object):\u000a    @property\u000a    def x(self): return self._x\u000a    @x.setter\u000a    def x(self, value): self._x = value\u000a    @x.deleter\u000a    def x(self): del self._x\u000a
p8342
sg33
((dp8343
g9
(lp8344
g329
asg39
g332
s(dp8345
g67
VNone
p8346
sg39
Vfget
p8347
s(dp8348
g67
VNone
p8349
sg39
Vfset
p8350
s(dp8351
g67
VNone
p8352
sg39
Vfdel
p8353
s(dp8354
g67
VNone
p8355
sg39
Vdoc
p8356
stp8357
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p8358
sssV__set__
p8359
(dp8360
g8
g23
sg10
(dp8361
g25
(lp8362
(dp8363
g2
V
sg33
((dp8364
g9
(lp8365
g36
asg39
g40
s(dp8366
g39
Vobj
p8367
s(dp8368
g39
Vvalue
p8369
stp8370
sasg2
Vdescr.__set__(obj, value)
p8371
sssVfdel
p8372
(dp8373
g8
g1025
sg10
(dp8374
g9
(lp8375
g15
asssg5592
(dp8376
g8
g1025
sg10
(dp8377
g9
(lp8378
g15
asssVgetter
p8379
(dp8380
g8
g23
sg10
(dp8381
g25
Nsg2
VDescriptor to change the getter on a property.
p8382
sssg266
(dp8383
g8
g23
sg10
(dp8384
g25
(lp8385
(dp8386
g2
Vinitializes x; see help(type(x)) for signature
p8387
sg33
((dp8388
g9
(lp8389
g36
asg39
g40
s(dp8390
g275
V*
sg39
g33
stp8391
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8392
sssV__delete__
p8393
(dp8394
g8
g23
sg10
(dp8395
g25
(lp8396
(dp8397
g2
V
sg33
((dp8398
g9
(lp8399
g36
asg39
g40
s(dp8400
g39
Vobj
p8401
stp8402
sasg2
Vdescr.__delete__(obj)
p8403
sssg5078
(dp8404
g8
g23
sg10
(dp8405
g25
(lp8406
(dp8407
g28
(lp8408
g4395
asg2
V
sg33
((dp8409
g9
(lp8410
g36
asg39
g40
s(dp8411
g39
Vobj
p8412
s(dp8413
g67
g68
sg39
Vtype
p8414
stp8415
sasg2
Vdescr.__get__(obj[, type]) -> value
p8416
sssVfget
p8417
(dp8418
g8
g1025
sg10
(dp8419
g9
(lp8420
g15
asssg873
(dp8421
g8
g1025
sg10
(dp8422
g9
(lp8423
g15
asssVdeleter
p8424
(dp8425
g8
g23
sg10
(dp8426
g25
Nsg2
VDescriptor to change the deleter on a property.
p8427
sssVsetter
p8428
(dp8429
g8
g23
sg10
(dp8430
g25
Nsg2
VDescriptor to change the setter on a property.
p8431
ssssg970
(lp8432
(dp8433
g16
Vbuiltins
p8434
sg18
Vproperty
p8435
sag15
asssVMemoryError
p8436
(dp8437
g8
g9
sg10
(dp8438
g2
VOut of memory.
p8439
sg13
(lp8440
g1012
asg4
(dp8441
g319
(dp8442
g8
g321
sg10
(dp8443
g25
(lp8444
(dp8445
g2
VOut of memory.
p8446
sg33
(lp8447
(dp8448
g275
V*
sg39
g33
sasasg2
g8446
sssg266
(dp8449
g8
g23
sg10
(dp8450
g25
(lp8451
(dp8452
g2
Vinitializes x; see help(type(x)) for signature
p8453
sg33
((dp8454
g9
(lp8455
g36
asg39
g40
s(dp8456
g275
V*
sg39
g33
stp8457
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8458
sssg873
(dp8459
g8
g793
sg10
(dp8460
g9
(lp8461
g877
assssg970
(lp8462
(dp8463
g16
Vbuiltins
p8464
sg18
VMemoryError
p8465
sag1012
ag1080
ag15
asssVImportError
p8466
(dp8467
g8
g9
sg10
(dp8468
g2
VImport can't find module, or can't find name in module.
p8469
sg13
(lp8470
g1012
asg4
(dp8471
g319
(dp8472
g8
g321
sg10
(dp8473
g25
(lp8474
(dp8475
g2
VImport can't find module, or can't find name in module.
p8476
sg33
(lp8477
(dp8478
g275
V*
sg39
g33
sasasg2
g8476
sssg72
(dp8479
g8
g23
sg10
(dp8480
g25
(lp8481
(dp8482
g2
V==> str(x)
p8483
sg33
((dp8484
g9
(lp8485
g36
asg39
g40
stp8486
sasg2
Vx.__str__() <==> str(x)
p8487
sssg1047
(dp8488
g8
g1025
sg10
(dp8489
g2
Vexception message
p8490
sg9
(lp8491
g15
asssVpath
p8492
(dp8493
g8
g1025
sg10
(dp8494
g2
Vmodule path
p8495
sg9
(lp8496
g15
asssg873
(dp8497
g8
g793
sg10
(dp8498
g9
(lp8499
g877
asssg266
(dp8500
g8
g23
sg10
(dp8501
g25
(lp8502
(dp8503
g2
Vinitializes x; see help(type(x)) for signature
p8504
sg33
((dp8505
g9
(lp8506
g36
asg39
g40
s(dp8507
g275
V*
sg39
g33
stp8508
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8509
sssg39
(dp8510
g8
g1025
sg10
(dp8511
g2
Vmodule name
p8512
sg9
(lp8513
g15
assssg970
(lp8514
(dp8515
g16
Vbuiltins
p8516
sg18
VImportError
p8517
sag1012
ag1080
ag15
asssV__import__
p8518
(dp8519
g8
g321
sg10
(dp8520
g25
(lp8521
(dp8522
g2
V, level=0) -> module\u000a\u000aImport a module. Because this function is meant for use by the Python\u000ainterpreter and not for general use it is better to use\u000aimportlib.import_module() to programmatically import a module.\u000a\u000aThe globals argument is only used to determine the context;\u000athey are not modified.  The locals argument is unused.  The fromlist\u000ashould be a list of names to emulate ``from name import ...'', or an\u000aempty list to emulate ``import name''.\u000aWhen importing a module from a package, note that __import__('A.B', ...)\u000areturns package A when fromlist is empty, but its submodule B when\u000afromlist is not empty.  Level is used to determine whether to perform \u000aabsolute or relative imports. 0 is absolute while a positive number\u000ais the number of parent directories to search relative to the current module.
p8523
sg33
((dp8524
g39
Vname
p8525
s(dp8526
g67
VNone
p8527
sg39
Vglobals
p8528
s(dp8529
g67
VNone
p8530
sg39
Vlocals
p8531
s(dp8532
g67
V(
sg39
Vfromlist
p8533
stp8534
sasg2
V__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\u000a\u000aImport a module. Because this function is meant for use by the Python\u000ainterpreter and not for general use it is better to use\u000aimportlib.import_module() to programmatically import a module.\u000a\u000aThe globals argument is only used to determine the context;\u000athey are not modified.  The locals argument is unused.  The fromlist\u000ashould be a list of names to emulate ``from name import ...'', or an\u000aempty list to emulate ``import name''.\u000aWhen importing a module from a package, note that __import__('A.B', ...)\u000areturns package A when fromlist is empty, but its submodule B when\u000afromlist is not empty.  Level is used to determine whether to perform \u000aabsolute or relative imports. 0 is absolute while a positive number\u000ais the number of parent directories to search relative to the current module.
p8535
sssVInterruptedError
p8536
(dp8537
g8
g9
sg10
(dp8538
g2
VInterrupted by signal.
p8539
sg13
(lp8540
g1116
asg4
(dp8541
g319
(dp8542
g8
g321
sg10
(dp8543
g25
(lp8544
(dp8545
g2
VInterrupted by signal.
p8546
sg33
(lp8547
(dp8548
g275
V*
sg39
g33
sasasg2
g8546
sssg266
(dp8549
g8
g23
sg10
(dp8550
g25
(lp8551
(dp8552
g2
Vinitializes x; see help(type(x)) for signature
p8553
sg33
((dp8554
g9
(lp8555
g36
asg39
g40
s(dp8556
g275
V*
sg39
g33
stp8557
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8558
sssg873
(dp8559
g8
g793
sg10
(dp8560
g9
(lp8561
g877
assssg970
(lp8562
(dp8563
g16
Vbuiltins
p8564
sg18
VInterruptedError
p8565
sag1116
ag1012
ag1080
ag15
asssVNotADirectoryError
p8566
(dp8567
g8
g9
sg10
(dp8568
g2
VOperation only works on directories.
p8569
sg13
(lp8570
g1116
asg4
(dp8571
g319
(dp8572
g8
g321
sg10
(dp8573
g25
(lp8574
(dp8575
g2
VOperation only works on directories.
p8576
sg33
(lp8577
(dp8578
g275
V*
sg39
g33
sasasg2
g8576
sssg266
(dp8579
g8
g23
sg10
(dp8580
g25
(lp8581
(dp8582
g2
Vinitializes x; see help(type(x)) for signature
p8583
sg33
((dp8584
g9
(lp8585
g36
asg39
g40
s(dp8586
g275
V*
sg39
g33
stp8587
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8588
sssg873
(dp8589
g8
g793
sg10
(dp8590
g9
(lp8591
g877
assssg970
(lp8592
(dp8593
g16
Vbuiltins
p8594
sg18
VNotADirectoryError
p8595
sag1116
ag1012
ag1080
ag15
asssVKeyError
p8596
(dp8597
g8
g9
sg10
(dp8598
g2
VMapping key not found.
p8599
sg13
(lp8600
g2503
asg4
(dp8601
g72
(dp8602
g8
g23
sg10
(dp8603
g25
(lp8604
(dp8605
g2
V==> str(x)
p8606
sg33
((dp8607
g9
(lp8608
g36
asg39
g40
stp8609
sasg2
Vx.__str__() <==> str(x)
p8610
sssg319
(dp8611
g8
g321
sg10
(dp8612
g25
(lp8613
(dp8614
g2
VMapping key not found.
p8615
sg33
(lp8616
(dp8617
g275
V*
sg39
g33
sasasg2
g8615
sssg266
(dp8618
g8
g23
sg10
(dp8619
g25
(lp8620
(dp8621
g2
Vinitializes x; see help(type(x)) for signature
p8622
sg33
((dp8623
g9
(lp8624
g36
asg39
g40
s(dp8625
g275
V*
sg39
g33
stp8626
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8627
sssg873
(dp8628
g8
g793
sg10
(dp8629
g9
(lp8630
g877
assssg970
(lp8631
(dp8632
g16
Vbuiltins
p8633
sg18
VKeyError
p8634
sag2503
ag1012
ag1080
ag15
asssVSyntaxWarning
p8635
(dp8636
g8
g9
sg10
(dp8637
g2
VBase class for warnings about dubious syntax.
p8638
sg13
(lp8639
g1753
asg4
(dp8640
g319
(dp8641
g8
g321
sg10
(dp8642
g25
(lp8643
(dp8644
g2
VBase class for warnings about dubious syntax.
p8645
sg33
(lp8646
(dp8647
g275
V*
sg39
g33
sasasg2
g8645
sssg266
(dp8648
g8
g23
sg10
(dp8649
g25
(lp8650
(dp8651
g2
Vinitializes x; see help(type(x)) for signature
p8652
sg33
((dp8653
g9
(lp8654
g36
asg39
g40
s(dp8655
g275
V*
sg39
g33
stp8656
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8657
sssg873
(dp8658
g8
g793
sg10
(dp8659
g9
(lp8660
g877
assssg970
(lp8661
(dp8662
g16
Vbuiltins
p8663
sg18
VSyntaxWarning
p8664
sag1753
ag1012
ag1080
ag15
asssVexit
p8665
(dp8666
g8
g793
sg10
(dp8667
g9
(lp8668
g6481
asssVEnvironmentError
p8669
(dp8670
g8
g9
sg10
(dp8671
g2
VBase class for I/O related errors.
p8672
sg13
(lp8673
g1012
asg4
(dp8674
g2126
(dp8675
g8
g1025
sg10
(dp8676
g2
VWin32 exception code
p8677
sg9
(lp8678
g15
asssg319
(dp8679
g8
g321
sg10
(dp8680
g25
(lp8681
(dp8682
g2
VBase class for I/O related errors.
p8683
sg33
(lp8684
(dp8685
g275
V*
sg39
g33
sasasg2
g8683
sssg2138
(dp8686
g8
g1025
sg10
(dp8687
g9
(lp8688
g15
asssg2142
(dp8689
g8
g1025
sg10
(dp8690
g2
VPOSIX exception code
p8691
sg9
(lp8692
g15
asssg72
(dp8693
g8
g23
sg10
(dp8694
g25
(lp8695
(dp8696
g2
V==> str(x)
p8697
sg33
((dp8698
g9
(lp8699
g36
asg39
g40
stp8700
sasg2
Vx.__str__() <==> str(x)
p8701
sssg82
(dp8702
g8
g23
sg10
(dp8703
g25
Nsssg2158
(dp8704
g8
g1025
sg10
(dp8705
g2
Vexception strerror
p8706
sg9
(lp8707
g15
asssg1034
(dp8708
g8
g1025
sg10
(dp8709
g2
Vexception filename
p8710
sg9
(lp8711
g15
asssg873
(dp8712
g8
g793
sg10
(dp8713
g9
(lp8714
g877
asssg266
(dp8715
g8
g23
sg10
(dp8716
g25
(lp8717
(dp8718
g2
Vinitializes x; see help(type(x)) for signature
p8719
sg33
((dp8720
g9
(lp8721
g36
asg39
g40
s(dp8722
g275
V*
sg39
g33
stp8723
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8724
ssssg970
(lp8725
g1116
ag1012
ag1080
ag15
asssVascii
p8726
(dp8727
g8
g321
sg10
(dp8728
g25
(lp8729
(dp8730
g28
(lp8731
g406
asg2
VAs repr(), return a string containing a printable representation of an\u000aobject, but escape the non-ASCII characters in the string returned by\u000arepr() using \u005cx, \u005cu or \u005cU escapes.  This generates a string similar\u000ato that returned by repr() in Python 2.
p8732
sg33
((dp8733
g39
Vobject
p8734
stp8735
sasg2
Vascii(object) -> string\u000a\u000aAs repr(), return a string containing a printable representation of an\u000aobject, but escape the non-ASCII characters in the string returned by\u000arepr() using \u005cx, \u005cu or \u005cU escapes.  This generates a string similar\u000ato that returned by repr() in Python 2.
p8736
sssVany
p8737
(dp8738
g8
g321
sg10
(dp8739
g25
(lp8740
(dp8741
g28
(lp8742
g141
asg2
VReturn True if bool(x) is True for any x in the iterable.
p8743
sg33
((dp8744
g39
Viterable
p8745
stp8746
sasg2
Vany(iterable) -> bool\u000a\u000aReturn True if bool(x) is True for any x in the iterable.
p8747
sssVOSError
p8748
(dp8749
g8
g9
sg10
(dp8750
g2
VBase class for I/O related errors.
p8751
sg13
(lp8752
g1012
asg4
(dp8753
g2126
(dp8754
g8
g1025
sg10
(dp8755
g2
VWin32 exception code
p8756
sg9
(lp8757
g15
asssg319
(dp8758
g8
g321
sg10
(dp8759
g25
(lp8760
(dp8761
g2
VBase class for I/O related errors.
p8762
sg33
(lp8763
(dp8764
g275
V*
sg39
g33
sasasg2
g8762
sssg2138
(dp8765
g8
g1025
sg10
(dp8766
g9
(lp8767
g15
asssg2142
(dp8768
g8
g1025
sg10
(dp8769
g2
VPOSIX exception code
p8770
sg9
(lp8771
g15
asssg72
(dp8772
g8
g23
sg10
(dp8773
g25
(lp8774
(dp8775
g2
V==> str(x)
p8776
sg33
((dp8777
g9
(lp8778
g36
asg39
g40
stp8779
sasg2
Vx.__str__() <==> str(x)
p8780
sssg82
(dp8781
g8
g23
sg10
(dp8782
g25
Nsssg2158
(dp8783
g8
g1025
sg10
(dp8784
g2
Vexception strerror
p8785
sg9
(lp8786
g15
asssg1034
(dp8787
g8
g1025
sg10
(dp8788
g2
Vexception filename
p8789
sg9
(lp8790
g15
asssg873
(dp8791
g8
g793
sg10
(dp8792
g9
(lp8793
g877
asssg266
(dp8794
g8
g23
sg10
(dp8795
g25
(lp8796
(dp8797
g2
Vinitializes x; see help(type(x)) for signature
p8798
sg33
((dp8799
g9
(lp8800
g36
asg39
g40
s(dp8801
g275
V*
sg39
g33
stp8802
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8803
ssssg970
(lp8804
g1116
ag1012
ag1080
ag15
asssVDeprecationWarning
p8805
(dp8806
g8
g9
sg10
(dp8807
g2
VBase class for warnings about deprecated features.
p8808
sg13
(lp8809
g1753
asg4
(dp8810
g319
(dp8811
g8
g321
sg10
(dp8812
g25
(lp8813
(dp8814
g2
VBase class for warnings about deprecated features.
p8815
sg33
(lp8816
(dp8817
g275
V*
sg39
g33
sasasg2
g8815
sssg266
(dp8818
g8
g23
sg10
(dp8819
g25
(lp8820
(dp8821
g2
Vinitializes x; see help(type(x)) for signature
p8822
sg33
((dp8823
g9
(lp8824
g36
asg39
g40
s(dp8825
g275
V*
sg39
g33
stp8826
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8827
sssg873
(dp8828
g8
g793
sg10
(dp8829
g9
(lp8830
g877
assssg970
(lp8831
(dp8832
g16
Vbuiltins
p8833
sg18
VDeprecationWarning
p8834
sag1753
ag1012
ag1080
ag15
asssVmin
p8835
(dp8836
g8
g321
sg10
(dp8837
g25
(lp8838
(dp8839
g28
(lp8840
g4395
asg2
VWith a single iterable argument, return its smallest item.\u000aWith two or more arguments, return the smallest argument.
p8841
sg33
((dp8842
g39
Viterable
p8843
s(dp8844
g67
Vfunc
p8845
sg39
Vkey
p8846
stp8847
sa(dp8848
g28
(lp8849
g4395
asg2
g8841
sg33
((dp8850
g39
Va
s(dp8851
g39
Vb
s(dp8852
g39
Vc
s(dp8853
g275
V*
sg39
g33
s(dp8854
g67
Vfunc
p8855
sg39
Vkey
p8856
stp8857
sasg2
Vmin(iterable[, key=func]) -> value\u000amin(a, b, c, ...[, key=func]) -> value\u000a\u000aWith a single iterable argument, return its smallest item.\u000aWith two or more arguments, return the smallest argument.
p8858
sssVUnicodeWarning
p8859
(dp8860
g8
g9
sg10
(dp8861
g2
VBase class for warnings about Unicode related problems, mostly\u000arelated to conversion problems.
p8862
sg13
(lp8863
g1753
asg4
(dp8864
g319
(dp8865
g8
g321
sg10
(dp8866
g25
(lp8867
(dp8868
g2
VBase class for warnings about Unicode related problems, mostly\u000arelated to conversion problems.
p8869
sg33
(lp8870
(dp8871
g275
V*
sg39
g33
sasasg2
g8869
sssg266
(dp8872
g8
g23
sg10
(dp8873
g25
(lp8874
(dp8875
g2
Vinitializes x; see help(type(x)) for signature
p8876
sg33
((dp8877
g9
(lp8878
g36
asg39
g40
s(dp8879
g275
V*
sg39
g33
stp8880
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8881
sssg873
(dp8882
g8
g793
sg10
(dp8883
g9
(lp8884
g877
assssg970
(lp8885
(dp8886
g16
Vbuiltins
p8887
sg18
VUnicodeWarning
p8888
sag1753
ag1012
ag1080
ag15
asssVFileExistsError
p8889
(dp8890
g8
g9
sg10
(dp8891
g2
VFile already exists.
p8892
sg13
(lp8893
g1116
asg4
(dp8894
g319
(dp8895
g8
g321
sg10
(dp8896
g25
(lp8897
(dp8898
g2
VFile already exists.
p8899
sg33
(lp8900
(dp8901
g275
V*
sg39
g33
sasasg2
g8899
sssg266
(dp8902
g8
g23
sg10
(dp8903
g25
(lp8904
(dp8905
g2
Vinitializes x; see help(type(x)) for signature
p8906
sg33
((dp8907
g9
(lp8908
g36
asg39
g40
s(dp8909
g275
V*
sg39
g33
stp8910
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p8911
sssg873
(dp8912
g8
g793
sg10
(dp8913
g9
(lp8914
g877
assssg970
(lp8915
(dp8916
g16
Vbuiltins
p8917
sg18
VFileExistsError
p8918
sag1116
ag1012
ag1080
ag15
asssV__package__
p8919
(dp8920
g8
g793
sg10
(dp8921
g9
(lp8922
g934
asssVcomplex
p8923
(dp8924
g8
g9
sg10
(dp8925
g2
Vcomplex(real[, imag]) -> complex number\u000a\u000aCreate a complex number from a real part and an optional imaginary part.\u000aThis is equivalent to (real + imag*1j) where imag defaults to 0.
p8926
sg13
(lp8927
g15
asg4
(dp8928
g5850
(dp8929
g8
g23
sg10
(dp8930
g25
(lp8931
(dp8932
g2
V==> int(x)
p8933
sg33
((dp8934
g9
(lp8935
g36
asg39
g40
stp8936
sasg2
Vx.__int__() <==> int(x)
p8937
sssg5860
(dp8938
g8
g23
sg10
(dp8939
g25
(lp8940
(dp8941
g2
V==> y/x
p8942
sg33
((dp8943
g9
(lp8944
g36
asg39
g40
s(dp8945
g39
Vy
stp8946
sasg2
Vx.__rtruediv__(y) <==> y/x
p8947
sssg72
(dp8948
g8
g23
sg10
(dp8949
g25
(lp8950
(dp8951
g2
V==> str(x)
p8952
sg33
((dp8953
g9
(lp8954
g36
asg39
g40
stp8955
sasg2
Vx.__str__() <==> str(x)
p8956
sssg5900
(dp8957
g8
g23
sg10
(dp8958
g25
(lp8959
(dp8960
g2
V==> y+x
p8961
sg33
((dp8962
g9
(lp8963
g36
asg39
g40
s(dp8964
g39
Vy
stp8965
sasg2
Vx.__radd__(y) <==> y+x
p8966
sssg5921
(dp8967
g8
g23
sg10
(dp8968
g25
(lp8969
(dp8970
g2
V==> x/y
p8971
sg33
((dp8972
g9
(lp8973
g36
asg39
g40
s(dp8974
g39
Vy
stp8975
sasg2
Vx.__truediv__(y) <==> x/y
p8976
sssg1498
(dp8977
g8
g23
sg10
(dp8978
g25
(lp8979
(dp8980
g2
V==> y-x
p8981
sg33
((dp8982
g9
(lp8983
g36
asg39
g40
s(dp8984
g39
Vy
stp8985
sasg2
Vx.__rsub__(y) <==> y-x
p8986
sssg5945
(dp8987
g8
g23
sg10
(dp8988
g25
(lp8989
(dp8990
g28
(lp8991
(dp8992
g16
Vbuiltins
p8993
sg18
Vcomplex
p8994
sasg2
VReturns the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
p8995
sg33
((dp8996
g9
(lp8997
g36
asg39
g40
stp8998
sasg2
Vcomplex.conjugate() -> complex\u000a\u000aReturns the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
p8999
sssg212
(dp9000
g8
g23
sg10
(dp9001
g25
(lp9002
(dp9003
g2
V==> y*x
p9004
sg33
((dp9005
g9
(lp9006
g36
asg39
g40
s(dp9007
g39
Vy
stp9008
sasg2
Vx.__rmul__(y) <==> y*x
p9009
sssg223
(dp9010
g8
g23
sg10
(dp9011
g25
(lp9012
(dp9013
g2
V==> x<y
p9014
sg33
((dp9015
g9
(lp9016
g36
asg39
g40
s(dp9017
g39
Vy
stp9018
sasg2
Vx.__lt__(y) <==> x<y
p9019
sssg2732
(dp9020
g8
g23
sg10
(dp9021
g25
Nsssg5972
(dp9022
g8
g23
sg10
(dp9023
g25
(lp9024
(dp9025
g2
V==> y%x
p9026
sg33
((dp9027
g9
(lp9028
g36
asg39
g40
s(dp9029
g39
Vy
stp9030
sasg2
Vx.__rmod__(y) <==> y%x
p9031
sssg5987
(dp9032
g8
g23
sg10
(dp9033
g25
(lp9034
(dp9035
g2
V==> float(x)
p9036
sg33
((dp9037
g9
(lp9038
g36
asg39
g40
stp9039
sasg2
Vx.__float__() <==> float(x)
p9040
sssg5997
(dp9041
g8
g23
sg10
(dp9042
g25
(lp9043
(dp9044
g2
V==> pow(x, y[, z])
p9045
sg33
((dp9046
g9
(lp9047
g36
asg39
g40
s(dp9048
g39
Vx
s(dp9049
g67
g68
sg39
Vz
stp9050
sasg2
Vy.__rpow__(x[, z]) <==> pow(x, y[, z])
p9051
sssg319
(dp9052
g8
g321
sg10
(dp9053
g25
(lp9054
(dp9055
g28
(lp9056
g8992
asg2
VCreate a complex number from a real part and an optional imaginary part.\u000aThis is equivalent to (real + imag*1j) where imag defaults to 0.
p9057
sg33
((dp9058
g9
(lp9059
g329
asg39
g332
s(dp9060
g39
Vreal
p9061
s(dp9062
g67
g68
sg39
Vimag
p9063
stp9064
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p9065
sssg919
(dp9066
g8
g23
sg10
(dp9067
g25
(lp9068
(dp9069
g2
V==> x*y
p9070
sg33
((dp9071
g9
(lp9072
g36
asg39
g40
s(dp9073
g39
Vy
stp9074
sasg2
Vx.__mul__(y) <==> x*y
p9075
sssg6023
(dp9076
g8
g23
sg10
(dp9077
g25
(lp9078
(dp9079
g28
(lp9080
g406
asg2
VConverts to a string according to format_spec.
p9081
sg33
((dp9082
g9
(lp9083
g36
asg39
g40
stp9084
sasg2
Vcomplex.__format__() -> str\u000a\u000aConverts to a string according to format_spec.
p9085
sssg6078
(dp9086
g8
g23
sg10
(dp9087
g25
(lp9088
(dp9089
g2
V==> abs(x)
p9090
sg33
((dp9091
g9
(lp9092
g36
asg39
g40
stp9093
sasg2
Vx.__abs__() <==> abs(x)
p9094
sssg6057
(dp9095
g8
g23
sg10
(dp9096
g25
(lp9097
(dp9098
g2
V==> +x
p9099
sg33
((dp9100
g9
(lp9101
g36
asg39
g40
stp9102
sasg2
Vx.__pos__() <==> +x
p9103
sssg6067
(dp9104
g8
g23
sg10
(dp9105
g25
(lp9106
(dp9107
g2
V==> y//x
p9108
sg33
((dp9109
g9
(lp9110
g36
asg39
g40
s(dp9111
g39
Vy
stp9112
sasg2
Vx.__rfloordiv__(y) <==> y//x
p9113
sssg873
(dp9114
g8
g793
sg10
(dp9115
g9
(lp9116
g877
asssg5890
(dp9117
g8
g23
sg10
(dp9118
g25
(lp9119
(dp9120
g2
V==> -x
p9121
sg33
((dp9122
g9
(lp9123
g36
asg39
g40
stp9124
sasg2
Vx.__neg__() <==> -x
p9125
sssg6101
(dp9126
g8
g1025
sg10
(dp9127
g2
Vthe real part of a complex number
p9128
sg9
(lp9129
g15
asssg43
(dp9130
g8
g23
sg10
(dp9131
g25
(lp9132
(dp9133
g2
V==> x!=y
p9134
sg33
((dp9135
g9
(lp9136
g36
asg39
g40
s(dp9137
g39
Vy
stp9138
sasg2
Vx.__ne__(y) <==> x!=y
p9139
sssg6116
(dp9140
g8
g23
sg10
(dp9141
g25
(lp9142
(dp9143
g2
V==> divmod(y, x)
p9144
sg33
((dp9145
g9
(lp9146
g36
asg39
g40
s(dp9147
g39
Vy
stp9148
sasg2
Vx.__rdivmod__(y) <==> divmod(y, x)
p9149
sssg6137
(dp9150
g8
g1025
sg10
(dp9151
g2
Vthe imaginary part of a complex number
p9152
sg9
(lp9153
g15
asssg6271
(dp9154
g8
g23
sg10
(dp9155
g25
(lp9156
(dp9157
g2
V==> pow(x, y[, z])
p9158
sg33
((dp9159
g9
(lp9160
g36
asg39
g40
s(dp9161
g39
Vy
s(dp9162
g67
g68
sg39
Vz
stp9163
sasg2
Vx.__pow__(y[, z]) <==> pow(x, y[, z])
p9164
sssg666
(dp9165
g8
g23
sg10
(dp9166
g25
(lp9167
(dp9168
g2
V==> x+y
p9169
sg33
((dp9170
g9
(lp9171
g36
asg39
g40
s(dp9172
g39
Vy
stp9173
sasg2
Vx.__add__(y) <==> x+y
p9174
sssg677
(dp9175
g8
g23
sg10
(dp9176
g25
(lp9177
(dp9178
g2
V==> x>y
p9179
sg33
((dp9180
g9
(lp9181
g36
asg39
g40
s(dp9182
g39
Vy
stp9183
sasg2
Vx.__gt__(y) <==> x>y
p9184
sssg6173
(dp9185
g8
g23
sg10
(dp9186
g25
(lp9187
(dp9188
g2
V==> x != 0
p9189
sg33
((dp9190
g9
(lp9191
g36
asg39
g40
stp9192
sasg2
Vx.__bool__() <==> x != 0
p9193
sssg460
(dp9194
g8
g23
sg10
(dp9195
g25
(lp9196
(dp9197
g2
V==> x==y
p9198
sg33
((dp9199
g9
(lp9200
g36
asg39
g40
s(dp9201
g39
Vy
stp9202
sasg2
Vx.__eq__(y) <==> x==y
p9203
sssg6201
(dp9204
g8
g23
sg10
(dp9205
g25
(lp9206
(dp9207
g2
V==> x%y
p9208
sg33
((dp9209
g9
(lp9210
g36
asg39
g40
s(dp9211
g39
Vy
stp9212
sasg2
Vx.__mod__(y) <==> x%y
p9213
sssg908
(dp9214
g8
g23
sg10
(dp9215
g25
(lp9216
(dp9217
g2
V==> x<=y
p9218
sg33
((dp9219
g9
(lp9220
g36
asg39
g40
s(dp9221
g39
Vy
stp9222
sasg2
Vx.__le__(y) <==> x<=y
p9223
sssg507
(dp9224
g8
g23
sg10
(dp9225
g25
(lp9226
(dp9227
g2
V==> repr(x)
p9228
sg33
((dp9229
g9
(lp9230
g36
asg39
g40
stp9231
sasg2
Vx.__repr__() <==> repr(x)
p9232
sssg6231
(dp9233
g8
g23
sg10
(dp9234
g25
(lp9235
(dp9236
g2
V==> x//y
p9237
sg33
((dp9238
g9
(lp9239
g36
asg39
g40
s(dp9240
g39
Vy
stp9241
sasg2
Vx.__floordiv__(y) <==> x//y
p9242
sssg930
(dp9243
g8
g23
sg10
(dp9244
g25
(lp9245
(dp9246
g2
V==> hash(x)
p9247
sg33
((dp9248
g9
(lp9249
g36
asg39
g40
stp9250
sasg2
Vx.__hash__() <==> hash(x)
p9251
sssg1667
(dp9252
g8
g23
sg10
(dp9253
g25
(lp9254
(dp9255
g2
V==> x-y
p9256
sg33
((dp9257
g9
(lp9258
g36
asg39
g40
s(dp9259
g39
Vy
stp9260
sasg2
Vx.__sub__(y) <==> x-y
p9261
sssg959
(dp9262
g8
g23
sg10
(dp9263
g25
(lp9264
(dp9265
g2
V==> x>=y
p9266
sg33
((dp9267
g9
(lp9268
g36
asg39
g40
s(dp9269
g39
Vy
stp9270
sasg2
Vx.__ge__(y) <==> x>=y
p9271
sssg6142
(dp9272
g8
g23
sg10
(dp9273
g25
(lp9274
(dp9275
g2
V==> divmod(x, y)
p9276
sg33
((dp9277
g9
(lp9278
g36
asg39
g40
s(dp9279
g39
Vy
stp9280
sasg2
Vx.__divmod__(y) <==> divmod(x, y)
p9281
ssssg970
(lp9282
(dp9283
g16
Vbuiltins
p9284
sg18
Vcomplex
p9285
sag15
asssVbool
p9286
(dp9287
g8
g9
sg10
(dp9288
g2
Vbool(x) -> bool\u000a\u000aReturns True when the argument x is true, False otherwise.\u000aThe builtins True and False are the only two instances of the class bool.\u000aThe class bool is a subclass of the class int, and cannot be subclassed.
p9289
sg13
(lp9290
g7460
asg4
(dp9291
g1530
(dp9292
g8
g23
sg10
(dp9293
g25
(lp9294
(dp9295
g2
V==> y&x
p9296
sg33
((dp9297
g9
(lp9298
g36
asg39
g40
s(dp9299
g39
Vy
stp9300
sasg2
Vx.__rand__(y) <==> y&x
p9301
sssg1487
(dp9302
g8
g23
sg10
(dp9303
g25
(lp9304
(dp9305
g2
V==> y|x
p9306
sg33
((dp9307
g9
(lp9308
g36
asg39
g40
s(dp9309
g39
Vy
stp9310
sasg2
Vx.__ror__(y) <==> y|x
p9311
sssg319
(dp9312
g8
g321
sg10
(dp9313
g25
(lp9314
(dp9315
g28
(lp9316
g141
asg2
VReturns True when the argument x is true, False otherwise.\u000aThe builtins True and False are the only two instances of the class bool.\u000aThe class bool is a subclass of the class int, and cannot be subclassed.
p9317
sg33
((dp9318
g9
(lp9319
g329
asg39
g332
s(dp9320
g39
Vx
stp9321
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p9322
sssg72
(dp9323
g8
g23
sg10
(dp9324
g25
(lp9325
(dp9326
g2
V==> str(x)
p9327
sg33
((dp9328
g9
(lp9329
g36
asg39
g40
stp9330
sasg2
Vx.__str__() <==> str(x)
p9331
sssg1619
(dp9332
g8
g23
sg10
(dp9333
g25
(lp9334
(dp9335
g2
V==> y^x
p9336
sg33
((dp9337
g9
(lp9338
g36
asg39
g40
s(dp9339
g39
Vy
stp9340
sasg2
Vx.__rxor__(y) <==> y^x
p9341
sssg1634
(dp9342
g8
g23
sg10
(dp9343
g25
(lp9344
(dp9345
g2
V==> x^y
p9346
sg33
((dp9347
g9
(lp9348
g36
asg39
g40
s(dp9349
g39
Vy
stp9350
sasg2
Vx.__xor__(y) <==> x^y
p9351
sssg507
(dp9352
g8
g23
sg10
(dp9353
g25
(lp9354
(dp9355
g2
V==> repr(x)
p9356
sg33
((dp9357
g9
(lp9358
g36
asg39
g40
stp9359
sasg2
Vx.__repr__() <==> repr(x)
p9360
sssg1509
(dp9361
g8
g23
sg10
(dp9362
g25
(lp9363
(dp9364
g2
V==> x&y
p9365
sg33
((dp9366
g9
(lp9367
g36
asg39
g40
s(dp9368
g39
Vy
stp9369
sasg2
Vx.__and__(y) <==> x&y
p9370
sssg873
(dp9371
g8
g793
sg10
(dp9372
g9
(lp9373
g877
asssg1588
(dp9374
g8
g23
sg10
(dp9375
g25
(lp9376
(dp9377
g2
V==> x|y
p9378
sg33
((dp9379
g9
(lp9380
g36
asg39
g40
s(dp9381
g39
Vy
stp9382
sasg2
Vx.__or__(y) <==> x|y
p9383
ssssg970
(lp9384
g2461
ag7460
ag15
asssVValueError
p9385
(dp9386
g8
g9
sg10
(dp9387
g2
VInappropriate argument value (of correct type).
p9388
sg13
(lp9389
g1012
asg4
(dp9390
g319
(dp9391
g8
g321
sg10
(dp9392
g25
(lp9393
(dp9394
g2
VInappropriate argument value (of correct type).
p9395
sg33
(lp9396
(dp9397
g275
V*
sg39
g33
sasasg2
g9395
sssg266
(dp9398
g8
g23
sg10
(dp9399
g25
(lp9400
(dp9401
g2
Vinitializes x; see help(type(x)) for signature
p9402
sg33
((dp9403
g9
(lp9404
g36
asg39
g40
s(dp9405
g275
V*
sg39
g33
stp9406
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p9407
sssg873
(dp9408
g8
g793
sg10
(dp9409
g9
(lp9410
g877
assssg970
(lp9411
g4176
ag1012
ag1080
ag15
asssVNotImplemented
p9412
(dp9413
g8
g793
sg10
(dp9414
g9
(lp9415
(dp9416
g16
Vbuiltins
p9417
sg18
VNotImplementedType
p9418
sasssVmap
p9419
(dp9420
g8
g9
sg10
(dp9421
g2
Vmap(func, *iterables) --> map object\u000a\u000aMake an iterator that computes the function using arguments from\u000aeach of the iterables.  Stops when the shortest iterable is exhausted.
p9422
sg13
(lp9423
g15
asg4
(dp9424
g621
(dp9425
g8
g23
sg10
(dp9426
g25
(lp9427
(dp9428
g2
V==> iter(x)
p9429
sg33
((dp9430
g9
(lp9431
g36
asg39
g40
stp9432
sasg2
Vx.__iter__() <==> iter(x)
p9433
sssg1368
(dp9434
g8
g23
sg10
(dp9435
g25
(lp9436
(dp9437
g2
V==> next(x)
p9438
sg33
((dp9439
g9
(lp9440
g36
asg39
g40
stp9441
sasg2
Vx.__next__() <==> next(x)
p9442
sssg82
(dp9443
g8
g23
sg10
(dp9444
g25
Nsg2
VReturn state information for pickling.
p9445
sssg319
(dp9446
g8
g321
sg10
(dp9447
g25
(lp9448
(dp9449
g28
(lp9450
(dp9451
g16
Vbuiltins
p9452
sg18
Vmap
p9453
sasg2
VMake an iterator that computes the function using arguments from\u000aeach of the iterables.  Stops when the shortest iterable is exhausted.
p9454
sg33
((dp9455
g9
(lp9456
g329
asg39
g332
s(dp9457
g39
Vfunc
p9458
s(dp9459
g275
V*
sg39
Viterables
p9460
stp9461
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p9462
sssg873
(dp9463
g8
g793
sg10
(dp9464
g9
(lp9465
g877
assssg970
(lp9466
(dp9467
g16
Vbuiltins
p9468
sg18
Vmap
p9469
sag15
asssVexec
p9470
(dp9471
g8
g321
sg10
(dp9472
g25
(lp9473
(dp9474
g2
VRead and execute code from an object, which can be a string or a code\u000aobject.\u000aThe globals and locals are dictionaries, defaulting to the current\u000aglobals and locals.  If only globals is given, locals defaults to it.
p9475
sg33
((dp9476
g39
Vobject
p9477
s(dp9478
g67
g68
sg39
Vglobals
p9479
s(dp9480
g67
g68
sg39
Vlocals
p9481
stp9482
sasg2
Vexec(object[, globals[, locals]])\u000a\u000aRead and execute code from an object, which can be a string or a code\u000aobject.\u000aThe globals and locals are dictionaries, defaulting to the current\u000aglobals and locals.  If only globals is given, locals defaults to it.
p9483
sssVmax
p9484
(dp9485
g8
g321
sg10
(dp9486
g25
(lp9487
(dp9488
g28
(lp9489
g4395
asg2
VWith a single iterable argument, return its largest item.\u000aWith two or more arguments, return the largest argument.
p9490
sg33
((dp9491
g39
Viterable
p9492
s(dp9493
g67
Vfunc
p9494
sg39
Vkey
p9495
stp9496
sa(dp9497
g28
(lp9498
g4395
asg2
g9490
sg33
((dp9499
g39
Va
s(dp9500
g39
Vb
s(dp9501
g39
Vc
s(dp9502
g275
V*
sg39
g33
s(dp9503
g67
Vfunc
p9504
sg39
Vkey
p9505
stp9506
sasg2
Vmax(iterable[, key=func]) -> value\u000amax(a, b, c, ...[, key=func]) -> value\u000a\u000aWith a single iterable argument, return its largest item.\u000aWith two or more arguments, return the largest argument.
p9507
sssg4144
(dp9508
g8
g9
sg10
(dp9509
g2
VThe most base type
p9510
sg13
(lp9511
sg4
(dp9512
g72
(dp9513
g8
g23
sg10
(dp9514
g25
(lp9515
(dp9516
g2
V==> str(x)
p9517
sg33
((dp9518
g9
(lp9519
g36
asg39
g40
stp9520
sasg2
Vx.__str__() <==> str(x)
p9521
sssV__getattribute__
p9522
(dp9523
g8
g23
sg10
(dp9524
g25
(lp9525
(dp9526
g2
V==> x.name
p9527
sg33
((dp9528
g9
(lp9529
g36
asg39
g40
s(dp9530
g39
Vname
p9531
stp9532
sasg2
Vx.__getattribute__('name') <==> x.name
p9533
sssg726
(dp9534
g8
g23
sg10
(dp9535
g25
(lp9536
(dp9537
g28
(lp9538
g108
asg2
Vsize of object in memory, in bytes
p9539
sg33
((dp9540
g9
(lp9541
g36
asg39
g40
stp9542
sasg2
V__sizeof__() -> int\u000asize of object in memory, in bytes
p9543
sssg223
(dp9544
g8
g23
sg10
(dp9545
g25
(lp9546
(dp9547
g2
V==> x<y
p9548
sg33
((dp9549
g9
(lp9550
g36
asg39
g40
s(dp9551
g39
Vy
stp9552
sasg2
Vx.__lt__(y) <==> x<y
p9553
sssg266
(dp9554
g8
g23
sg10
(dp9555
g25
(lp9556
(dp9557
g2
Vinitializes x; see help(type(x)) for signature
p9558
sg33
((dp9559
g9
(lp9560
g36
asg39
g40
s(dp9561
g275
V*
sg39
g33
stp9562
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p9563
sssg5702
(dp9564
g8
g23
sg10
(dp9565
g25
(lp9566
(dp9567
g2
V==> x.name = value
p9568
sg33
((dp9569
g9
(lp9570
g36
asg39
g40
s(dp9571
g39
Vname
p9572
s(dp9573
g39
Vvalue
p9574
stp9575
sasg2
Vx.__setattr__('name', value) <==> x.name = value
p9576
sssg304
(dp9577
g8
g23
sg10
(dp9578
g25
Nsg2
Vhelper for pickle
p9579
sssg319
(dp9580
g8
g321
sg10
(dp9581
g25
(lp9582
(dp9583
g28
(lp9584
g15
asg33
((dp9585
g9
(lp9586
g7676
asg39
g332
stp9587
sasssg6023
(dp9588
g8
g23
sg10
(dp9589
g25
Nsg2
Vdefault object formatter
p9590
sssV__class__
p9591
(dp9592
g8
g1025
sg10
(dp9593
g2
Vthe object's class
p9594
sg9
(lp9595
g15
asssg873
(dp9596
g8
g793
sg10
(dp9597
g9
(lp9598
g877
asssg43
(dp9599
g8
g23
sg10
(dp9600
g25
(lp9601
(dp9602
g2
V==> x!=y
p9603
sg33
((dp9604
g9
(lp9605
g36
asg39
g40
s(dp9606
g39
Vy
stp9607
sasg2
Vx.__ne__(y) <==> x!=y
p9608
sssg82
(dp9609
g8
g23
sg10
(dp9610
g25
Nsg2
Vhelper for pickle
p9611
sssV__subclasshook__
p9612
(dp9613
g8
g321
sg10
(dp9614
g25
Nsg2
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p9615
sssg677
(dp9616
g8
g23
sg10
(dp9617
g25
(lp9618
(dp9619
g2
V==> x>y
p9620
sg33
((dp9621
g9
(lp9622
g36
asg39
g40
s(dp9623
g39
Vy
stp9624
sasg2
Vx.__gt__(y) <==> x>y
p9625
sssg460
(dp9626
g8
g23
sg10
(dp9627
g25
(lp9628
(dp9629
g2
V==> x==y
p9630
sg33
((dp9631
g9
(lp9632
g36
asg39
g40
s(dp9633
g39
Vy
stp9634
sasg2
Vx.__eq__(y) <==> x==y
p9635
sssg7615
(dp9636
g8
g23
sg10
(dp9637
g25
(lp9638
(dp9639
g28
(lp9640
g172
asg2
Vdefault dir() implementation
p9641
sg33
((dp9642
g9
(lp9643
g36
asg39
g40
stp9644
sasg2
V__dir__() -> list\u000adefault dir() implementation
p9645
sssg5755
(dp9646
g8
g23
sg10
(dp9647
g25
(lp9648
(dp9649
g2
V==> del x.name
p9650
sg33
((dp9651
g9
(lp9652
g36
asg39
g40
s(dp9653
g39
Vname
p9654
stp9655
sasg2
Vx.__delattr__('name') <==> del x.name
p9656
sssg908
(dp9657
g8
g23
sg10
(dp9658
g25
(lp9659
(dp9660
g2
V==> x<=y
p9661
sg33
((dp9662
g9
(lp9663
g36
asg39
g40
s(dp9664
g39
Vy
stp9665
sasg2
Vx.__le__(y) <==> x<=y
p9666
sssg507
(dp9667
g8
g23
sg10
(dp9668
g25
(lp9669
(dp9670
g2
V==> repr(x)
p9671
sg33
((dp9672
g9
(lp9673
g36
asg39
g40
stp9674
sasg2
Vx.__repr__() <==> repr(x)
p9675
sssg930
(dp9676
g8
g23
sg10
(dp9677
g25
(lp9678
(dp9679
g2
V==> hash(x)
p9680
sg33
((dp9681
g9
(lp9682
g36
asg39
g40
stp9683
sasg2
Vx.__hash__() <==> hash(x)
p9684
sssg959
(dp9685
g8
g23
sg10
(dp9686
g25
(lp9687
(dp9688
g2
V==> x>=y
p9689
sg33
((dp9690
g9
(lp9691
g36
asg39
g40
s(dp9692
g39
Vy
stp9693
sasg2
Vx.__ge__(y) <==> x>=y
p9694
ssssg970
(lp9695
g15
asssVrepr
p9696
(dp9697
g8
g321
sg10
(dp9698
g25
(lp9699
(dp9700
g28
(lp9701
g406
asg2
VReturn the canonical string representation of the object.\u000aFor most object types, eval(repr(object)) == object.
p9702
sg33
((dp9703
g39
Vobject
p9704
stp9705
sasg2
Vrepr(object) -> string\u000a\u000aReturn the canonical string representation of the object.\u000aFor most object types, eval(repr(object)) == object.
p9706
sssVcallable
p9707
(dp9708
g8
g321
sg10
(dp9709
g25
(lp9710
(dp9711
g28
(lp9712
g141
asg2
VReturn whether the object is callable (i.e., some kind of function).\u000aNote that classes are callable, as are instances of classes with a\u000a__call__() method.
p9713
sg33
((dp9714
g39
Vobject
p9715
stp9716
sasg2
Vcallable(object) -> bool\u000a\u000aReturn whether the object is callable (i.e., some kind of function).\u000aNote that classes are callable, as are instances of classes with a\u000a__call__() method.
p9717
sssVZeroDivisionError
p9718
(dp9719
g8
g9
sg10
(dp9720
g2
VSecond argument to a division or modulo operation was zero.
p9721
sg13
(lp9722
g4361
asg4
(dp9723
g319
(dp9724
g8
g321
sg10
(dp9725
g25
(lp9726
(dp9727
g2
VSecond argument to a division or modulo operation was zero.
p9728
sg33
(lp9729
(dp9730
g275
V*
sg39
g33
sasasg2
g9728
sssg266
(dp9731
g8
g23
sg10
(dp9732
g25
(lp9733
(dp9734
g2
Vinitializes x; see help(type(x)) for signature
p9735
sg33
((dp9736
g9
(lp9737
g36
asg39
g40
s(dp9738
g275
V*
sg39
g33
stp9739
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p9740
sssg873
(dp9741
g8
g793
sg10
(dp9742
g9
(lp9743
g877
assssg970
(lp9744
(dp9745
g16
Vbuiltins
p9746
sg18
VZeroDivisionError
p9747
sag4361
ag1012
ag1080
ag15
asssVslice
p9748
(dp9749
g8
g9
sg10
(dp9750
g2
Vslice([start,] stop[, step])\u000a\u000aCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
p9751
sg13
(lp9752
g15
asg4
(dp9753
g43
(dp9754
g8
g23
sg10
(dp9755
g25
(lp9756
(dp9757
g2
V==> x!=y
p9758
sg33
((dp9759
g9
(lp9760
g36
asg39
g40
s(dp9761
g39
Vy
stp9762
sasg2
Vx.__ne__(y) <==> x!=y
p9763
sssg319
(dp9764
g8
g321
sg10
(dp9765
g25
(lp9766
(dp9767
g2
VCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
p9768
sg33
((dp9769
g9
(lp9770
g329
asg39
g332
s(dp9771
g67
g68
sg39
Vstart
p9772
s(dp9773
g9
(lp9774
g5439
asg39
Vstop
p9775
s(dp9776
g67
g68
sg9
(lp9777
g5439
asg39
Vstep
p9778
stp9779
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p9780
sssg4149
(dp9781
g8
g1025
sg10
(dp9782
g9
(lp9783
g15
asssg5466
(dp9784
g8
g1025
sg10
(dp9785
g9
(lp9786
g15
asssg82
(dp9787
g8
g23
sg10
(dp9788
g25
Nsg2
VReturn state information for pickling.
p9789
sssVindices
p9790
(dp9791
g8
g23
sg10
(dp9792
g25
(lp9793
(dp9794
g28
(lp9795
g840
asg2
V(start, stop, stride)\u000a\u000aAssuming a sequence of length len, calculate the start and stop\u000aindices, and the stride length of the extended slice described by\u000aS. Out of bounds indices are clipped in a manner consistent with the\u000ahandling of normal slices.
p9796
sg33
((dp9797
g9
(lp9798
g36
asg39
g40
s(dp9799
g39
Vlen
p9800
stp9801
sasg2
VS.indices(len) -> (start, stop, stride)\u000a\u000aAssuming a sequence of length len, calculate the start and stop\u000aindices, and the stride length of the extended slice described by\u000aS. Out of bounds indices are clipped in a manner consistent with the\u000ahandling of normal slices.
p9802
sssg5484
(dp9803
g8
g1025
sg10
(dp9804
g9
(lp9805
g15
asssg908
(dp9806
g8
g23
sg10
(dp9807
g25
(lp9808
(dp9809
g2
V==> x<=y
p9810
sg33
((dp9811
g9
(lp9812
g36
asg39
g40
s(dp9813
g39
Vy
stp9814
sasg2
Vx.__le__(y) <==> x<=y
p9815
sssg507
(dp9816
g8
g23
sg10
(dp9817
g25
(lp9818
(dp9819
g2
V==> repr(x)
p9820
sg33
((dp9821
g9
(lp9822
g36
asg39
g40
stp9823
sasg2
Vx.__repr__() <==> repr(x)
p9824
sssg677
(dp9825
g8
g23
sg10
(dp9826
g25
(lp9827
(dp9828
g2
V==> x>y
p9829
sg33
((dp9830
g9
(lp9831
g36
asg39
g40
s(dp9832
g39
Vy
stp9833
sasg2
Vx.__gt__(y) <==> x>y
p9834
sssg930
(dp9835
g8
g793
sg10
(dp9836
g9
(lp9837
g934
asssg223
(dp9838
g8
g23
sg10
(dp9839
g25
(lp9840
(dp9841
g2
V==> x<y
p9842
sg33
((dp9843
g9
(lp9844
g36
asg39
g40
s(dp9845
g39
Vy
stp9846
sasg2
Vx.__lt__(y) <==> x<y
p9847
sssg460
(dp9848
g8
g23
sg10
(dp9849
g25
(lp9850
(dp9851
g2
V==> x==y
p9852
sg33
((dp9853
g9
(lp9854
g36
asg39
g40
s(dp9855
g39
Vy
stp9856
sasg2
Vx.__eq__(y) <==> x==y
p9857
sssg873
(dp9858
g8
g793
sg10
(dp9859
g9
(lp9860
g877
asssg959
(dp9861
g8
g23
sg10
(dp9862
g25
(lp9863
(dp9864
g2
V==> x>=y
p9865
sg33
((dp9866
g9
(lp9867
g36
asg39
g40
s(dp9868
g39
Vy
stp9869
sasg2
Vx.__ge__(y) <==> x>=y
p9870
ssssg970
(lp9871
(dp9872
g16
Vbuiltins
p9873
sg18
Vslice
p9874
sag15
asssVmodule_type
p9875
(dp9876
g8
g9
sg10
(dp9877
g13
(lp9878
g15
asg1362
I01
sg970
(lp9879
(dp9880
g16
Vbuiltins
p9881
sg18
Vmodule
p9882
sag15
asg4
(dp9883
g5702
(dp9884
g8
g23
sg10
(dp9885
g25
(lp9886
(dp9887
g2
V==> x.name = value
p9888
sg33
((dp9889
g9
(lp9890
g36
asg39
g40
s(dp9891
g39
Vname
p9892
s(dp9893
g39
Vvalue
p9894
stp9895
sasg2
Vx.__setattr__('name', value) <==> x.name = value
p9896
sssg319
(dp9897
g8
g321
sg10
(dp9898
g25
(lp9899
(dp9900
g2
VCreate a module object.\u000aThe name must be a string; the optional doc argument can have any type.
p9901
sg33
((dp9902
g9
(lp9903
g329
asg39
g332
s(dp9904
g39
Vname
p9905
s(dp9906
g67
g68
sg39
Vdoc
p9907
stp9908
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p9909
sssg5596
(dp9910
g8
g1025
sg10
(dp9911
g9
(lp9912
g15
asssg5755
(dp9913
g8
g23
sg10
(dp9914
g25
(lp9915
(dp9916
g2
V==> del x.name
p9917
sg33
((dp9918
g9
(lp9919
g36
asg39
g40
s(dp9920
g39
Vname
p9921
stp9922
sasg2
Vx.__delattr__('name') <==> del x.name
p9923
sssg507
(dp9924
g8
g23
sg10
(dp9925
g25
(lp9926
(dp9927
g2
V==> repr(x)
p9928
sg33
((dp9929
g9
(lp9930
g36
asg39
g40
stp9931
sasg2
Vx.__repr__() <==> repr(x)
p9932
sssg7615
(dp9933
g8
g23
sg10
(dp9934
g25
(lp9935
(dp9936
g28
(lp9937
g172
asg2
Vspecialized dir() implementation
p9938
sg33
((dp9939
g9
(lp9940
g36
asg39
g40
stp9941
sasg2
V__dir__() -> list\u000aspecialized dir() implementation
p9942
sssg873
(dp9943
g8
g793
sg10
(dp9944
g9
(lp9945
g877
asssg266
(dp9946
g8
g23
sg10
(dp9947
g25
(lp9948
(dp9949
g2
Vinitializes x; see help(type(x)) for signature
p9950
sg33
((dp9951
g9
(lp9952
g36
asg39
g40
s(dp9953
g275
V*
sg39
g33
stp9954
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p9955
ssssg2
Vmodule(name[, doc])\u000a\u000aCreate a module object.\u000aThe name must be a string; the optional doc argument can have any type.
p9956
sssVeval
p9957
(dp9958
g8
g321
sg10
(dp9959
g25
(lp9960
(dp9961
g28
(lp9962
g4395
asg2
VEvaluate the source in the context of globals and locals.\u000aThe source may be a string representing a Python expression\u000aor a code object as returned by compile().\u000aThe globals must be a dictionary and locals can be any mapping,\u000adefaulting to the current globals and locals.\u000aIf only globals is given, locals defaults to it.\u000a
p9963
sg33
((dp9964
g39
Vsource
p9965
s(dp9966
g67
g68
sg39
Vglobals
p9967
s(dp9968
g67
g68
sg39
Vlocals
p9969
stp9970
sasg2
Veval(source[, globals[, locals]]) -> value\u000a\u000aEvaluate the source in the context of globals and locals.\u000aThe source may be a string representing a Python expression\u000aor a code object as returned by compile().\u000aThe globals must be a dictionary and locals can be any mapping,\u000adefaulting to the current globals and locals.\u000aIf only globals is given, locals defaults to it.\u000a
p9971
sssVOverflowError
p9972
(dp9973
g8
g9
sg10
(dp9974
g2
VResult too large to be represented.
p9975
sg13
(lp9976
g4361
asg4
(dp9977
g319
(dp9978
g8
g321
sg10
(dp9979
g25
(lp9980
(dp9981
g2
VResult too large to be represented.
p9982
sg33
(lp9983
(dp9984
g275
V*
sg39
g33
sasasg2
g9982
sssg266
(dp9985
g8
g23
sg10
(dp9986
g25
(lp9987
(dp9988
g2
Vinitializes x; see help(type(x)) for signature
p9989
sg33
((dp9990
g9
(lp9991
g36
asg39
g40
s(dp9992
g275
V*
sg39
g33
stp9993
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p9994
sssg873
(dp9995
g8
g793
sg10
(dp9996
g9
(lp9997
g877
assssg970
(lp9998
(dp9999
g16
Vbuiltins
p10000
sg18
VOverflowError
p10001
sag4361
ag1012
ag1080
ag15
asssV__debug__
p10002
(dp10003
g8
g793
sg10
(dp10004
g9
(lp10005
g2461
asssVReferenceError
p10006
(dp10007
g8
g9
sg10
(dp10008
g2
VWeak ref proxy used after referent went away.
p10009
sg13
(lp10010
g1012
asg4
(dp10011
g319
(dp10012
g8
g321
sg10
(dp10013
g25
(lp10014
(dp10015
g2
VWeak ref proxy used after referent went away.
p10016
sg33
(lp10017
(dp10018
g275
V*
sg39
g33
sasasg2
g10016
sssg266
(dp10019
g8
g23
sg10
(dp10020
g25
(lp10021
(dp10022
g2
Vinitializes x; see help(type(x)) for signature
p10023
sg33
((dp10024
g9
(lp10025
g36
asg39
g40
s(dp10026
g275
V*
sg39
g33
stp10027
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10028
sssg873
(dp10029
g8
g793
sg10
(dp10030
g9
(lp10031
g877
assssg970
(lp10032
(dp10033
g16
Vbuiltins
p10034
sg18
VReferenceError
p10035
sag1012
ag1080
ag15
asssVAssertionError
p10036
(dp10037
g8
g9
sg10
(dp10038
g2
VAssertion failed.
p10039
sg13
(lp10040
g1012
asg4
(dp10041
g319
(dp10042
g8
g321
sg10
(dp10043
g25
(lp10044
(dp10045
g2
VAssertion failed.
p10046
sg33
(lp10047
(dp10048
g275
V*
sg39
g33
sasasg2
g10046
sssg266
(dp10049
g8
g23
sg10
(dp10050
g25
(lp10051
(dp10052
g2
Vinitializes x; see help(type(x)) for signature
p10053
sg33
((dp10054
g9
(lp10055
g36
asg39
g40
s(dp10056
g275
V*
sg39
g33
stp10057
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10058
sssg873
(dp10059
g8
g793
sg10
(dp10060
g9
(lp10061
g877
assssg970
(lp10062
(dp10063
g16
Vbuiltins
p10064
sg18
VAssertionError
p10065
sag1012
ag1080
ag15
asssVclassmethod
p10066
(dp10067
g8
g9
sg10
(dp10068
g2
Vclassmethod(function) -> method\u000a\u000aConvert a function to be a class method.\u000a\u000aA class method receives the class as implicit first argument,\u000ajust like an instance method receives the instance.\u000aTo declare a class method, use this idiom:\u000a\u000a  class C:\u000a      def f(cls, arg1, arg2, ...): ...\u000a      f = classmethod(f)\u000a\u000aIt can be called either on the class (e.g. C.f()) or on an instance\u000a(e.g. C().f()).  The instance is ignored except for its class.\u000aIf a class method is called for a derived class, the derived class\u000aobject is passed as the implied first argument.\u000a\u000aClass methods are different than C++ or Java static methods.\u000aIf you want those, see the staticmethod builtin.
p10069
sg13
(lp10070
g15
asg4
(dp10071
g319
(dp10072
g8
g321
sg10
(dp10073
g25
(lp10074
(dp10075
g28
(lp10076
g5583
asg2
VConvert a function to be a class method.\u000a\u000aA class method receives the class as implicit first argument,\u000ajust like an instance method receives the instance.\u000aTo declare a class method, use this idiom:\u000a\u000a  class C:\u000a      def f(cls, arg1, arg2, ...): ...\u000a      f = classmethod(f)\u000a\u000aIt can be called either on the class (e.g. C.f()) or on an instance\u000a(e.g. C().f()).  The instance is ignored except for its class.\u000aIf a class method is called for a derived class, the derived class\u000aobject is passed as the implied first argument.\u000a\u000aClass methods are different than C++ or Java static methods.\u000aIf you want those, see the staticmethod builtin.
p10077
sg33
((dp10078
g9
(lp10079
g329
asg39
g332
s(dp10080
g39
Vfunction
p10081
stp10082
sasg2
VT.__new__(S, ...) -> a new object with type S, a subtype of T
p10083
sssg5592
(dp10084
g8
g1025
sg10
(dp10085
g9
(lp10086
g15
asssg5596
(dp10087
g8
g1025
sg10
(dp10088
g9
(lp10089
g15
asssg5600
(dp10090
g8
g1025
sg10
(dp10091
g9
(lp10092
g15
asssg873
(dp10093
g8
g793
sg10
(dp10094
g9
(lp10095
g877
asssg266
(dp10096
g8
g23
sg10
(dp10097
g25
(lp10098
(dp10099
g2
Vinitializes x; see help(type(x)) for signature
p10100
sg33
((dp10101
g9
(lp10102
g36
asg39
g40
s(dp10103
g275
V*
sg39
g33
stp10104
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10105
sssg5078
(dp10106
g8
g23
sg10
(dp10107
g25
(lp10108
(dp10109
g28
(lp10110
g4395
asg2
V
sg33
((dp10111
g9
(lp10112
g36
asg39
g40
s(dp10113
g39
Vobj
p10114
s(dp10115
g67
g68
sg39
Vtype
p10116
stp10117
sasg2
Vdescr.__get__(obj[, type]) -> value
p10118
ssssg970
(lp10119
(dp10120
g16
Vbuiltins
p10121
sg18
Vclassmethod
p10122
sag15
asssVUnboundLocalError
p10123
(dp10124
g8
g9
sg10
(dp10125
g2
VLocal name referenced but not bound to a value.
p10126
sg13
(lp10127
g1715
asg4
(dp10128
g319
(dp10129
g8
g321
sg10
(dp10130
g25
(lp10131
(dp10132
g2
VLocal name referenced but not bound to a value.
p10133
sg33
(lp10134
(dp10135
g275
V*
sg39
g33
sasasg2
g10133
sssg266
(dp10136
g8
g23
sg10
(dp10137
g25
(lp10138
(dp10139
g2
Vinitializes x; see help(type(x)) for signature
p10140
sg33
((dp10141
g9
(lp10142
g36
asg39
g40
s(dp10143
g275
V*
sg39
g33
stp10144
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10145
sssg873
(dp10146
g8
g793
sg10
(dp10147
g9
(lp10148
g877
assssg970
(lp10149
(dp10150
g16
Vbuiltins
p10151
sg18
VUnboundLocalError
p10152
sag1715
ag1012
ag1080
ag15
asssVNotImplementedError
p10153
(dp10154
g8
g9
sg10
(dp10155
g2
VMethod or function hasn't been implemented yet.
p10156
sg13
(lp10157
g5841
asg4
(dp10158
g319
(dp10159
g8
g321
sg10
(dp10160
g25
(lp10161
(dp10162
g2
VMethod or function hasn't been implemented yet.
p10163
sg33
(lp10164
(dp10165
g275
V*
sg39
g33
sasasg2
g10163
sssg266
(dp10166
g8
g23
sg10
(dp10167
g25
(lp10168
(dp10169
g2
Vinitializes x; see help(type(x)) for signature
p10170
sg33
((dp10171
g9
(lp10172
g36
asg39
g40
s(dp10173
g275
V*
sg39
g33
stp10174
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10175
sssg873
(dp10176
g8
g793
sg10
(dp10177
g9
(lp10178
g877
assssg970
(lp10179
(dp10180
g16
Vbuiltins
p10181
sg18
VNotImplementedError
p10182
sag5841
ag1012
ag1080
ag15
asssVAttributeError
p10183
(dp10184
g8
g9
sg10
(dp10185
g2
VAttribute not found.
p10186
sg13
(lp10187
g1012
asg4
(dp10188
g319
(dp10189
g8
g321
sg10
(dp10190
g25
(lp10191
(dp10192
g2
VAttribute not found.
p10193
sg33
(lp10194
(dp10195
g275
V*
sg39
g33
sasasg2
g10193
sssg266
(dp10196
g8
g23
sg10
(dp10197
g25
(lp10198
(dp10199
g2
Vinitializes x; see help(type(x)) for signature
p10200
sg33
((dp10201
g9
(lp10202
g36
asg39
g40
s(dp10203
g275
V*
sg39
g33
stp10204
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10205
sssg873
(dp10206
g8
g793
sg10
(dp10207
g9
(lp10208
g877
assssg970
(lp10209
(dp10210
g16
Vbuiltins
p10211
sg18
VAttributeError
p10212
sag1012
ag1080
ag15
asssVFileNotFoundError
p10213
(dp10214
g8
g9
sg10
(dp10215
g2
VFile not found.
p10216
sg13
(lp10217
g1116
asg4
(dp10218
g319
(dp10219
g8
g321
sg10
(dp10220
g25
(lp10221
(dp10222
g2
VFile not found.
p10223
sg33
(lp10224
(dp10225
g275
V*
sg39
g33
sasasg2
g10223
sssg266
(dp10226
g8
g23
sg10
(dp10227
g25
(lp10228
(dp10229
g2
Vinitializes x; see help(type(x)) for signature
p10230
sg33
((dp10231
g9
(lp10232
g36
asg39
g40
s(dp10233
g275
V*
sg39
g33
stp10234
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10235
sssg873
(dp10236
g8
g793
sg10
(dp10237
g9
(lp10238
g877
assssg970
(lp10239
(dp10240
g16
Vbuiltins
p10241
sg18
VFileNotFoundError
p10242
sag1116
ag1012
ag1080
ag15
asssVNoneType
p10243
(dp10244
g8
g9
sg10
(dp10245
g13
(lp10246
g15
asg1362
I01
sg970
(lp10247
g934
ag15
asg4
(dp10248
g6173
(dp10249
g8
g23
sg10
(dp10250
g25
(lp10251
(dp10252
g2
V==> x != 0
p10253
sg33
((dp10254
g9
(lp10255
g36
asg39
g40
stp10256
sasg2
Vx.__bool__() <==> x != 0
p10257
sssg873
(dp10258
g8
g793
sg10
(dp10259
g9
(lp10260
g934
asssg507
(dp10261
g8
g23
sg10
(dp10262
g25
(lp10263
(dp10264
g2
V==> repr(x)
p10265
sg33
((dp10266
g9
(lp10267
g36
asg39
g40
stp10268
sasg2
Vx.__repr__() <==> repr(x)
p10269
sssg319
(dp10270
g8
g321
sg10
(dp10271
g25
(lp10272
(dp10273
g2
V
sg33
(lp10274
(dp10275
g275
V*
sg39
g33
sasasg2
V
ssssssVWindowsError
p10276
(dp10277
g8
g9
sg10
(dp10278
g2
VBase class for I/O related errors.
p10279
sg13
(lp10280
g1012
asg4
(dp10281
g2126
(dp10282
g8
g1025
sg10
(dp10283
g2
VWin32 exception code
p10284
sg9
(lp10285
g15
asssg319
(dp10286
g8
g321
sg10
(dp10287
g25
(lp10288
(dp10289
g2
VBase class for I/O related errors.
p10290
sg33
(lp10291
(dp10292
g275
V*
sg39
g33
sasasg2
g10290
sssg2138
(dp10293
g8
g1025
sg10
(dp10294
g9
(lp10295
g15
asssg2142
(dp10296
g8
g1025
sg10
(dp10297
g2
VPOSIX exception code
p10298
sg9
(lp10299
g15
asssg72
(dp10300
g8
g23
sg10
(dp10301
g25
(lp10302
(dp10303
g2
V==> str(x)
p10304
sg33
((dp10305
g9
(lp10306
g36
asg39
g40
stp10307
sasg2
Vx.__str__() <==> str(x)
p10308
sssg82
(dp10309
g8
g23
sg10
(dp10310
g25
Nsssg2158
(dp10311
g8
g1025
sg10
(dp10312
g2
Vexception strerror
p10313
sg9
(lp10314
g15
asssg1034
(dp10315
g8
g1025
sg10
(dp10316
g2
Vexception filename
p10317
sg9
(lp10318
g15
asssg873
(dp10319
g8
g793
sg10
(dp10320
g9
(lp10321
g877
asssg266
(dp10322
g8
g23
sg10
(dp10323
g25
(lp10324
(dp10325
g2
Vinitializes x; see help(type(x)) for signature
p10326
sg33
((dp10327
g9
(lp10328
g36
asg39
g40
s(dp10329
g275
V*
sg39
g33
stp10330
sasg2
Vx.__init__(...) initializes x; see help(type(x)) for signature
p10331
ssssg970
(lp10332
g1116
ag1012
ag1080
ag15
assss.